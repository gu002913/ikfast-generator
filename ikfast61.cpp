/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-04-03 09:09:39.254376
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48;
x0=IKsin(j[5]);
x1=IKsin(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=(x3*x4);
x6=((1.0)*x5);
x7=(x2*x6);
x8=((1.0)*x2);
x9=IKcos(j[1]);
x10=IKcos(j[2]);
x11=(x10*x9);
x12=IKcos(j[3]);
x13=(x10*x3);
x14=((1.0)*x13);
x15=(x4*x9);
x16=((1.0)*x15);
x17=(x2*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x14)))));
x18=(((x1*((x7+(((-1.0)*(1.0)*x11*x8))))))+((x12*x17)));
x19=IKcos(j[5]);
x20=IKsin(j[0]);
x21=IKsin(j[4]);
x22=(x20*x21);
x23=IKcos(j[4]);
x24=(x11*x2);
x25=(x12*((x24+(((-1.0)*(1.0)*x7)))));
x26=(x1*x17);
x27=(x23*((x25+x26)));
x28=(x20*x23);
x29=((0.425)*x9);
x30=((0.39225)*x3*x4);
x31=((0.09465)*x5);
x32=((0.09465)*x11);
x33=((0.09465)*x13);
x34=((0.09465)*x15);
x35=(x20*x6);
x36=((1.0)*x11);
IkReal x49=((1.0)*x20);
x37=((((-1.0)*x16*x49))+(((-1.0)*x14*x49)));
x38=(((x1*((x35+(((-1.0)*(1.0)*x20*x36))))))+((x12*x37)));
x39=(x21*x8);
x40=(x11*x20);
x41=(x12*(((((-1.0)*(1.0)*x35))+x40)));
x42=(x1*x37);
x43=(x23*((x41+x42)));
x44=(x36+(((-1.0)*(1.0)*x6)));
x45=(((x1*(((((-1.0)*(1.0)*x16))+(((-1.0)*(1.0)*x14))))))+((x12*x44)));
x46=(x12*((x15+x13)));
x47=(x1*x44);
x48=((((-1.0)*(1.0)*x47))+(((-1.0)*(1.0)*x46)));
eerot[0]=(((x19*((x22+x27))))+((x0*x18)));
eerot[1]=(((x18*x19))+((x0*(((((-1.0)*(1.0)*x27))+(((-1.0)*(1.0)*x22)))))));
eerot[2]=(x28+((x21*(((((-1.0)*(1.0)*x25))+(((-1.0)*(1.0)*x26)))))));
IkReal x50=((1.0)*x2);
eetrans[0]=(((x12*((((x2*x33))+((x2*x34))))))+(((0.10915)*x20))+(((0.0823)*x28))+((x21*(((((-1.0)*(0.0823)*x26))+(((-1.0)*(0.0823)*x25))))))+((x2*x30))+(((-1.0)*x29*x50))+((x1*((((x2*x32))+(((-1.0)*x31*x50))))))+(((-1.0)*(0.39225)*x24)));
eerot[3]=(((x0*x38))+((x19*(((((-1.0)*(1.0)*x39))+x43)))));
eerot[4]=(((x0*((x39+(((-1.0)*(1.0)*x43))))))+((x19*x38)));
eerot[5]=(((x21*(((((-1.0)*(1.0)*x42))+(((-1.0)*(1.0)*x41))))))+(((-1.0)*(1.0)*x23*x8)));
IkReal x51=((1.0)*x20);
eetrans[1]=(((x1*((((x20*x32))+(((-1.0)*x31*x51))))))+((x21*(((((-1.0)*(0.0823)*x41))+(((-1.0)*(0.0823)*x42))))))+((x12*((((x20*x34))+((x20*x33))))))+(((-1.0)*(0.0823)*x2*x23))+(((-1.0)*(0.39225)*x40))+(((-1.0)*x29*x51))+(((-1.0)*(0.10915)*x2))+((x20*x30)));
eerot[6]=(((x19*x23*((x46+x47))))+((x0*x45)));
eerot[7]=(((x0*x23*x48))+((x19*x45)));
eerot[8]=(x21*x48);
eetrans[2]=((0.089159)+(((-1.0)*(0.39225)*x13))+((x21*(((((-1.0)*(0.0823)*x46))+(((-1.0)*(0.0823)*x47))))))+((x1*((x34+x33))))+((x12*((x31+(((-1.0)*(1.0)*x32))))))+(((-1.0)*(0.425)*x3))+(((-1.0)*(0.39225)*x15)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-1.0)*(0.0823)*r02)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=(py+(((-1.0)*(0.0823)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.089159)+pz+(((-1.0)*(0.0823)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*py);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x54)));
rxp2_0=((((-1.0)*r22*x52))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x53))+((px*r22)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.09465)*r20);
IkReal x56=((-1.0)*x55);
IkReal x57=((0.1893)*npx);
IkReal x58=((-1.0)*(((1.0)*r20)));
IkReal x59=((-1.0)*(((1.0)*rxp0_2)));
IkReal x60=((0.09465)*r21);
IkReal x61=((-1.0)*x60);
IkReal x62=((0.1893)*npy);
IkReal x63=((-1.0)*(((1.0)*r21)));
IkReal x64=((-1.0)*(((1.0)*rxp1_2)));
IkReal x65=((-1.0)*(((1.0)*r22)));
IkReal x66=((0.09465)*r22);
IkReal x67=((-1.0)*(((1.0)*npz)));
IkReal x68=((-1.0)*(((1.0)*npx)));
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x57;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x57;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x61;
matrixinvcoeffs[33]=x62;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x63;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x64;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x61;
matrixinvcoeffs[51]=x62;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x63;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x64;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x65;
matrixinvcoeffs[76]=x66;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*(((1.0)*rxp2_2)));
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x67;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x66;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x64;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x61;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x64;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x60;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x68;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x55;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x68;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x65;
matrixinvcoeffs[165]=x67;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x66;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x65;
matrixinvcoeffs[183]=x67;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-1.0)*x66);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x63;
matrixinvcoeffs[204]=x60;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x64;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*(((1.0)*npy)));
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x60;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x68;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x69=((0.000977833645875)*r22);
IkReal x70=((0.000977833645875)*r21);
IkReal x71=((0.000977833645875)*r20);
IkReal x72=((0.2183)*npz*pz);
IkReal x73=((0.10915)*pp*r22);
IkReal x74=((0.2183)*npy*pz);
IkReal x75=((0.10915)*pp*r21);
IkReal x76=((0.2183)*npx*pz);
IkReal x77=((0.10915)*pp*r20);
IkReal x78=((((-1.0)*gclwh8_5*x71))+((gclwh10_5*x72))+((gclwh6_5*x75))+(((-1.0)*gclwh10_5*x69))+(((-1.0)*gclwh6_5*x74))+(((-1.0)*gclwh8_5*x77))+((gclwh8_5*x76))+(((-1.0)*gclwh10_5*x73))+((gclwh6_5*x70)));
IkReal x79=(gclwh10_12*r22);
IkReal x80=(gclwh12_14*rxp1_2);
IkReal x81=((0.020662095)*x80);
IkReal x82=(gclwh12_8*rxp1_2);
IkReal x83=(gclwh14_14*rxp0_2);
IkReal x84=((0.020662095)*x83);
IkReal x85=(gclwh14_8*rxp0_2);
IkReal x86=((0.020662095)*rxp2_2);
IkReal x87=(gclwh4_14*x86);
IkReal x88=(gclwh4_8*rxp2_2);
IkReal x89=(gclwh6_12*r21);
IkReal x90=(gclwh8_12*r20);
IkReal x91=(gclwh10_12*npz*pz);
IkReal x92=(gclwh10_12*pp*r22);
IkReal x93=(gclwh6_12*npy*pz);
IkReal x94=(gclwh6_12*pp*r21);
IkReal x95=(gclwh8_12*npx*pz);
IkReal x96=(gclwh8_12*pp*r20);
IkReal x97=(gclwh10_11*r22);
IkReal x98=((0.0089586225)*x97);
IkReal x99=(gclwh12_11*rxp1_2);
IkReal x100=((0.1893)*x99);
IkReal x101=(gclwh12_3*rxp1_2);
IkReal x102=(gclwh14_11*rxp0_2);
IkReal x103=((0.1893)*x102);
IkReal x104=(gclwh14_3*rxp0_2);
IkReal x105=(gclwh4_11*rxp2_2);
IkReal x106=((0.1893)*x105);
IkReal x107=(gclwh4_3*rxp2_2);
IkReal x108=(gclwh6_11*r21);
IkReal x109=((0.0089586225)*x108);
IkReal x110=(gclwh8_11*r20);
IkReal x111=((0.0089586225)*x110);
IkReal x112=(pp*x97);
IkReal x113=(pp*x110);
IkReal x114=(gclwh10_11*npz*pz);
IkReal x115=((2.0)*x114);
IkReal x116=(gclwh6_11*npy*pz);
IkReal x117=((2.0)*x116);
IkReal x118=(pp*x108);
IkReal x119=(gclwh8_11*npx*pz);
IkReal x120=((2.0)*x119);
IkReal x121=((0.0089586225)*pz);
IkReal x122=(gclwh10_2*r22);
IkReal x123=((0.1893)*pz);
IkReal x124=(gclwh12_2*rxp1_2);
IkReal x125=((0.1893)*pp);
IkReal x126=(gclwh14_2*rxp0_2);
IkReal x127=(gclwh4_2*rxp2_2);
IkReal x128=(gclwh6_2*r21);
IkReal x129=((0.0089586225)*r20);
IkReal x130=(gclwh8_2*pz);
IkReal x131=(gclwh10_2*pp*r22);
IkReal x132=(pp*r20);
IkReal x133=((1.0)*pp*pz);
IkReal x134=pz*pz;
IkReal x135=((2.0)*npz*x134);
IkReal x136=((2.0)*npy*x134);
IkReal x137=((2.0)*npx*x134);
IkReal x138=(((x130*x132))+(((-1.0)*x123*x127))+((x101*x125))+(((0.017917245)*x88))+(((-1.0)*gclwh8_2*x137))+(((0.017917245)*x82))+(((-1.0)*x128*x133))+((x123*x126))+(((-1.0)*gclwh10_2*x135))+(((-0.017917245)*x85))+((pz*x131))+((gclwh6_2*x136))+(((-1.0)*x123*x124))+((x121*x122))+(((-1.0)*x121*x128))+((x107*x125))+(((-1.0)*x104*x125))+((x129*x130)));
IkReal x139=((0.017917245)*x97);
IkReal x140=((0.3786)*x99);
IkReal x141=((0.3786)*x102);
IkReal x142=((0.3786)*x105);
IkReal x143=((0.017917245)*x108);
IkReal x144=((0.017917245)*x110);
IkReal x145=((4.0)*x114);
IkReal x146=((2.0)*x112);
IkReal x147=((4.0)*x116);
IkReal x148=((2.0)*x118);
IkReal x149=((4.0)*x119);
IkReal x150=((2.0)*x113);
IkReal x151=(x139+x150+(((-1.0)*x142))+(((-1.0)*x148))+x147+x141+x146+x144+(((-1.0)*x140))+(((-1.0)*x145))+(((-1.0)*x149))+(((-1.0)*x143)));
IkReal x152=((0.04132419)*x80);
IkReal x153=((0.04132419)*x83);
IkReal x154=(gclwh4_14*rxp2_2);
IkReal x155=((0.04132419)*x154);
IkReal x156=(x153+(((-1.0)*x152))+(((-1.0)*x155)));
IkReal x157=((0.14850585)*rxp2_2);
IkReal x158=((0.00702803935125)*r21);
IkReal x159=((0.00702803935125)*r20);
IkReal x160=(gclwh10_2*npz*pz);
IkReal x161=((0.7845)*pp);
IkReal x162=((1.569)*npy*pz);
IkReal x163=((1.569)*npx);
IkReal x164=((0.7845)*pp*r20);
IkReal x165=(gclwh11_10*r22);
IkReal x166=((0.0089586225)*x165);
IkReal x167=(gclwh13_1*rxp1_2);
IkReal x168=(gclwh13_10*rxp1_2);
IkReal x169=((0.1893)*x168);
IkReal x170=(gclwh15_1*rxp0_2);
IkReal x171=(gclwh15_10*rxp0_2);
IkReal x172=((0.1893)*x171);
IkReal x173=(gclwh5_1*rxp2_2);
IkReal x174=(gclwh5_10*rxp2_2);
IkReal x175=((0.1893)*x174);
IkReal x176=(gclwh7_10*r21);
IkReal x177=((0.0089586225)*x176);
IkReal x178=(gclwh9_10*r20);
IkReal x179=((0.0089586225)*x178);
IkReal x180=(pp*x176);
IkReal x181=(gclwh11_10*npz*pz);
IkReal x182=((2.0)*x181);
IkReal x183=(pp*x165);
IkReal x184=(gclwh7_10*npy*pz);
IkReal x185=((2.0)*x184);
IkReal x186=(gclwh9_10*npx*pz);
IkReal x187=((2.0)*x186);
IkReal x188=(pp*x178);
IkReal x189=(gclwh13_9*rxp1_2);
IkReal x190=(gclwh15_9*rxp0_2);
IkReal x191=(gclwh5_9*rxp2_2);
IkReal x192=(gclwh11_0*r22);
IkReal x193=(gclwh13_0*rxp1_2);
IkReal x194=(gclwh15_0*rxp0_2);
IkReal x195=(gclwh5_0*rxp2_2);
IkReal x196=(gclwh7_0*r21);
IkReal x197=(gclwh9_0*pz);
IkReal x198=(gclwh11_0*pp*r22);
IkReal x199=((((0.017917245)*x189))+((x121*x192))+(((-1.0)*x123*x195))+((x132*x197))+(((-1.0)*x123*x193))+((x129*x197))+(((-1.0)*x121*x196))+(((-0.017917245)*x190))+(((-1.0)*x125*x170))+(((0.017917245)*x191))+(((-1.0)*gclwh9_0*x137))+((x125*x167))+(((-1.0)*x133*x196))+(((-1.0)*gclwh11_0*x135))+((gclwh7_0*x136))+((x125*x173))+((x123*x194))+((pz*x198)));
IkReal x200=(((gclwh7_7*x70))+((gclwh11_7*x72))+(((-1.0)*gclwh9_7*x71))+(((-1.0)*gclwh11_7*x69))+((gclwh7_7*x75))+((gclwh9_7*x76))+(((-1.0)*gclwh9_7*x77))+(((-1.0)*gclwh11_7*x73))+(((-1.0)*gclwh7_7*x74)));
IkReal x201=(gclwh11_13*r22);
IkReal x202=(gclwh13_15*rxp1_2);
IkReal x203=((0.020662095)*x202);
IkReal x204=(gclwh15_15*rxp0_2);
IkReal x205=((0.020662095)*x204);
IkReal x206=(gclwh5_15*x86);
IkReal x207=(gclwh7_13*r21);
IkReal x208=(gclwh9_13*r20);
IkReal x209=(gclwh11_13*npz*pz);
IkReal x210=(gclwh11_13*pp*r22);
IkReal x211=(gclwh7_13*npy*pz);
IkReal x212=(gclwh7_13*pp*r21);
IkReal x213=(gclwh9_13*npx*pz);
IkReal x214=(gclwh9_13*pp*r20);
IkReal x215=((0.04132419)*x202);
IkReal x216=((0.04132419)*x204);
IkReal x217=(gclwh5_15*rxp2_2);
IkReal x218=((0.04132419)*x217);
IkReal x219=((((-1.0)*x216))+x218+x215);
IkReal x220=(gclwh11_0*npz*pz);
IkReal x221=((0.017917245)*x165);
IkReal x222=((0.3786)*x168);
IkReal x223=((0.3786)*x171);
IkReal x224=((0.3786)*x174);
IkReal x225=((0.017917245)*x176);
IkReal x226=((0.017917245)*x178);
IkReal x227=((4.0)*x181);
IkReal x228=((2.0)*x183);
IkReal x229=((4.0)*x184);
IkReal x230=((2.0)*x180);
IkReal x231=((4.0)*x186);
IkReal x232=((2.0)*x188);
IkReal x233=((((-1.0)*x231))+(((-1.0)*x230))+(((-1.0)*x224))+(((-1.0)*x225))+(((-1.0)*x227))+x226+x221+x223+x229+x228+(((-1.0)*x222))+x232);
IkReal x234=((0.020662095)*rxp1_2);
IkReal x235=((0.020662095)*rxp0_2);
IkReal x236=(((gclwh10_5*x86))+(((-1.0)*gclwh6_5*x234))+((gclwh8_5*x235)));
IkReal x237=(gclwh10_12*rxp2_2);
IkReal x238=(gclwh12_14*r21);
IkReal x239=((0.000977833645875)*x238);
IkReal x240=(gclwh12_8*r21);
IkReal x241=(gclwh14_14*r20);
IkReal x242=((0.000977833645875)*x241);
IkReal x243=(gclwh14_8*r20);
IkReal x244=(gclwh4_14*x69);
IkReal x245=(gclwh4_8*r22);
IkReal x246=(gclwh6_12*rxp1_2);
IkReal x247=(gclwh8_12*rxp0_2);
IkReal x248=(gclwh12_14*npy*pz);
IkReal x249=((0.2183)*x248);
IkReal x250=(gclwh12_14*pp*r21);
IkReal x251=((0.10915)*x250);
IkReal x252=(gclwh12_8*npy*pz);
IkReal x253=(gclwh12_8*pp*r21);
IkReal x254=(gclwh14_14*npx*pz);
IkReal x255=((0.2183)*x254);
IkReal x256=(gclwh14_14*pp*r20);
IkReal x257=((0.10915)*x256);
IkReal x258=(gclwh14_8*npx*pz);
IkReal x259=(gclwh14_8*pp*r20);
IkReal x260=(gclwh4_14*x72);
IkReal x261=(gclwh4_14*x73);
IkReal x262=(gclwh4_8*npz*pz);
IkReal x263=(gclwh4_8*pp*r22);
IkReal x264=(gclwh10_11*rxp2_2);
IkReal x265=((0.1893)*x264);
IkReal x266=(gclwh12_11*r21);
IkReal x267=((0.0089586225)*x266);
IkReal x268=(gclwh12_3*r21);
IkReal x269=(gclwh14_11*r20);
IkReal x270=((0.0089586225)*x269);
IkReal x271=(gclwh14_3*r20);
IkReal x272=(gclwh1_3*r20);
IkReal x273=(gclwh3_3*r21);
IkReal x274=(gclwh4_11*r22);
IkReal x275=((0.0089586225)*x274);
IkReal x276=(gclwh4_3*r22);
IkReal x277=(gclwh6_11*rxp1_2);
IkReal x278=((0.1893)*x277);
IkReal x279=(gclwh8_11*rxp0_2);
IkReal x280=((0.1893)*x279);
IkReal x281=(pp*x269);
IkReal x282=(gclwh12_11*npy*pz);
IkReal x283=((2.0)*x282);
IkReal x284=(pp*x266);
IkReal x285=(gclwh12_3*npy*pz);
IkReal x286=(gclwh12_3*pp*r21);
IkReal x287=(gclwh14_11*npx*pz);
IkReal x288=((2.0)*x287);
IkReal x289=(gclwh14_3*npx*pz);
IkReal x290=(gclwh14_3*pp*r20);
IkReal x291=(gclwh1_3*npx*pz);
IkReal x292=(gclwh1_3*pp*r20);
IkReal x293=(gclwh3_3*npy*pz);
IkReal x294=(gclwh3_3*pp*r21);
IkReal x295=(gclwh4_11*npz*pz);
IkReal x296=((2.0)*x295);
IkReal x297=(pp*x274);
IkReal x298=(gclwh4_3*npz*pz);
IkReal x299=(gclwh4_3*pp*r22);
IkReal x300=(gclwh10_2*rxp2_2);
IkReal x301=(gclwh12_2*r21);
IkReal x302=(gclwh14_2*pz);
IkReal x303=(gclwh1_2*pz);
IkReal x304=(gclwh3_2*r21);
IkReal x305=(gclwh4_2*r22);
IkReal x306=((0.1893)*npz*pz);
IkReal x307=(gclwh6_2*rxp1_2);
IkReal x308=(gclwh8_2*rxp0_2);
IkReal x309=pp*pp;
IkReal x310=((2.0)*pp);
IkReal x311=((1.0)*pp*r20);
IkReal x312=((1.0)*x309);
IkReal x313=((((-1.0)*x303*x311))+((x268*x309))+x123+(((-1.0)*gclwh4_8*x306))+((x289*x310))+((x273*x309))+(((-1.0)*x133*x305))+(((-1.0)*x291*x310))+(((-0.000847933619625)*x243))+(((-1.0)*x121*x305))+(((-1.0)*x121*x301))+(((-1.0)*gclwh14_2*x137))+(((-0.09465)*x259))+(((-1.0)*x298*x310))+((gclwh3_2*x136))+(((-1.0)*x123*x300))+(((0.09465)*x263))+(((-1.0)*x133*x304))+((x129*x303))+(((-1.0)*x293*x310))+(((0.000847933619625)*x245))+((gclwh4_2*x135))+(((0.000847933619625)*x240))+((gclwh14_8*npx*x123))+(((-1.0)*x285*x310))+(((0.09465)*x253))+((x276*x309))+((gclwh1_2*x137))+((x121*x304))+(((-1.0)*gclwh12_8*npy*x123))+((gclwh12_2*x136))+(((-1.0)*x271*x312))+(((-1.0)*x123*x308))+((x132*x302))+(((-1.0)*x133*x301))+((x272*x309))+((x123*x307))+((x129*x302)));
IkReal x314=((((-0.3786)*x279))+(((2.0)*x281))+(((-2.0)*x297))+(((-0.017917245)*x274))+(((-2.0)*x284))+(((-0.3786)*x264))+(((4.0)*x295))+(((0.3786)*x277))+(((0.017917245)*x269))+(((-4.0)*x287))+(((4.0)*x282))+(((-0.017917245)*x266)));
IkReal x315=((0.00195566729175)*r22);
IkReal x316=((0.4366)*npz*pz);
IkReal x317=((0.2183)*pp*r22);
IkReal x318=((((-0.2183)*x250))+(((-1.0)*gclwh4_14*x317))+((gclwh4_14*x316))+(((-0.00195566729175)*x238))+(((-0.4366)*x254))+(((-1.0)*gclwh4_14*x315))+(((0.00195566729175)*x241))+(((0.4366)*x248))+(((0.2183)*x256)));
IkReal x319=(gclwh12_2*npy*pz);
IkReal x320=(gclwh4_2*npz*pz);
IkReal x321=(gclwh0_1*r20);
IkReal x322=(gclwh11_10*rxp2_2);
IkReal x323=((0.1893)*x322);
IkReal x324=(gclwh13_1*r21);
IkReal x325=(gclwh13_10*r21);
IkReal x326=((0.0089586225)*x325);
IkReal x327=(gclwh15_1*r20);
IkReal x328=(gclwh15_10*r20);
IkReal x329=((0.0089586225)*x328);
IkReal x330=(gclwh2_1*r21);
IkReal x331=(gclwh5_1*r22);
IkReal x332=(gclwh5_10*r22);
IkReal x333=((0.0089586225)*x332);
IkReal x334=(gclwh7_10*rxp1_2);
IkReal x335=((0.1893)*x334);
IkReal x336=(gclwh9_10*rxp0_2);
IkReal x337=((0.1893)*x336);
IkReal x338=(pp*x328);
IkReal x339=(gclwh0_1*npx*pz);
IkReal x340=(gclwh0_1*pp*r20);
IkReal x341=(gclwh13_1*npy*pz);
IkReal x342=(gclwh13_1*pp*r21);
IkReal x343=(gclwh13_10*npy*pz);
IkReal x344=((2.0)*x343);
IkReal x345=(pp*x325);
IkReal x346=(gclwh15_1*npx*pz);
IkReal x347=(gclwh15_1*pp*r20);
IkReal x348=(gclwh15_10*npx*pz);
IkReal x349=((2.0)*x348);
IkReal x350=(gclwh2_1*npy*pz);
IkReal x351=(gclwh2_1*pp*r21);
IkReal x352=(gclwh5_1*npz*pz);
IkReal x353=(gclwh5_1*pp*r22);
IkReal x354=(gclwh5_10*npz*pz);
IkReal x355=((2.0)*x354);
IkReal x356=(pp*x332);
IkReal x357=(gclwh13_9*r21);
IkReal x358=(gclwh15_9*r20);
IkReal x359=(gclwh5_9*r22);
IkReal x360=(gclwh0_0*pz);
IkReal x361=(gclwh13_0*r21);
IkReal x362=(gclwh13_9*pp*r21);
IkReal x363=(gclwh15_0*pz);
IkReal x364=(gclwh15_9*pp*r20);
IkReal x365=(gclwh2_0*r21);
IkReal x366=(gclwh5_0*r22);
IkReal x367=(gclwh5_9*pp*r22);
IkReal x368=(gclwh7_0*rxp1_2);
IkReal x369=(gclwh9_0*rxp0_2);
IkReal x370=(pp*pz);
IkReal x371=((((-1.0)*x133*x365))+((x310*x341))+((gclwh5_9*x306))+x123+((x309*x330))+(((-1.0)*x311*x360))+((gclwh0_0*x137))+((gclwh13_9*npy*x123))+(((-1.0)*x312*x324))+((x309*x327))+((gclwh2_0*x136))+((x121*x361))+(((-1.0)*x310*x346))+(((-0.000847933619625)*x359))+((x310*x352))+(((0.000847933619625)*x358))+(((-1.0)*x311*x363))+((gclwh11_0*rxp2_2*x123))+((x129*x360))+(((-1.0)*x129*x363))+(((-1.0)*gclwh5_0*x135))+(((-0.000847933619625)*x357))+((x123*x369))+(((-1.0)*x310*x350))+(((-1.0)*gclwh15_9*npx*x123))+((x361*x370))+((x309*x321))+((x366*x370))+(((-1.0)*gclwh13_0*x136))+((gclwh15_0*x137))+(((-1.0)*x312*x331))+((x121*x365))+((x121*x366))+(((-1.0)*x123*x368))+(((-0.09465)*x362))+(((0.09465)*x364))+(((-0.09465)*x367))+(((-1.0)*x310*x339)));
IkReal x372=(((gclwh7_7*x234))+(((-1.0)*gclwh11_7*x86))+(((-1.0)*gclwh9_7*x235)));
IkReal x373=(gclwh11_13*rxp2_2);
IkReal x374=(gclwh13_15*r21);
IkReal x375=((0.000977833645875)*x374);
IkReal x376=(gclwh15_15*r20);
IkReal x377=((0.000977833645875)*x376);
IkReal x378=(gclwh5_15*x69);
IkReal x379=(gclwh7_13*rxp1_2);
IkReal x380=(gclwh9_13*rxp0_2);
IkReal x381=(gclwh13_15*npy*pz);
IkReal x382=((0.2183)*x381);
IkReal x383=(gclwh13_15*pp*r21);
IkReal x384=((0.10915)*x383);
IkReal x385=(gclwh13_9*npy*pz);
IkReal x386=(gclwh15_15*npx*pz);
IkReal x387=((0.2183)*x386);
IkReal x388=(gclwh15_15*pp*r20);
IkReal x389=((0.10915)*x388);
IkReal x390=(gclwh15_9*npx*pz);
IkReal x391=(gclwh5_15*x72);
IkReal x392=(gclwh5_15*x73);
IkReal x393=(gclwh5_9*npz*pz);
IkReal x394=((0.01464286847625)*r21);
IkReal x395=((0.01464286847625)*r20);
IkReal x396=((3.269)*npy*pz);
IkReal x397=((1.6345)*pp);
IkReal x398=((3.269)*npx);
IkReal x399=((1.6345)*pp*r20);
IkReal x400=((0.00058678977375)*r21);
IkReal x401=((0.00058678977375)*r20);
IkReal x402=((0.131)*npy*pz);
IkReal x403=((0.0655)*pp);
IkReal x404=((0.131)*npx);
IkReal x405=((0.0655)*pp*r20);
op[0]=((((-0.007321434238125)*x79))+(((0.81725)*x94))+(((-1.6345)*x93))+(((-0.81725)*x92))+(((0.154705425)*x85))+(((-0.007321434238125)*x90))+(((0.007321434238125)*x89))+(((1.6345)*x95))+x81+x87+(((1.6345)*x91))+(((-1.0)*x84))+(((-0.154705425)*x88))+x78+(((-0.81725)*x96))+(((-0.154705425)*x82)));
op[1]=(x138+x103+(((-0.12699240901125)*x107))+(((-1.0)*x109))+x98+(((0.12699240901125)*x104))+(((-1.0)*x106))+(((-1.0)*x115))+(((-1.0)*x118))+(((-1.0)*x120))+(((-1.0)*x100))+(((-0.12699240901125)*x101))+x113+x112+x117+x111);
op[2]=((-0.17125635)+x151);
op[3]=(x156+(((-1.569)*x160))+(((0.14850585)*x126))+(((-0.160905)*x85))+(((-1.0)*x130*x163))+(((-1.0)*x128*x161))+(((0.160905)*x82))+(((0.00702803935125)*x122))+(((0.160905)*x88))+((gclwh8_2*x164))+((gclwh6_2*x162))+(((-1.0)*gclwh6_2*x158))+((x122*x161))+((gclwh8_2*x159))+(((-0.14850585)*x124))+(((-1.0)*gclwh4_2*x157)));
op[4]=((((0.000293394886875)*x89))+(((0.006199575)*x88))+(((0.03275)*x94))+(((-1.0)*x81))+(((-0.0655)*x93))+(((-0.000293394886875)*x79))+(((-0.000293394886875)*x90))+x84+(((0.0655)*x91))+(((-0.03275)*x92))+(((-1.0)*x87))+(((0.0655)*x95))+(((-0.006199575)*x85))+(((-0.03275)*x96))+x78+(((0.006199575)*x82)));
op[5]=(x138+(((-0.00076243651125)*x101))+x106+x100+x109+(((0.00076243651125)*x104))+x120+(((-1.0)*x98))+(((-1.0)*x111))+(((-1.0)*x117))+(((-1.0)*x103))+(((-1.0)*x113))+(((-1.0)*x112))+(((-0.00076243651125)*x107))+x115+x118);
op[6]=((((-0.12699240901125)*x173))+(((-1.0)*x188))+(((-1.0)*x179))+(((-1.0)*x172))+(((-1.0)*x185))+(((0.12699240901125)*x170))+x177+x175+x169+x199+x182+x187+x180+(((-1.0)*x166))+(((-0.12699240901125)*x167))+(((-1.0)*x183)));
op[7]=((((-1.0)*x205))+(((-1.6345)*x211))+(((-0.154705425)*x191))+(((0.154705425)*x190))+(((-0.007321434238125)*x208))+(((0.007321434238125)*x207))+(((-0.007321434238125)*x201))+(((-0.154705425)*x189))+x203+x206+x200+(((-0.81725)*x210))+(((1.6345)*x209))+(((-0.81725)*x214))+(((1.6345)*x213))+(((0.81725)*x212)));
op[8]=((((-1.0)*x163*x197))+(((-1.0)*gclwh5_0*x157))+(((-0.160905)*x191))+(((0.00702803935125)*x192))+(((-1.0)*gclwh7_0*x158))+(((-0.14850585)*x193))+((gclwh7_0*x162))+((x161*x192))+((gclwh9_0*x159))+(((0.14850585)*x194))+((gclwh9_0*x164))+x219+(((-0.160905)*x189))+(((-1.0)*x161*x196))+(((0.160905)*x190))+(((-1.569)*x220)));
op[9]=((-0.17125635)+x233);
op[10]=((((0.00076243651125)*x170))+(((-1.0)*x175))+(((-0.00076243651125)*x167))+(((-0.00076243651125)*x173))+(((-1.0)*x180))+(((-1.0)*x177))+x172+x179+(((-1.0)*x169))+x166+(((-1.0)*x187))+x199+(((-1.0)*x182))+x188+x183+x185);
op[11]=((((0.006199575)*x189))+(((0.0655)*x209))+(((-0.000293394886875)*x201))+(((0.000293394886875)*x207))+(((-1.0)*x206))+(((0.006199575)*x191))+(((-0.006199575)*x190))+(((0.03275)*x212))+(((0.0655)*x213))+(((-0.0655)*x211))+(((-0.03275)*x210))+x205+x200+(((-1.0)*x203))+(((-0.03275)*x214))+(((-0.000293394886875)*x208)));
op[12]=((((-0.81725)*x263))+x261+(((-0.81725)*x253))+(((-1.0)*x260))+(((-1.6345)*x258))+(((0.81725)*x259))+x244+(((-1.0)*x242))+(((0.154705425)*x237))+x255+x251+(((-1.0)*x249))+(((-0.007321434238125)*x245))+(((1.6345)*x252))+(((0.007321434238125)*x243))+(((-0.154705425)*x246))+(((-1.0)*x257))+(((-0.007321434238125)*x240))+(((1.6345)*x262))+x236+x239+(((0.154705425)*x247)));
op[13]=((-0.679811285)+(((-0.00600991575645741)*x268))+(((0.00600991575645741)*x273))+x296+(((-0.66189404)*x299))+(((1.341705325)*x285))+(((-0.679811285)*x294))+(((-1.0)*x275))+(((-0.679811285)*x292))+(((0.00600991575645741)*x272))+(((1.341705325)*x293))+(((-1.0)*x280))+(((1.341705325)*x298))+x278+x270+(((-1.0)*x297))+x313+(((-1.0)*x265))+(((1.341705325)*x291))+(((-0.00600991575645741)*x276))+(((0.66189404)*x290))+(((-1.341705325)*x289))+(((-1.0)*x288))+x281+x283+(((-0.66189404)*x286))+(((-1.0)*x267))+(((0.00600991575645741)*x271))+(((-1.0)*x284)));
op[14]=((-0.07735732)+x314);
op[15]=((((-0.14850585)*x308))+(((-1.0)*x163*x302))+(((-0.00702803935125)*x301))+(((-0.00702803935125)*x305))+(((-1.7)*x262))+((gclwh1_2*x159))+(((0.85)*x253))+(((-1.7)*x252))+((x163*x303))+(((0.85)*x263))+(((0.007614829125)*x240))+(((-1.0)*x161*x304))+(((1.569)*x320))+(((0.007614829125)*x245))+(((0.14850585)*x307))+(((-0.14850585)*x300))+(((-0.007614829125)*x243))+(((-1.0)*x161*x305))+x318+((gclwh3_2*x162))+(((-1.0)*gclwh1_2*x164))+((gclwh14_2*x159))+((gclwh14_2*x164))+(((-0.85)*x259))+((gclwh3_2*x158))+(((1.7)*x258))+(((-1.0)*x161*x301))+(((1.569)*x319)));
op[16]=((((-1.0)*x261))+(((0.006199575)*x237))+(((0.000293394886875)*x240))+x260+(((-0.03275)*x259))+(((-0.006199575)*x246))+(((-1.0)*x255))+(((-0.0655)*x252))+(((0.006199575)*x247))+x249+x242+(((-0.0655)*x262))+(((-1.0)*x251))+(((0.0655)*x258))+x257+(((-0.000293394886875)*x243))+(((-1.0)*x239))+(((0.03275)*x263))+(((0.03275)*x253))+(((-1.0)*x244))+x236+(((0.000293394886875)*x245)));
op[17]=((0.012986285)+(((-1.0)*x283))+(((-3.60823078949063e-5)*x268))+(((-0.012986285)*x292))+x297+(((0.00493096)*x286))+(((-0.012986285)*x294))+x265+x267+(((3.60823078949063e-5)*x271))+(((0.008055325)*x293))+(((-0.00493096)*x290))+(((3.60823078949063e-5)*x273))+(((-1.0)*x281))+x275+(((-0.008055325)*x289))+(((-1.0)*x270))+x313+(((3.60823078949063e-5)*x272))+(((0.008055325)*x285))+(((0.008055325)*x298))+x288+x284+x280+(((0.008055325)*x291))+(((-3.60823078949063e-5)*x276))+(((-1.0)*x296))+(((0.00493096)*x299))+(((-1.0)*x278)));
op[18]=((0.679811285)+(((-1.0)*x323))+(((-1.0)*x349))+(((1.341705325)*x339))+(((1.341705325)*x346))+(((-1.0)*x337))+(((-1.0)*x326))+(((1.341705325)*x350))+(((-0.00600991575645741)*x327))+(((0.66189404)*x342))+(((-1.0)*x356))+(((0.00600991575645741)*x321))+(((-1.0)*x333))+x355+(((-1.0)*x345))+x335+x338+x329+(((-0.679811285)*x351))+(((0.66189404)*x353))+(((0.00600991575645741)*x324))+(((-0.66189404)*x347))+(((0.00600991575645741)*x331))+x344+(((0.00600991575645741)*x330))+x371+(((-1.341705325)*x341))+(((-1.341705325)*x352))+(((-0.679811285)*x340)));
op[19]=(x391+(((-1.0)*x384))+(((-1.0)*x392))+(((-1.6345)*x393))+(((-1.6345)*x385))+(((0.81725)*x367))+(((-1.0)*x375))+x389+x382+(((0.007321434238125)*x359))+(((0.007321434238125)*x357))+(((-0.007321434238125)*x358))+(((-0.81725)*x364))+(((-1.0)*x387))+(((-1.0)*x378))+(((0.81725)*x362))+(((-0.154705425)*x380))+x372+x377+(((0.154705425)*x379))+(((1.6345)*x390))+(((-0.154705425)*x373)));
op[20]=((((0.14850585)*x369))+((gclwh13_0*x158))+((x163*x360))+(((1.7)*x390))+(((-0.2183)*x383))+(((-0.007614829125)*x358))+(((-1.0)*gclwh15_0*x159))+((gclwh11_0*x157))+(((0.4366)*x381))+(((-0.4366)*x386))+(((0.85)*x367))+(((-1.0)*gclwh5_15*x315))+(((0.2183)*x388))+((x163*x363))+(((0.85)*x362))+(((-0.00195566729175)*x374))+((gclwh2_0*x162))+(((-1.0)*gclwh15_0*x164))+(((-0.85)*x364))+(((0.00195566729175)*x376))+(((0.00702803935125)*x366))+(((0.007614829125)*x357))+(((-1.7)*x393))+(((-1.0)*gclwh13_0*x162))+((gclwh0_0*x159))+(((-1.0)*gclwh0_0*x164))+(((0.007614829125)*x359))+((gclwh2_0*x158))+(((-1.7)*x385))+((x161*x361))+((x161*x366))+(((-0.14850585)*x368))+((gclwh5_15*x316))+(((-1.0)*x161*x365))+(((-1.0)*gclwh5_15*x317))+(((-1.569)*gclwh5_0*npz*pz)));
op[21]=((-0.07735732)+(((-2.0)*x338))+(((0.3786)*x336))+(((2.0)*x345))+(((-0.3786)*x334))+(((2.0)*x356))+(((0.017917245)*x332))+(((0.3786)*x322))+(((0.017917245)*x325))+(((-0.017917245)*x328))+(((-4.0)*x343))+(((4.0)*x348))+(((-4.0)*x354)));
op[22]=((-0.012986285)+(((-1.0)*x329))+(((-1.0)*x338))+(((3.60823078949063e-5)*x321))+(((-0.012986285)*x340))+(((-1.0)*x335))+(((3.60823078949063e-5)*x330))+(((-1.0)*x355))+(((3.60823078949063e-5)*x331))+x356+(((-0.012986285)*x351))+x337+x333+(((3.60823078949063e-5)*x324))+x326+x323+(((-0.008055325)*x341))+(((-3.60823078949063e-5)*x327))+(((-0.008055325)*x352))+(((0.008055325)*x339))+(((0.00493096)*x347))+(((0.008055325)*x350))+x345+x349+(((-1.0)*x344))+x371+(((-0.00493096)*x342))+(((-0.00493096)*x353))+(((0.008055325)*x346)));
op[23]=(x392+(((-0.006199575)*x373))+(((-0.006199575)*x380))+(((0.000293394886875)*x358))+(((-1.0)*x382))+(((-0.03275)*x367))+(((0.0655)*x393))+x387+x384+(((0.0655)*x385))+(((-0.0655)*x390))+(((-1.0)*x377))+(((0.03275)*x364))+(((-0.000293394886875)*x359))+(((-1.0)*x391))+x372+x378+x375+(((-0.000293394886875)*x357))+(((-1.0)*x389))+(((-0.03275)*x362))+(((0.006199575)*x379)));
op[24]=((-0.35681135)+x151);
op[25]=(((gclwh8_2*x399))+(((-0.30941085)*x124))+(((0.01464286847625)*x122))+x156+(((0.30941085)*x126))+(((-1.0)*x130*x398))+(((-1.0)*x128*x397))+(((-0.30941085)*x127))+(((1.6345)*x131))+((gclwh6_2*x396))+((gclwh8_2*x395))+(((-3.269)*x160))+(((-1.0)*gclwh6_2*x394)));
op[26]=((((0.0140560787025)*x90))+(((-0.0140560787025)*x89))+(((-0.08264838)*x80))+(((-1.569)*x94))+(((0.08264838)*x83))+(((3.138)*x93))+(((-3.138)*x91))+(((0.0140560787025)*x79))+(((-3.138)*x95))+(((-0.08264838)*x154))+(((1.569)*x96))+(((1.569)*x92)));
op[27]=((((8.0)*x114))+(((0.7572)*x99))+(((4.0)*x118))+(((-4.0)*x113))+(((8.0)*x119))+(((-0.03583449)*x110))+(((-4.0)*x112))+(((-0.7572)*x102))+(((0.03583449)*x108))+(((-8.0)*x116))+(((0.7572)*x105))+(((-0.03583449)*x97)));
op[28]=((-0.01429865)+(((-1.0)*x139))+(((-1.0)*x150))+x149+x148+x142+x140+x145+x143+(((-1.0)*x141))+(((-1.0)*x146))+(((-1.0)*x147))+(((-1.0)*x144)));
op[29]=((((0.00058678977375)*x122))+(((0.01239915)*x126))+((gclwh8_2*x405))+x155+x152+(((0.0655)*x131))+((gclwh8_2*x401))+(((-1.0)*x128*x403))+(((-0.01239915)*x127))+(((-1.0)*x153))+(((-1.0)*gclwh6_2*x400))+(((-1.0)*x130*x404))+(((-0.131)*x160))+(((-0.01239915)*x124))+((gclwh6_2*x402)));
op[30]=((((-1.0)*x196*x397))+(((0.30941085)*x194))+(((0.01464286847625)*x192))+(((-0.30941085)*x193))+(((-1.0)*x197*x398))+(((1.6345)*x198))+x219+((gclwh9_0*x399))+((gclwh7_0*x396))+((gclwh9_0*x395))+(((-0.30941085)*x195))+(((-1.0)*gclwh7_0*x394))+(((-3.269)*x220)));
op[31]=((-0.35681135)+x233);
op[32]=((((-0.03583449)*x176))+(((4.0)*x188))+(((4.0)*x183))+(((-4.0)*x180))+(((0.03583449)*x178))+(((-0.7572)*x168))+(((-8.0)*x181))+(((-8.0)*x186))+(((0.7572)*x171))+(((-0.7572)*x174))+(((0.03583449)*x165))+(((8.0)*x184)));
op[33]=((((-3.138)*x209))+(((-0.0140560787025)*x207))+(((0.0140560787025)*x201))+(((-1.569)*x212))+(((0.08264838)*x204))+(((0.0140560787025)*x208))+(((-3.138)*x213))+(((1.569)*x214))+(((-0.08264838)*x217))+(((3.138)*x211))+(((1.569)*x210))+(((-0.08264838)*x202)));
op[34]=((((-1.0)*x196*x403))+(((-0.131)*x220))+(((-1.0)*x215))+(((-0.01239915)*x193))+(((0.0655)*x198))+(((-1.0)*x218))+((gclwh9_0*x405))+(((-1.0)*x197*x404))+(((-0.01239915)*x195))+(((0.01239915)*x194))+(((-1.0)*gclwh7_0*x400))+x216+((gclwh9_0*x401))+((gclwh7_0*x402))+(((0.00058678977375)*x192)));
op[35]=((-0.01429865)+(((-1.0)*x232))+(((-1.0)*x221))+(((-1.0)*x223))+(((-1.0)*x228))+(((-1.0)*x226))+(((-1.0)*x229))+x227+x225+x224+x222+x230+x231);
op[36]=((1.31196768)+x314);
op[37]=(((gclwh14_2*x395))+((gclwh1_2*x395))+(((-1.0)*x305*x397))+(((-1.0)*x301*x397))+((x303*x398))+(((-0.30941085)*x300))+((gclwh3_2*x396))+(((3.269)*x320))+(((-1.0)*x304*x397))+(((-1.0)*x302*x398))+x318+(((3.269)*x319))+(((-0.01464286847625)*x301))+((gclwh14_2*x399))+((gclwh3_2*x394))+(((0.30941085)*x307))+(((-0.01464286847625)*x305))+(((-1.0)*gclwh1_2*x399))+(((-0.30941085)*x308)));
IkReal x406=(gclwh10_12*rxp2_2);
IkReal x407=(gclwh12_14*r21);
IkReal x408=(gclwh14_14*r20);
IkReal x409=(gclwh4_14*r22);
IkReal x410=(gclwh6_12*rxp1_2);
IkReal x411=(gclwh8_12*rxp0_2);
IkReal x412=(gclwh12_14*npy*pz);
IkReal x413=(gclwh12_14*pp*r21);
IkReal x414=(gclwh14_14*npx*pz);
IkReal x415=(gclwh14_14*pp*r20);
IkReal x416=(gclwh4_14*npz*pz);
IkReal x417=(gclwh4_14*pp*r22);
IkReal x418=(gclwh10_11*rxp2_2);
IkReal x419=(gclwh12_11*r21);
IkReal x420=(gclwh14_11*r20);
IkReal x421=(gclwh4_11*r22);
IkReal x422=(gclwh6_11*rxp1_2);
IkReal x423=(gclwh8_11*rxp0_2);
IkReal x424=(gclwh12_11*npy*pz);
IkReal x425=(pp*x419);
IkReal x426=(gclwh14_11*npx*pz);
IkReal x427=(pp*x420);
IkReal x428=(gclwh4_11*npz*pz);
IkReal x429=(pp*x421);
IkReal x430=((((4.0)*x426))+(((-0.3786)*x422))+(((0.017917245)*x419))+(((-4.0)*x428))+(((2.0)*x429))+(((0.3786)*x418))+(((0.3786)*x423))+(((-2.0)*x427))+(((-4.0)*x424))+(((2.0)*x425))+(((-0.017917245)*x420))+(((0.017917245)*x421)));
IkReal x431=((((-0.2183)*x415))+(((-0.00195566729175)*x408))+(((0.00195566729175)*x407))+(((-0.4366)*x412))+(((0.4366)*x414))+(((0.2183)*x413))+(((0.00195566729175)*x409))+(((-0.4366)*x416))+(((0.2183)*x417)));
IkReal x432=(gclwh10_2*rxp2_2);
IkReal x433=(gclwh12_2*r21);
IkReal x434=(gclwh14_2*r20);
IkReal x435=(gclwh1_2*r20);
IkReal x436=(gclwh3_2*r21);
IkReal x437=((0.00058678977375)*r22);
IkReal x438=((0.01239915)*rxp1_2);
IkReal x439=((0.01239915)*rxp0_2);
IkReal x440=(gclwh12_2*npy*pz);
IkReal x441=((0.0655)*pp);
IkReal x442=(gclwh14_2*npx*pz);
IkReal x443=(gclwh1_2*npx*pz);
IkReal x444=(gclwh3_2*npy*pz);
IkReal x445=((0.131)*npz*pz);
IkReal x446=(gclwh4_2*r22);
IkReal x447=(gclwh0_0*r20);
IkReal x448=(gclwh11_0*rxp2_2);
IkReal x449=(gclwh13_0*r21);
IkReal x450=(gclwh13_15*r21);
IkReal x451=((0.00195566729175)*x450);
IkReal x452=(gclwh15_0*r20);
IkReal x453=(gclwh15_15*r20);
IkReal x454=((0.00195566729175)*x453);
IkReal x455=(gclwh2_0*r21);
IkReal x456=(gclwh5_0*r22);
IkReal x457=(gclwh5_15*r22);
IkReal x458=((0.00195566729175)*x457);
IkReal x459=(gclwh7_0*rxp1_2);
IkReal x460=(gclwh9_0*rxp0_2);
IkReal x461=(gclwh0_0*npx*pz);
IkReal x462=(gclwh0_0*pp*r20);
IkReal x463=(gclwh13_0*npy*pz);
IkReal x464=((1.6345)*pp);
IkReal x465=(gclwh13_15*npy*pz);
IkReal x466=((0.4366)*x465);
IkReal x467=(gclwh13_15*pp*r21);
IkReal x468=((0.2183)*x467);
IkReal x469=(gclwh15_0*npx*pz);
IkReal x470=(gclwh15_15*npx*pz);
IkReal x471=((0.4366)*x470);
IkReal x472=(gclwh15_15*pp*r20);
IkReal x473=((0.2183)*x472);
IkReal x474=(gclwh2_0*npy*pz);
IkReal x475=(gclwh5_15*npz*pz);
IkReal x476=((0.4366)*x475);
IkReal x477=(gclwh5_15*pp*r22);
IkReal x478=((0.2183)*x477);
IkReal x479=(gclwh11_10*rxp2_2);
IkReal x480=((0.3786)*x479);
IkReal x481=(gclwh13_10*r21);
IkReal x482=((0.017917245)*x481);
IkReal x483=(gclwh15_10*r20);
IkReal x484=((0.017917245)*x483);
IkReal x485=(gclwh5_10*r22);
IkReal x486=((0.017917245)*x485);
IkReal x487=(gclwh7_10*rxp1_2);
IkReal x488=((0.3786)*x487);
IkReal x489=(gclwh9_10*rxp0_2);
IkReal x490=((0.3786)*x489);
IkReal x491=(gclwh13_10*npy*pz);
IkReal x492=((4.0)*x491);
IkReal x493=(pp*x481);
IkReal x494=((2.0)*x493);
IkReal x495=(gclwh15_10*npx*pz);
IkReal x496=((4.0)*x495);
IkReal x497=(pp*x483);
IkReal x498=((2.0)*x497);
IkReal x499=(gclwh5_10*npz*pz);
IkReal x500=((4.0)*x499);
IkReal x501=(pp*x485);
IkReal x502=((2.0)*x501);
IkReal x503=(gclwh11_13*rxp2_2);
IkReal x504=(gclwh7_13*rxp1_2);
IkReal x505=(gclwh9_13*rxp0_2);
IkReal x506=(x478+x471+(((-1.0)*x466))+(((-1.0)*x476))+(((-1.0)*x473))+x451+x458+(((-1.0)*x454))+x468);
IkReal x507=((((-1.0)*x494))+(((-1.0)*x486))+x500+(((-1.0)*x502))+(((-1.0)*x480))+(((-1.0)*x482))+(((-1.0)*x490))+x488+x484+x498+x492+(((-1.0)*x496)));
IkReal x508=((0.000977833645875)*r22);
IkReal x509=((0.000977833645875)*r21);
IkReal x510=((0.000977833645875)*r20);
IkReal x511=((0.2183)*npz*pz);
IkReal x512=((0.10915)*pp*r22);
IkReal x513=((0.2183)*npy*pz);
IkReal x514=((0.10915)*pp*r21);
IkReal x515=((0.2183)*npx*pz);
IkReal x516=((0.10915)*pp*r20);
IkReal x517=x78;
IkReal x518=(gclwh10_12*r22);
IkReal x519=(gclwh12_14*rxp1_2);
IkReal x520=((0.020662095)*x519);
IkReal x521=(gclwh12_8*rxp1_2);
IkReal x522=(gclwh14_14*rxp0_2);
IkReal x523=((0.020662095)*x522);
IkReal x524=(gclwh14_8*rxp0_2);
IkReal x525=((0.020662095)*rxp2_2);
IkReal x526=(gclwh4_14*x525);
IkReal x527=(gclwh4_8*rxp2_2);
IkReal x528=(gclwh6_12*r21);
IkReal x529=(gclwh8_12*r20);
IkReal x530=(gclwh10_12*npz*pz);
IkReal x531=(gclwh10_12*pp*r22);
IkReal x532=(gclwh6_12*npy*pz);
IkReal x533=(gclwh6_12*pp*r21);
IkReal x534=(gclwh8_12*npx*pz);
IkReal x535=(gclwh8_12*pp*r20);
IkReal x536=(gclwh10_11*r22);
IkReal x537=((0.0089586225)*x536);
IkReal x538=(gclwh12_11*rxp1_2);
IkReal x539=((0.1893)*x538);
IkReal x540=(gclwh12_3*rxp1_2);
IkReal x541=(gclwh14_11*rxp0_2);
IkReal x542=((0.1893)*x541);
IkReal x543=(gclwh14_3*rxp0_2);
IkReal x544=(gclwh4_11*rxp2_2);
IkReal x545=((0.1893)*x544);
IkReal x546=(gclwh4_3*rxp2_2);
IkReal x547=(gclwh6_11*r21);
IkReal x548=((0.0089586225)*x547);
IkReal x549=(gclwh8_11*r20);
IkReal x550=((0.0089586225)*x549);
IkReal x551=(pp*x547);
IkReal x552=(gclwh10_11*npz*pz);
IkReal x553=((2.0)*x552);
IkReal x554=(pp*x536);
IkReal x555=(gclwh6_11*npy*pz);
IkReal x556=((2.0)*x555);
IkReal x557=(gclwh8_11*npx*pz);
IkReal x558=((2.0)*x557);
IkReal x559=(pp*x549);
IkReal x560=((0.0089586225)*pz);
IkReal x561=(gclwh10_2*r22);
IkReal x562=((0.1893)*pz*rxp1_2);
IkReal x563=((0.1893)*pp);
IkReal x564=((0.1893)*pz*rxp0_2);
IkReal x565=((0.1893)*pz*rxp2_2);
IkReal x566=(gclwh6_2*r21);
IkReal x567=(gclwh8_2*r20);
IkReal x568=(pp*pz);
IkReal x569=((1.0)*pp*pz);
IkReal x570=pz*pz;
IkReal x571=((2.0)*npz*x570);
IkReal x572=((2.0)*npy*x570);
IkReal x573=((2.0)*npx*x570);
IkReal x574=((((0.017917245)*x527))+((x567*x568))+(((-1.0)*x560*x566))+((x560*x567))+(((-1.0)*gclwh8_2*x573))+((gclwh6_2*x572))+(((-0.017917245)*x524))+((x560*x561))+((x540*x563))+((x546*x563))+(((-1.0)*gclwh12_2*x562))+(((0.017917245)*x521))+(((-1.0)*gclwh10_2*x571))+(((-1.0)*x566*x569))+((x561*x568))+((gclwh14_2*x564))+(((-1.0)*x543*x563))+(((-1.0)*gclwh4_2*x565)));
IkReal x575=((0.00702803935125)*r22);
IkReal x576=((0.14850585)*rxp1_2);
IkReal x577=((0.14850585)*rxp0_2);
IkReal x578=((0.04132419)*rxp2_2);
IkReal x579=((0.14850585)*rxp2_2);
IkReal x580=((0.00702803935125)*r21);
IkReal x581=((0.00702803935125)*r20);
IkReal x582=((1.569)*npz*pz);
IkReal x583=((0.7845)*pp);
IkReal x584=((1.569)*npy*pz);
IkReal x585=((1.569)*npx*pz);
IkReal x586=(gclwh11_10*r22);
IkReal x587=((0.0089586225)*x586);
IkReal x588=(gclwh13_1*rxp1_2);
IkReal x589=(gclwh13_10*rxp1_2);
IkReal x590=((0.1893)*x589);
IkReal x591=(gclwh15_1*rxp0_2);
IkReal x592=(gclwh15_10*rxp0_2);
IkReal x593=((0.1893)*x592);
IkReal x594=(gclwh5_1*rxp2_2);
IkReal x595=(gclwh5_10*rxp2_2);
IkReal x596=((0.1893)*x595);
IkReal x597=(gclwh7_10*r21);
IkReal x598=((0.0089586225)*x597);
IkReal x599=(gclwh9_10*r20);
IkReal x600=((0.0089586225)*x599);
IkReal x601=(pp*x586);
IkReal x602=(pp*x599);
IkReal x603=(gclwh11_10*npz*pz);
IkReal x604=((2.0)*x603);
IkReal x605=(gclwh7_10*npy*pz);
IkReal x606=((2.0)*x605);
IkReal x607=(pp*x597);
IkReal x608=(gclwh9_10*npx*pz);
IkReal x609=((2.0)*x608);
IkReal x610=(gclwh13_9*rxp1_2);
IkReal x611=(gclwh15_9*rxp0_2);
IkReal x612=(gclwh5_9*rxp2_2);
IkReal x613=(gclwh11_0*r22);
IkReal x614=(gclwh7_0*r21);
IkReal x615=(gclwh9_0*r20);
IkReal x616=(((x560*x613))+(((-1.0)*gclwh9_0*x573))+((x563*x588))+(((-1.0)*gclwh11_0*x571))+((gclwh15_0*x564))+((x568*x615))+(((-0.017917245)*x611))+(((-1.0)*x563*x591))+(((-1.0)*x560*x614))+(((-1.0)*x569*x614))+((gclwh7_0*x572))+(((-1.0)*gclwh5_0*x565))+((x568*x613))+(((-1.0)*gclwh13_0*x562))+((x563*x594))+(((0.017917245)*x612))+((x560*x615))+(((0.017917245)*x610)));
IkReal x617=x200;
IkReal x618=(gclwh11_13*r22);
IkReal x619=(gclwh13_15*rxp1_2);
IkReal x620=((0.020662095)*x619);
IkReal x621=(gclwh15_15*rxp0_2);
IkReal x622=((0.020662095)*x621);
IkReal x623=(gclwh5_15*x525);
IkReal x624=(gclwh7_13*r21);
IkReal x625=(gclwh9_13*r20);
IkReal x626=(gclwh11_13*npz*pz);
IkReal x627=(gclwh11_13*pp*r22);
IkReal x628=(gclwh7_13*npy*pz);
IkReal x629=(gclwh7_13*pp*r21);
IkReal x630=(gclwh9_13*npx*pz);
IkReal x631=(gclwh9_13*pp*r20);
IkReal x632=((0.020662095)*rxp1_2);
IkReal x633=((0.020662095)*rxp0_2);
IkReal x634=x236;
IkReal x635=((0.000977833645875)*x407);
IkReal x636=(gclwh12_8*r21);
IkReal x637=((0.000977833645875)*x408);
IkReal x638=(gclwh14_8*r20);
IkReal x639=(gclwh4_14*x508);
IkReal x640=(gclwh4_8*r22);
IkReal x641=((0.2183)*x412);
IkReal x642=((0.10915)*x413);
IkReal x643=(gclwh12_8*npy*pz);
IkReal x644=(gclwh12_8*pp*r21);
IkReal x645=((0.2183)*x414);
IkReal x646=((0.10915)*x415);
IkReal x647=(gclwh14_8*npx*pz);
IkReal x648=(gclwh14_8*pp*r20);
IkReal x649=(gclwh4_14*x511);
IkReal x650=((0.10915)*x417);
IkReal x651=(gclwh4_8*npz*pz);
IkReal x652=(gclwh4_8*pp*r22);
IkReal x653=((0.1893)*x418);
IkReal x654=((0.0089586225)*x419);
IkReal x655=(gclwh12_3*r21);
IkReal x656=((0.0089586225)*x420);
IkReal x657=(gclwh14_3*r20);
IkReal x658=(gclwh1_3*r20);
IkReal x659=(gclwh3_3*r21);
IkReal x660=((0.0089586225)*x421);
IkReal x661=(gclwh4_3*r22);
IkReal x662=((0.1893)*x422);
IkReal x663=((0.1893)*x423);
IkReal x664=((2.0)*x424);
IkReal x665=(gclwh12_3*npy*pz);
IkReal x666=(gclwh12_3*pp*r21);
IkReal x667=((2.0)*x426);
IkReal x668=(gclwh14_3*npx*pz);
IkReal x669=(gclwh14_3*pp*r20);
IkReal x670=(gclwh1_3*npx*pz);
IkReal x671=(gclwh1_3*pp*r20);
IkReal x672=(gclwh3_3*npy*pz);
IkReal x673=(gclwh3_3*pp*r21);
IkReal x674=((2.0)*x428);
IkReal x675=(gclwh4_3*npz*pz);
IkReal x676=(gclwh4_3*pp*r22);
IkReal x677=((0.1893)*pz);
IkReal x678=((0.1893)*npz*pz);
IkReal x679=pp*pp;
IkReal x680=((2.0)*pp);
IkReal x681=((1.0)*x679);
IkReal x682=((((-1.0)*x675*x680))+((x661*x679))+((x434*x560))+(((-1.0)*gclwh4_8*x678))+((x655*x679))+((x659*x679))+(((-0.09465)*x648))+(((-1.0)*x446*x569))+(((-1.0)*x435*x569))+(((-1.0)*x665*x680))+((x658*x679))+(((-1.0)*x433*x560))+(((-1.0)*gclwh8_2*x564))+(((-1.0)*x672*x680))+(((0.09465)*x644))+((x435*x560))+(((-1.0)*x436*x569))+(((-1.0)*x657*x681))+((x434*x568))+((gclwh4_2*x571))+((x668*x680))+(((0.09465)*x652))+(((-1.0)*x433*x569))+(((-1.0)*x432*x677))+((gclwh6_2*x562))+((gclwh12_2*x572))+((gclwh14_8*npx*x677))+(((-1.0)*gclwh14_2*x573))+((x436*x560))+(((-1.0)*x446*x560))+(((-1.0)*gclwh12_8*npy*x677))+(((-0.000847933619625)*x638))+(((-1.0)*x670*x680))+x677+(((0.000847933619625)*x640))+((gclwh3_2*x572))+((gclwh1_2*x573))+(((0.000847933619625)*x636)));
IkReal x683=(gclwh0_1*r20);
IkReal x684=((0.1893)*x479);
IkReal x685=(gclwh13_1*r21);
IkReal x686=((0.0089586225)*x481);
IkReal x687=(gclwh15_1*r20);
IkReal x688=((0.0089586225)*x483);
IkReal x689=(gclwh2_1*r21);
IkReal x690=(gclwh5_1*r22);
IkReal x691=((0.0089586225)*x485);
IkReal x692=((0.1893)*x487);
IkReal x693=((0.1893)*x489);
IkReal x694=(gclwh0_1*npx*pz);
IkReal x695=(gclwh0_1*pp*r20);
IkReal x696=(gclwh13_1*npy*pz);
IkReal x697=(gclwh13_1*pp*r21);
IkReal x698=((2.0)*x491);
IkReal x699=(gclwh15_1*npx*pz);
IkReal x700=(gclwh15_1*pp*r20);
IkReal x701=((2.0)*x495);
IkReal x702=(gclwh2_1*npy*pz);
IkReal x703=(gclwh2_1*pp*r21);
IkReal x704=(gclwh5_1*npz*pz);
IkReal x705=(gclwh5_1*pp*r22);
IkReal x706=((2.0)*x499);
IkReal x707=(gclwh13_9*r21);
IkReal x708=(gclwh15_9*r20);
IkReal x709=(gclwh5_9*r22);
IkReal x710=(gclwh13_9*pp*r21);
IkReal x711=(gclwh15_9*pp*r20);
IkReal x712=(gclwh5_9*pp*r22);
IkReal x713=((((-1.0)*x680*x699))+((gclwh2_0*x572))+((x456*x568))+(((-1.0)*x452*x560))+(((-1.0)*x681*x685))+((x449*x560))+(((-0.09465)*x712))+((x680*x696))+(((0.09465)*x711))+(((-0.000847933619625)*x707))+(((-1.0)*x681*x690))+(((-1.0)*x455*x569))+(((-0.000847933619625)*x709))+(((-1.0)*x680*x702))+((x460*x677))+((gclwh0_0*x573))+((x680*x704))+((x449*x568))+(((-1.0)*gclwh15_9*npx*x677))+(((-1.0)*x459*x677))+(((-1.0)*gclwh13_0*x572))+((x448*x677))+((gclwh5_9*x678))+(((-1.0)*pz*x462))+((gclwh13_9*npy*x677))+((gclwh15_0*x573))+(((-1.0)*x452*x569))+(((-1.0)*gclwh5_0*x571))+(((0.000847933619625)*x708))+((x679*x683))+((x447*x560))+((x456*x560))+((x455*x560))+x677+(((-1.0)*x680*x694))+((x679*x689))+((x679*x687))+(((-0.09465)*x710)));
IkReal x714=x372;
IkReal x715=((0.000977833645875)*x450);
IkReal x716=((0.000977833645875)*x453);
IkReal x717=(gclwh5_15*x508);
IkReal x718=((0.2183)*x465);
IkReal x719=((0.10915)*x467);
IkReal x720=(gclwh13_9*npy*pz);
IkReal x721=((0.2183)*x470);
IkReal x722=((0.10915)*x472);
IkReal x723=(gclwh15_9*npx*pz);
IkReal x724=(gclwh5_15*x511);
IkReal x725=((0.10915)*x477);
IkReal x726=(gclwh5_9*npz*pz);
op[38]=((((-0.2970117)*x411))+(((-0.8732)*x414))+(((-0.0039113345835)*x409))+(((0.8732)*x416))+(((-0.4366)*x413))+(((0.0039113345835)*x408))+(((0.8732)*x412))+(((-0.0039113345835)*x407))+(((-0.4366)*x417))+(((0.2970117)*x410))+(((0.4366)*x415))+(((-0.2970117)*x406)));
op[39]=((-0.05940486)+(((-4.0)*x427))+(((-8.0)*x428))+(((4.0)*x425))+(((-0.03583449)*x420))+(((-0.7572)*x422))+(((-8.0)*x424))+(((0.03583449)*x421))+(((0.03583449)*x419))+(((4.0)*x429))+(((0.7572)*x423))+(((0.7572)*x418))+(((8.0)*x426)));
op[40]=((0.02168232)+x430);
op[41]=((((-0.01239915)*x432))+(((-1.0)*x436*x441))+(((-0.00058678977375)*x433))+(((0.00058678977375)*x434))+(((-1.0)*x433*x441))+(((0.00058678977375)*x435))+(((0.131)*x443))+((x434*x441))+(((0.131)*x444))+(((-1.0)*gclwh8_2*x439))+(((-1.0)*gclwh4_2*x437))+(((0.00058678977375)*x436))+(((-1.0)*x435*x441))+(((-0.131)*x442))+x431+((gclwh6_2*x438))+(((0.131)*x440))+(((-1.0)*x441*x446))+((gclwh4_2*x445)));
op[42]=((((-1.0)*x452*x464))+x476+x473+(((-1.0)*x451))+(((3.269)*x474))+(((0.01464286847625)*x456))+(((3.269)*x469))+(((0.30941085)*x448))+(((-1.0)*x468))+(((-1.0)*x478))+(((-1.0)*x455*x464))+(((-3.269)*gclwh5_0*npz*pz))+(((-3.269)*x463))+((x456*x464))+((x449*x464))+(((-1.0)*x458))+x454+(((0.30941085)*x460))+(((-0.30941085)*x459))+(((0.01464286847625)*x455))+(((-1.6345)*x462))+(((-0.01464286847625)*x452))+(((0.01464286847625)*x449))+(((0.01464286847625)*x447))+x466+(((-1.0)*x471))+(((3.269)*x461)));
op[43]=((1.31196768)+(((-1.0)*x500))+x502+(((-1.0)*x498))+(((-1.0)*x488))+(((-1.0)*x492))+x486+x482+x480+(((-1.0)*x484))+x494+x496+x490);
op[44]=((0.05940486)+(((-0.7572)*x487))+(((4.0)*x493))+(((0.03583449)*x481))+(((-8.0)*x491))+(((4.0)*x501))+(((0.7572)*x489))+(((0.7572)*x479))+(((-8.0)*x499))+(((0.03583449)*x485))+(((-0.03583449)*x483))+(((-4.0)*x497))+(((8.0)*x495)));
op[45]=((((-0.0039113345835)*x453))+(((0.2970117)*x505))+(((-0.8732)*x475))+(((0.0039113345835)*x457))+(((0.4366)*x477))+(((-0.2970117)*x504))+(((0.4366)*x467))+(((-0.8732)*x465))+(((0.8732)*x470))+(((0.2970117)*x503))+(((0.0039113345835)*x450))+(((-0.4366)*x472)));
op[46]=((((0.131)*x469))+(((-1.0)*x441*x452))+(((-1.0)*x441*x455))+x506+((gclwh9_0*x439))+(((-1.0)*gclwh7_0*x438))+(((0.00058678977375)*x449))+((gclwh5_0*x437))+(((-0.131)*x463))+(((0.131)*x474))+(((0.00058678977375)*x447))+(((0.00058678977375)*x455))+(((-0.00058678977375)*x452))+((x441*x449))+((x441*x456))+(((0.01239915)*x448))+(((-1.0)*gclwh5_0*x445))+(((-0.0655)*x462))+(((0.131)*x461)));
op[47]=((0.02168232)+x507);
op[48]=((((1.6345)*x532))+(((-0.154705425)*x521))+(((0.81725)*x535))+(((0.007321434238125)*x518))+(((-0.154705425)*x527))+(((0.007321434238125)*x529))+(((-1.6345)*x534))+(((-1.0)*x520))+(((-0.81725)*x533))+(((-1.0)*x526))+(((-0.007321434238125)*x528))+(((0.81725)*x531))+x517+(((-1.6345)*x530))+(((0.154705425)*x524))+x523);
op[49]=(x539+(((-1.0)*x554))+(((-0.12699240901125)*x540))+(((-1.0)*x542))+x574+(((0.12699240901125)*x543))+(((-1.0)*x559))+(((-1.0)*x556))+(((-1.0)*x537))+x558+x551+x553+(((-1.0)*x550))+(((-0.12699240901125)*x546))+x548+x545);
op[50]=((0.17125635)+(((4.0)*x557))+(((0.3786)*x538))+(((-2.0)*x559))+(((0.017917245)*x547))+(((-0.017917245)*x549))+(((-2.0)*x554))+(((2.0)*x551))+(((-0.017917245)*x536))+(((4.0)*x552))+(((-4.0)*x555))+(((-0.3786)*x541))+(((0.3786)*x544)));
op[51]=((((-1.0)*gclwh6_2*x584))+(((-1.0)*gclwh8_2*x581))+((gclwh6_2*x580))+((x566*x583))+(((-1.0)*x567*x583))+(((-0.04132419)*x522))+((gclwh4_14*x578))+(((-1.0)*x561*x583))+((gclwh8_2*x585))+(((0.04132419)*x519))+(((-1.0)*gclwh10_2*x575))+(((0.160905)*x521))+(((-1.0)*gclwh14_2*x577))+((gclwh10_2*x582))+(((-0.160905)*x524))+(((0.160905)*x527))+((gclwh4_2*x579))+((gclwh12_2*x576)));
op[52]=((((0.000293394886875)*x518))+(((0.03275)*x535))+(((-0.03275)*x533))+(((-0.000293394886875)*x528))+(((0.006199575)*x527))+(((0.03275)*x531))+(((-0.0655)*x530))+(((0.0655)*x532))+(((-1.0)*x523))+(((-0.006199575)*x524))+(((-0.0655)*x534))+(((0.000293394886875)*x529))+x517+(((0.006199575)*x521))+x526+x520);
op[53]=(x537+(((-1.0)*x539))+x574+(((-1.0)*x553))+(((-1.0)*x558))+(((-1.0)*x545))+x556+x550+x554+x559+(((-0.00076243651125)*x546))+(((0.00076243651125)*x543))+(((-1.0)*x551))+x542+(((-1.0)*x548))+(((-0.00076243651125)*x540)));
op[54]=(x616+(((-0.12699240901125)*x594))+(((-1.0)*x598))+(((-1.0)*x590))+(((0.12699240901125)*x591))+(((-1.0)*x609))+(((-1.0)*x604))+(((-0.12699240901125)*x588))+x587+x593+x600+x602+x601+x606+(((-1.0)*x596))+(((-1.0)*x607)));
op[55]=(x617+(((1.6345)*x628))+(((0.81725)*x627))+(((-0.007321434238125)*x624))+(((-1.6345)*x630))+(((-0.154705425)*x610))+x622+(((0.154705425)*x611))+(((-1.0)*x623))+(((-1.0)*x620))+(((0.007321434238125)*x618))+(((0.81725)*x631))+(((-0.81725)*x629))+(((-0.154705425)*x612))+(((0.007321434238125)*x625))+(((-1.6345)*x626)));
op[56]=(((x583*x614))+(((-0.160905)*x610))+((gclwh13_0*x576))+(((-1.0)*gclwh9_0*x581))+(((0.04132419)*x621))+(((0.160905)*x611))+(((-1.0)*gclwh5_15*x578))+((gclwh11_0*x582))+(((-1.0)*x583*x613))+(((-1.0)*gclwh11_0*x575))+(((-1.0)*gclwh15_0*x577))+(((-1.0)*x583*x615))+((gclwh7_0*x580))+(((-0.160905)*x612))+((gclwh5_0*x579))+(((-0.04132419)*x619))+(((-1.0)*gclwh7_0*x584))+((gclwh9_0*x585)));
op[57]=((0.17125635)+(((-4.0)*x605))+(((-0.017917245)*x599))+(((-2.0)*x602))+(((0.3786)*x589))+(((-2.0)*x601))+(((0.017917245)*x597))+(((-0.3786)*x592))+(((2.0)*x607))+(((-0.017917245)*x586))+(((0.3786)*x595))+(((4.0)*x608))+(((4.0)*x603)));
op[58]=(x616+(((-1.0)*x602))+(((-1.0)*x601))+(((-1.0)*x606))+(((-1.0)*x587))+(((0.00076243651125)*x591))+(((-1.0)*x600))+(((-1.0)*x593))+(((-0.00076243651125)*x588))+x598+x596+x590+(((-0.00076243651125)*x594))+x609+x607+x604);
op[59]=(x617+(((-1.0)*x622))+(((0.000293394886875)*x625))+(((0.006199575)*x612))+(((-0.000293394886875)*x624))+(((-0.0655)*x626))+(((0.006199575)*x610))+(((-0.03275)*x629))+(((-0.0655)*x630))+(((0.0655)*x628))+x620+x623+(((-0.006199575)*x611))+(((0.000293394886875)*x618))+(((0.03275)*x627))+(((0.03275)*x631)));
op[60]=((((0.007321434238125)*x638))+(((1.6345)*x651))+(((-1.0)*x645))+(((-0.154705425)*x411))+(((-1.0)*x642))+(((-1.6345)*x647))+x637+x634+(((-0.007321434238125)*x636))+(((1.6345)*x643))+(((-0.81725)*x644))+(((-1.0)*x639))+(((-0.154705425)*x406))+(((0.81725)*x648))+(((-1.0)*x650))+(((-0.81725)*x652))+(((0.154705425)*x410))+x649+x641+x646+(((-1.0)*x635))+(((-0.007321434238125)*x640)));
op[61]=((0.679811285)+(((1.341705325)*x675))+(((1.341705325)*x672))+(((0.00600991575645741)*x659))+(((0.00600991575645741)*x658))+(((-0.00600991575645741)*x655))+(((1.341705325)*x670))+x429+x425+(((1.341705325)*x665))+(((-1.0)*x656))+(((-0.679811285)*x671))+(((-1.0)*x427))+x653+x654+(((-1.0)*x662))+(((0.66189404)*x669))+(((-0.00600991575645741)*x661))+(((-1.341705325)*x668))+(((-1.0)*x674))+x667+x663+x660+(((-0.66189404)*x676))+(((-0.679811285)*x673))+x682+(((-1.0)*x664))+(((-0.66189404)*x666))+(((0.00600991575645741)*x657)));
op[62]=((0.07735732)+x430);
op[63]=((((0.14850585)*x432))+(((1.7)*x647))+(((-1.569)*x440))+((x436*x583))+(((-1.0)*x434*x583))+(((-0.00702803935125)*x436))+(((-1.0)*gclwh6_2*x576))+((x433*x583))+(((0.85)*x644))+(((-1.569)*x444))+(((-0.85)*x648))+(((-0.00702803935125)*x435))+(((-1.569)*x443))+(((-1.7)*x643))+(((0.00702803935125)*x433))+(((0.007614829125)*x640))+(((0.007614829125)*x636))+(((-0.007614829125)*x638))+(((0.85)*x652))+(((-0.00702803935125)*x434))+((gclwh4_2*x575))+((x435*x583))+x431+(((-1.7)*x651))+(((-1.0)*gclwh4_2*x582))+((gclwh8_2*x577))+(((1.569)*x442))+((x446*x583)));
op[64]=((((0.03275)*x644))+(((-1.0)*x637))+(((-1.0)*x646))+(((0.0655)*x647))+(((-0.0655)*x651))+(((-1.0)*x641))+(((0.000293394886875)*x640))+(((0.006199575)*x410))+x639+x635+x634+(((0.000293394886875)*x636))+x650+(((-0.0655)*x643))+(((-0.000293394886875)*x638))+(((-0.03275)*x648))+x642+x645+(((-0.006199575)*x411))+(((-0.006199575)*x406))+(((0.03275)*x652))+(((-1.0)*x649)));
op[65]=((-0.012986285)+(((-0.008055325)*x668))+(((-1.0)*x425))+(((-0.012986285)*x671))+(((0.00493096)*x676))+(((3.60823078949063e-5)*x657))+(((3.60823078949063e-5)*x658))+(((3.60823078949063e-5)*x659))+(((0.008055325)*x675))+(((-3.60823078949063e-5)*x661))+(((-1.0)*x667))+x427+(((0.008055325)*x665))+(((-1.0)*x660))+(((0.008055325)*x670))+x656+(((-3.60823078949063e-5)*x655))+(((-1.0)*x663))+(((-1.0)*x429))+(((0.008055325)*x672))+(((0.00493096)*x666))+(((-1.0)*x653))+(((-1.0)*x654))+x664+x662+x674+x682+(((-0.012986285)*x673))+(((-0.00493096)*x669)));
op[66]=((-0.679811285)+(((0.00600991575645741)*x690))+(((1.341705325)*x694))+(((-1.0)*x688))+(((0.66189404)*x705))+(((-0.00600991575645741)*x687))+(((-1.0)*x692))+x501+(((-0.66189404)*x700))+(((1.341705325)*x699))+(((-0.679811285)*x703))+(((0.00600991575645741)*x685))+x701+x713+(((-1.0)*x698))+(((-0.679811285)*x695))+x693+x691+(((0.00600991575645741)*x683))+(((0.66189404)*x697))+(((-1.0)*x706))+(((0.00600991575645741)*x689))+(((-1.341705325)*x704))+x684+x686+(((-1.0)*x497))+(((1.341705325)*x702))+x493+(((-1.341705325)*x696)));
op[67]=((((0.81725)*x712))+(((1.6345)*x723))+(((-1.0)*x724))+(((0.007321434238125)*x707))+(((-0.154705425)*x504))+(((0.007321434238125)*x709))+(((-1.0)*x718))+(((-0.81725)*x711))+(((0.154705425)*x503))+(((-1.6345)*x720))+x714+x717+x715+x719+(((-1.0)*x722))+(((-1.0)*x716))+(((-0.007321434238125)*x708))+(((0.154705425)*x505))+(((-1.6345)*x726))+x725+x721+(((0.81725)*x710)));
op[68]=((((0.007614829125)*x707))+(((-1.0)*gclwh5_0*x575))+(((-0.85)*x711))+((gclwh7_0*x576))+(((-1.569)*x469))+(((0.7845)*x462))+(((-1.0)*x456*x583))+x506+(((-1.7)*x720))+(((-0.007614829125)*x708))+((x455*x583))+(((-1.569)*x461))+(((0.85)*x712))+(((-0.14850585)*x448))+(((0.85)*x710))+(((-1.569)*x474))+(((1.7)*x723))+(((-1.0)*x449*x583))+(((-0.00702803935125)*x449))+(((-0.00702803935125)*x455))+((gclwh5_0*x582))+(((1.569)*x463))+((x452*x583))+(((0.00702803935125)*x452))+(((-0.00702803935125)*x447))+(((0.007614829125)*x709))+(((-1.0)*gclwh9_0*x577))+(((-1.7)*x726)));
op[69]=((0.07735732)+x507);
op[70]=((0.012986285)+(((-0.00493096)*x697))+(((0.008055325)*x699))+(((-1.0)*x684))+(((3.60823078949063e-5)*x690))+(((-1.0)*x693))+(((-1.0)*x691))+(((3.60823078949063e-5)*x683))+(((-0.008055325)*x696))+(((-1.0)*x686))+(((3.60823078949063e-5)*x689))+(((-0.012986285)*x703))+x706+x713+(((0.00493096)*x700))+(((0.008055325)*x702))+(((-0.012986285)*x695))+x692+x698+(((-3.60823078949063e-5)*x687))+(((-0.008055325)*x704))+(((0.008055325)*x694))+(((-1.0)*x701))+(((3.60823078949063e-5)*x685))+(((-1.0)*x493))+x688+(((-1.0)*x501))+x497+(((-0.00493096)*x705)));
op[71]=((((-1.0)*x721))+(((0.0655)*x726))+(((0.03275)*x711))+(((-0.0655)*x723))+(((0.006199575)*x505))+(((-1.0)*x725))+(((-0.000293394886875)*x709))+(((-1.0)*x715))+(((0.0655)*x720))+x714+x716+x718+(((0.000293394886875)*x708))+(((-0.006199575)*x504))+(((-0.03275)*x710))+(((-1.0)*x717))+(((-1.0)*x719))+(((-0.000293394886875)*x707))+(((0.006199575)*x503))+(((-0.03275)*x712))+x724+x722);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x727=htj1*htj1;
CheckValue<IkReal> x728=IKPowWithIntegerCheck(((1.0)+x727),-1);
if(!x728.valid){
continue;
}
cj1array[numsolutions]=((x728.value)*(((1.0)+(((-1.0)*x727)))));
CheckValue<IkReal> x729=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x729.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x729.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x730=htj2*htj2;
CheckValue<IkReal> x731=IKPowWithIntegerCheck(((1.0)+x730),-1);
if(!x731.valid){
continue;
}
cj2array[numsolutions]=((x731.value)*(((1.0)+(((-1.0)*x730)))));
CheckValue<IkReal> x732=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x732.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x732.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x733=htj3*htj3;
CheckValue<IkReal> x734=IKPowWithIntegerCheck(((1.0)+x733),-1);
if(!x734.valid){
continue;
}
cj3array[numsolutions]=((x734.value)*(((1.0)+(((-1.0)*x733)))));
CheckValue<IkReal> x735=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x735.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x735.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x736=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x736);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x736);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x737=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x737);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x737);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(r22,-1);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739=IKPowWithIntegerCheck(sj3,-1);
if(!x739.valid){
continue;
}
sj4array[0]=((x738.value)*(x739.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x740=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x740);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x740);
IkReal x741=(r10*sj3);
IkReal x742=(cj3*cj4*r11);
IkReal x743=(cj1*cj2*r01*sj4);
IkReal x744=(r01*sj1*sj2*sj4);
IkReal x745=(r00*sj3);
IkReal x746=(cj3*cj4*r01);
IkReal x747=(cj1*cj2*r11*sj4);
IkReal x748=(r11*sj1*sj2*sj4);
IkReal x749=(cj3*r12*sj4);
IkReal x750=(cj1*cj2*cj4*r02);
IkReal x751=(cj4*r02*sj1*sj2);
IkReal x752=((((-12.0)*x749))+(((12.0)*x751))+(((-12.0)*x750)));
IkReal x753=((4.0)*sj3);
IkReal x754=(r11*x753);
IkReal x755=((4.0)*cj3*cj4);
IkReal x756=(r10*x755);
IkReal x757=((4.0)*cj1*cj2*sj4);
IkReal x758=(r00*x757);
IkReal x759=((4.0)*sj1*sj2*sj4);
IkReal x760=(r00*x759);
IkReal x761=((((-1.0)*x760))+(((-1.0)*x756))+x758+x754);
IkReal x762=(cj3*r02*sj4);
IkReal x763=(cj1*cj2*cj4*r12);
IkReal x764=(cj4*r12*sj1*sj2);
IkReal x765=(r01*x753);
IkReal x766=(r00*x755);
IkReal x767=(r10*x757);
IkReal x768=(r10*x759);
IkReal x769=((((-1.0)*x767))+(((-1.0)*x766))+x765+x768);
IkReal x770=((((12.0)*x763))+(((-12.0)*x762))+(((-12.0)*x764)));
j5eval[0]=((((0.5)*(IKabs(((((16.0)*x743))+(((-16.0)*x741))+(((-16.0)*x742))+(((-16.0)*x744)))))))+(((0.5)*(IKabs(((((-1.0)*x765))+(((-1.0)*x768))+x767+x766+x770)))))+(((0.5)*(IKabs((x769+x770)))))+(IKabs(((((-8.0)*x744))+(((-8.0)*x741))+(((-8.0)*x742))+(((8.0)*x743)))))+(((0.5)*(IKabs(((((-1.0)*x758))+x760+(((-1.0)*x754))+x752+x756)))))+(((0.5)*(IKabs(((((4.0)*x751))+x761+(((-4.0)*x750))+(((-4.0)*x749)))))))+(((0.5)*(IKabs((x761+x752)))))+(IKabs(((((8.0)*x748))+(((-8.0)*x745))+(((-8.0)*x747))+(((-8.0)*x746)))))+(((0.5)*(IKabs((x769+(((4.0)*x763))+(((-4.0)*x762))+(((-4.0)*x764)))))))+(((0.5)*(IKabs(((((16.0)*x748))+(((-16.0)*x747))+(((-16.0)*x746))+(((-16.0)*x745))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x771=(cj3*r12*sj4);
IkReal x772=(cj1*cj2*cj4*r02);
IkReal x773=(cj4*r02*sj1*sj2);
IkReal x774=((((-4.0)*x771))+(((-4.0)*x772))+(((4.0)*x773)));
IkReal x775=((4.0)*r11*sj3);
IkReal x776=((((4.0)*r10))*((cj3*cj4)));
IkReal x777=((4.0)*r00);
IkReal x778=(cj1*cj2*sj4*x777);
IkReal x779=(sj1*sj2*sj4*x777);
IkReal x780=((((-1.0)*x779))+x778+x775+(((-1.0)*x776)));
IkReal x781=(r10*sj3);
IkReal x782=(cj3*cj4*r11);
IkReal x783=(cj1*cj2*r01*sj4);
IkReal x784=(r01*sj1*sj2*sj4);
IkReal x785=((((8.0)*x783))+(((-8.0)*x781))+(((-8.0)*x782))+(((-8.0)*x784)));
IkReal x786=((((-12.0)*x771))+(((-12.0)*x772))+(((12.0)*x773)));
IkReal x787=((((-1.0)*x775))+(((-1.0)*x778))+x779+x776);
op[0]=(x780+x774);
op[1]=x785;
op[2]=(x786+x780);
op[3]=((((-16.0)*x782))+(((16.0)*x783))+(((-16.0)*x781))+(((-16.0)*x784)));
op[4]=(x786+x787);
op[5]=x785;
op[6]=(x787+x774);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x788=((4.0)*r01*sj3);
IkReal x789=((((4.0)*r00))*((cj3*cj4)));
IkReal x790=((4.0)*r10);
IkReal x791=(cj1*cj2*sj4*x790);
IkReal x792=(sj1*sj2*sj4*x790);
IkReal x793=(x789+(((-1.0)*x792))+(((-1.0)*x788))+x791);
IkReal x794=(cj3*r02*sj4);
IkReal x795=((-4.0)*x794);
IkReal x796=(cj1*cj2*cj4*r12);
IkReal x797=((4.0)*x796);
IkReal x798=(cj4*r12*sj1*sj2);
IkReal x799=((-4.0)*x798);
IkReal x800=(r00*sj3);
IkReal x801=(cj3*cj4*r01);
IkReal x802=(cj1*cj2*r11*sj4);
IkReal x803=(r11*sj1*sj2*sj4);
IkReal x804=((((-8.0)*x801))+(((-8.0)*x800))+(((8.0)*x803))+(((-8.0)*x802)));
IkReal x805=((((12.0)*x796))+(((-12.0)*x798))+(((-12.0)*x794)));
IkReal x806=(x788+(((-1.0)*x791))+(((-1.0)*x789))+x792);
j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*((x806+x799+x797+x795))))+(((htj5*htj5)*((x805+x793))))+(((htj5*htj5*htj5)*(((((16.0)*x803))+(((-16.0)*x800))+(((-16.0)*x802))+(((-16.0)*x801))))))+((x804*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x804))+(((htj5*htj5*htj5*htj5)*((x805+x806))))+x799+x797+x795+x793);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x807=(cj5*sj4);
IkReal x808=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x807))+(((-1.0)*r01*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x807))+(((-1.0)*(1.0)*cj4*r12))+((r11*x808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x807))+(((-1.0)*r01*x808))))+IKsqr(((((-1.0)*r10*x807))+(((-1.0)*(1.0)*cj4*r12))+((r11*x808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x807))+(((-1.0)*r01*x808))), ((((-1.0)*r10*x807))+(((-1.0)*(1.0)*cj4*r12))+((r11*x808))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x809=IKsin(j0);
IkReal x810=((1.0)*cj4);
IkReal x811=(sj4*sj5);
IkReal x812=((1.0)*cj5*sj4);
IkReal x813=IKcos(j0);
IkReal x814=((1.0)*x813);
IkReal x815=((0.09465)*cj5);
IkReal x816=((0.09465)*sj5);
IkReal x817=((0.425)*cj1);
IkReal x818=(cj1*cj2);
IkReal x819=(x813*x818);
IkReal x820=(sj1*sj2);
IkReal x821=(x809*x818);
IkReal x822=(sj1*sj2*x809);
IkReal x823=(cj3*cj5);
IkReal x824=(cj3*sj5);
IkReal x825=(cj1*sj2);
IkReal x826=(cj2*sj1);
IkReal x827=((1.0)*sj3*sj4);
IkReal x828=(cj4*cj5*sj3);
IkReal x829=((1.0)*cj4*sj3*sj5);
IkReal x830=(cj3*sj4);
IkReal x831=(cj5*sj3);
IkReal x832=(sj3*sj5);
IkReal x833=(cj3*cj4*sj5);
IkReal x834=((1.0)*cj3*cj4*cj5);
evalcond[0]=((((-1.0)*r02*x810))+x809+((r01*x811))+(((-1.0)*r00*x812)));
evalcond[1]=((((-1.0)*r10*x812))+(((-1.0)*r12*x810))+((r11*x811))+(((-1.0)*x814)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x816))+(((-1.0)*x813*x817))+(((-1.0)*r01*x815))+(((-0.39225)*x819))+(((0.10915)*x809))+(((0.39225)*x813*x820)));
evalcond[3]=((((-0.10915)*x813))+(((-1.0)*(1.0)*py))+(((0.39225)*x822))+(((-1.0)*r10*x816))+(((-0.39225)*x821))+(((-1.0)*r11*x815))+(((-1.0)*x809*x817)));
evalcond[4]=(((r00*x824))+(((-1.0)*r02*x827))+((x813*x825))+((x813*x826))+((r00*x828))+((r01*x823))+(((-1.0)*r01*x829)));
evalcond[5]=((((-1.0)*x814*x820))+(((-1.0)*r00*x834))+((r00*x832))+((r02*x830))+x819+((r01*x831))+((r01*x833)));
evalcond[6]=(((x809*x826))+((x809*x825))+((r11*x823))+((r10*x824))+(((-1.0)*r12*x827))+(((-1.0)*r11*x829))+((r10*x828)));
evalcond[7]=(((r11*x833))+(((-1.0)*x822))+((r11*x831))+x821+(((-1.0)*r10*x834))+((r10*x832))+((r12*x830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x835=IKPowWithIntegerCheck(cj3,-1);
if(!x835.valid){
continue;
}
CheckValue<IkReal> x836=IKPowWithIntegerCheck(r22,-1);
if(!x836.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x835.value)*(x836.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x837=((1.0)*r22);
evalcond[0]=((-1.0)*x837*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x837*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x838=((1.0)*pz);
r20=0;
r21=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x838);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x838);
IkReal x839=(r10*sj3);
IkReal x840=(cj3*cj4*r11);
IkReal x841=(cj1*cj2*r01*sj4);
IkReal x842=(r01*sj1*sj2*sj4);
IkReal x843=(r00*sj3);
IkReal x844=(cj3*cj4*r01);
IkReal x845=(cj1*cj2*r11*sj4);
IkReal x846=(r11*sj1*sj2*sj4);
IkReal x847=(cj3*r12*sj4);
IkReal x848=(cj1*cj2*cj4*r02);
IkReal x849=(cj4*r02*sj1*sj2);
IkReal x850=((((12.0)*x849))+(((-12.0)*x847))+(((-12.0)*x848)));
IkReal x851=((4.0)*sj3);
IkReal x852=(r11*x851);
IkReal x853=((4.0)*cj3*cj4);
IkReal x854=(r10*x853);
IkReal x855=((4.0)*cj1*cj2*sj4);
IkReal x856=(r00*x855);
IkReal x857=((4.0)*sj1*sj2*sj4);
IkReal x858=(r00*x857);
IkReal x859=((((-1.0)*x854))+x852+x856+(((-1.0)*x858)));
IkReal x860=(cj3*r02*sj4);
IkReal x861=(cj1*cj2*cj4*r12);
IkReal x862=(cj4*r12*sj1*sj2);
IkReal x863=(r01*x851);
IkReal x864=(r00*x853);
IkReal x865=(r10*x855);
IkReal x866=(r10*x857);
IkReal x867=((((-1.0)*x864))+(((-1.0)*x865))+x866+x863);
IkReal x868=((((-12.0)*x862))+(((-12.0)*x860))+(((12.0)*x861)));
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x852))+x858+x850+x854+(((-1.0)*x856)))))))+(((0.5)*(IKabs(((((-1.0)*x866))+x868+x865+x864+(((-1.0)*x863)))))))+(((0.5)*(IKabs(((((-16.0)*x845))+(((16.0)*x846))+(((-16.0)*x843))+(((-16.0)*x844)))))))+(((0.5)*(IKabs(((((-16.0)*x842))+(((16.0)*x841))+(((-16.0)*x840))+(((-16.0)*x839)))))))+(IKabs(((((8.0)*x841))+(((-8.0)*x840))+(((-8.0)*x842))+(((-8.0)*x839)))))+(((0.5)*(IKabs((x867+x868)))))+(IKabs(((((-8.0)*x843))+(((-8.0)*x845))+(((-8.0)*x844))+(((8.0)*x846)))))+(((0.5)*(IKabs(((((-4.0)*x848))+x859+(((4.0)*x849))+(((-4.0)*x847)))))))+(((0.5)*(IKabs((x867+(((-4.0)*x860))+(((4.0)*x861))+(((-4.0)*x862)))))))+(((0.5)*(IKabs((x859+x850))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x869=(cj3*r12*sj4);
IkReal x870=(cj1*cj2*cj4*r02);
IkReal x871=(cj4*r02*sj1*sj2);
IkReal x872=((((4.0)*x871))+(((-4.0)*x870))+(((-4.0)*x869)));
IkReal x873=((4.0)*r11*sj3);
IkReal x874=((((4.0)*r10))*((cj3*cj4)));
IkReal x875=((4.0)*r00);
IkReal x876=(cj1*cj2*sj4*x875);
IkReal x877=(sj1*sj2*sj4*x875);
IkReal x878=((((-1.0)*x874))+(((-1.0)*x877))+x873+x876);
IkReal x879=(r10*sj3);
IkReal x880=(cj3*cj4*r11);
IkReal x881=(cj1*cj2*r01*sj4);
IkReal x882=(r01*sj1*sj2*sj4);
IkReal x883=((((-8.0)*x880))+(((-8.0)*x879))+(((8.0)*x881))+(((-8.0)*x882)));
IkReal x884=((((12.0)*x871))+(((-12.0)*x870))+(((-12.0)*x869)));
IkReal x885=((((-1.0)*x876))+x877+x874+(((-1.0)*x873)));
op[0]=(x872+x878);
op[1]=x883;
op[2]=(x884+x878);
op[3]=((((16.0)*x881))+(((-16.0)*x880))+(((-16.0)*x882))+(((-16.0)*x879)));
op[4]=(x885+x884);
op[5]=x883;
op[6]=(x885+x872);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x886=((4.0)*r01*sj3);
IkReal x887=((((4.0)*r00))*((cj3*cj4)));
IkReal x888=((4.0)*r10);
IkReal x889=(cj1*cj2*sj4*x888);
IkReal x890=(sj1*sj2*sj4*x888);
IkReal x891=((((-1.0)*x886))+x889+x887+(((-1.0)*x890)));
IkReal x892=(cj3*r02*sj4);
IkReal x893=((-4.0)*x892);
IkReal x894=(cj1*cj2*cj4*r12);
IkReal x895=((4.0)*x894);
IkReal x896=(cj4*r12*sj1*sj2);
IkReal x897=((-4.0)*x896);
IkReal x898=(r00*sj3);
IkReal x899=(cj3*cj4*r01);
IkReal x900=(cj1*cj2*r11*sj4);
IkReal x901=(r11*sj1*sj2*sj4);
IkReal x902=((((8.0)*x901))+(((-8.0)*x898))+(((-8.0)*x899))+(((-8.0)*x900)));
IkReal x903=((((-12.0)*x892))+(((-12.0)*x896))+(((12.0)*x894)));
IkReal x904=(x886+(((-1.0)*x887))+x890+(((-1.0)*x889)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x898))+(((-16.0)*x899))+(((16.0)*x901))+(((-16.0)*x900))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x904+x895+x897+x893))))+((htj5*x902))+((x902*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x904+x903))))+(((htj5*htj5)*((x903+x891))))+x895+x897+x891+x893);
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x905=(cj5*sj4);
IkReal x906=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x905))+(((-1.0)*r01*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x905))+(((-1.0)*(1.0)*cj4*r12))+((r11*x906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x905))+(((-1.0)*r01*x906))))+IKsqr(((((-1.0)*r10*x905))+(((-1.0)*(1.0)*cj4*r12))+((r11*x906))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x905))+(((-1.0)*r01*x906))), ((((-1.0)*r10*x905))+(((-1.0)*(1.0)*cj4*r12))+((r11*x906))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x907=IKsin(j0);
IkReal x908=((1.0)*cj4);
IkReal x909=(sj4*sj5);
IkReal x910=((1.0)*cj5*sj4);
IkReal x911=IKcos(j0);
IkReal x912=((1.0)*x911);
IkReal x913=((0.09465)*cj5);
IkReal x914=((0.09465)*sj5);
IkReal x915=((0.425)*cj1);
IkReal x916=(cj1*cj2);
IkReal x917=(x911*x916);
IkReal x918=(sj1*sj2);
IkReal x919=(x907*x916);
IkReal x920=(sj1*sj2*x907);
IkReal x921=(cj3*cj5);
IkReal x922=(cj3*sj5);
IkReal x923=(cj1*sj2);
IkReal x924=(cj2*sj1);
IkReal x925=((1.0)*sj3*sj4);
IkReal x926=(cj4*cj5*sj3);
IkReal x927=((1.0)*cj4*sj3*sj5);
IkReal x928=(cj3*sj4);
IkReal x929=(cj5*sj3);
IkReal x930=(sj3*sj5);
IkReal x931=(cj3*cj4*sj5);
IkReal x932=((1.0)*cj3*cj4*cj5);
evalcond[0]=(((r01*x909))+x907+(((-1.0)*r00*x910))+(((-1.0)*r02*x908)));
evalcond[1]=((((-1.0)*r12*x908))+(((-1.0)*r10*x910))+((r11*x909))+(((-1.0)*x912)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r01*x913))+(((-1.0)*x911*x915))+(((0.39225)*x911*x918))+(((-1.0)*r00*x914))+(((-0.39225)*x917))+(((0.10915)*x907)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-1.0)*r11*x913))+(((-0.39225)*x919))+(((-0.10915)*x911))+(((-1.0)*r10*x914))+(((-1.0)*x907*x915))+(((0.39225)*x920)));
evalcond[4]=((((-1.0)*r01*x927))+((x911*x924))+((r00*x926))+((r00*x922))+((x911*x923))+((r01*x921))+(((-1.0)*r02*x925)));
evalcond[5]=((((-1.0)*r00*x932))+((r01*x931))+(((-1.0)*x912*x918))+x917+((r00*x930))+((r02*x928))+((r01*x929)));
evalcond[6]=(((r11*x921))+(((-1.0)*r12*x925))+((r10*x922))+((x907*x924))+(((-1.0)*r11*x927))+((r10*x926))+((x907*x923)));
evalcond[7]=(((r10*x930))+((r11*x931))+(((-1.0)*r10*x932))+x919+((r11*x929))+(((-1.0)*x920))+((r12*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r20))+(IKabs(r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x933=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x933);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x933);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x934=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x934);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x934);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(r22,-1);
if(!x935.valid){
continue;
}
CheckValue<IkReal> x936=IKPowWithIntegerCheck(sj3,-1);
if(!x936.valid){
continue;
}
sj4array[0]=((x935.value)*(x936.value)*(((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*(((1.0)*r22*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+((cj2*sj1))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x937=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x937);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x937);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x938=((4.0)*cj1*r01);
IkReal x939=(cj2*cj3*x938);
IkReal x940=(sj2*sj3*x938);
IkReal x941=((4.0)*r01*sj1);
IkReal x942=(cj2*sj3*x941);
IkReal x943=(cj3*sj2*x941);
IkReal x944=((4.0)*r00);
IkReal x945=(cj1*cj2*cj4*sj3*x944);
IkReal x946=(cj1*cj3*cj4*sj2*x944);
IkReal x947=(cj2*cj3*cj4*sj1*x944);
IkReal x948=(cj4*sj1*sj2*sj3*x944);
IkReal x949=((((-1.0)*x939))+(((-1.0)*x945))+(((-1.0)*x947))+(((-1.0)*x946))+x942+x943+x940+x948);
IkReal x950=(cj1*cj2*cj3*r00);
IkReal x951=(cj1*r00*sj2*sj3);
IkReal x952=(cj2*r00*sj1*sj3);
IkReal x953=(cj3*r00*sj1*sj2);
IkReal x954=(cj1*cj2*cj4*r01*sj3);
IkReal x955=(cj1*cj3*cj4*r01*sj2);
IkReal x956=(cj2*cj3*cj4*r01*sj1);
IkReal x957=(cj4*r01*sj1*sj2*sj3);
IkReal x958=((((8.0)*x950))+(((-8.0)*x951))+(((-8.0)*x955))+(((-8.0)*x953))+(((-8.0)*x954))+(((-8.0)*x952))+(((8.0)*x957))+(((-8.0)*x956)));
IkReal x959=((((-1.0)*x942))+(((-1.0)*x940))+(((-1.0)*x943))+x939+(((-1.0)*x948))+x946+x947+x945);
op[0]=x949;
op[1]=x958;
op[2]=x949;
op[3]=((((16.0)*x957))+(((-16.0)*x952))+(((16.0)*x950))+(((-16.0)*x956))+(((-16.0)*x951))+(((-16.0)*x955))+(((-16.0)*x954))+(((-16.0)*x953)));
op[4]=x959;
op[5]=x958;
op[6]=x959;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x960=(cj5*sj4);
IkReal x961=(sj4*sj5);
if( IKabs((((r00*x960))+(((-1.0)*r01*x961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x960))+((r11*x961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x960))+(((-1.0)*r01*x961))))+IKsqr(((((-1.0)*r10*x960))+((r11*x961))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x960))+(((-1.0)*r01*x961))), ((((-1.0)*r10*x960))+((r11*x961))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x962=IKsin(j0);
IkReal x963=(sj4*sj5);
IkReal x964=((1.0)*cj5*sj4);
IkReal x965=IKcos(j0);
IkReal x966=((1.0)*x965);
IkReal x967=(cj3*cj5);
IkReal x968=(cj3*sj5);
IkReal x969=(cj1*sj2);
IkReal x970=(cj2*sj1);
IkReal x971=(cj4*cj5*sj3);
IkReal x972=((1.0)*cj4*sj3*sj5);
IkReal x973=(cj5*sj3);
IkReal x974=(sj3*sj5);
IkReal x975=(cj1*cj2);
IkReal x976=(x965*x975);
IkReal x977=(cj3*cj4*sj5);
IkReal x978=(sj1*sj2);
IkReal x979=((1.0)*cj3*cj4*cj5);
IkReal x980=(x962*x975);
IkReal x981=(sj1*sj2*x962);
IkReal x982=((0.09465)*cj5);
IkReal x983=((0.09465)*sj5);
IkReal x984=((0.425)*cj1);
evalcond[0]=(((r01*x963))+(((-1.0)*r00*x964))+x962);
evalcond[1]=(((r11*x963))+(((-1.0)*x966))+(((-1.0)*r10*x964)));
evalcond[2]=((((-1.0)*r01*x972))+((r01*x967))+((r00*x968))+((x965*x969))+((r00*x971))+((x965*x970)));
evalcond[3]=(((r10*x971))+((r10*x968))+((x962*x970))+((x962*x969))+((r11*x967))+(((-1.0)*r11*x972)));
evalcond[4]=((((-1.0)*r00*x979))+((r01*x973))+(((-1.0)*x966*x978))+((r01*x977))+x976+((r00*x974)));
evalcond[5]=((((-1.0)*x981))+x980+((r11*x977))+((r10*x974))+((r11*x973))+(((-1.0)*r10*x979)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.39225)*x965*x978))+(((-1.0)*x965*x984))+(((-1.0)*r01*x982))+(((-0.39225)*x976))+(((0.10915)*x962))+(((-1.0)*r00*x983)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*x962*x984))+(((-1.0)*r11*x982))+(((-0.39225)*x980))+(((0.39225)*x981))+(((-0.10915)*x965))+(((-1.0)*r10*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x985=IKPowWithIntegerCheck(cj3,-1);
if(!x985.valid){
continue;
}
CheckValue<IkReal> x986=IKPowWithIntegerCheck(r22,-1);
if(!x986.valid){
continue;
}
sj4array[0]=((-1.0)*(((1.0)*(x985.value)*(x986.value)*((((cj1*sj2))+((cj2*sj1)))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x987=((1.0)*r22);
evalcond[0]=((-1.0)*x987*(IKcos(j4)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*sj3*x987*(IKsin(j4))))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x988=((1.0)*pz);
r21=0;
r20=0;
r02=0;
r12=0;
npx=(((py*r10))+((px*r00)));
npy=(((py*r11))+((px*r01)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*r00*x988);
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*r01*x988);
rxp2_0=((-1.0)*(((1.0)*py*r22)));
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10)))))+(((0.5)*(IKabs(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj2*cj3*cj4*r00*sj1)))))))+(IKabs(((((-8.0)*cj2*r00*sj1*sj3))+(((-8.0)*cj2*cj3*cj4*r01*sj1))+(((-8.0)*cj1*r00*sj2*sj3))+(((-8.0)*cj3*r00*sj1*sj2))+(((8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj3*r00))+(((-8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj4*r01*sj3)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10)))))))+(IKabs(((((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj1*cj3*cj4*r00*sj2))+(((4.0)*cj2*r01*sj1*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj3*r01*sj1*sj2)))))+(IKabs(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2)))))+(((0.5)*(IKabs(((((-16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj1*r00*sj2*sj3))+(((-16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj3*r00*sj1*sj2))+(((16.0)*cj4*r01*sj1*sj2*sj3))+(((-16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj2*cj3*r00))+(((-16.0)*cj2*cj3*cj4*r01*sj1))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 1 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x989=((4.0)*cj1*r01);
IkReal x990=(cj2*cj3*x989);
IkReal x991=(sj2*sj3*x989);
IkReal x992=((4.0)*r01*sj1);
IkReal x993=(cj2*sj3*x992);
IkReal x994=(cj3*sj2*x992);
IkReal x995=((4.0)*r00);
IkReal x996=(cj1*cj2*cj4*sj3*x995);
IkReal x997=(cj1*cj3*cj4*sj2*x995);
IkReal x998=(cj2*cj3*cj4*sj1*x995);
IkReal x999=(cj4*sj1*sj2*sj3*x995);
IkReal x1000=((((-1.0)*x998))+(((-1.0)*x997))+(((-1.0)*x990))+x999+x994+x991+x993+(((-1.0)*x996)));
IkReal x1001=(cj1*cj2*cj3*r00);
IkReal x1002=(cj1*r00*sj2*sj3);
IkReal x1003=(cj2*r00*sj1*sj3);
IkReal x1004=(cj3*r00*sj1*sj2);
IkReal x1005=(cj1*cj2*cj4*r01*sj3);
IkReal x1006=(cj1*cj3*cj4*r01*sj2);
IkReal x1007=(cj2*cj3*cj4*r01*sj1);
IkReal x1008=(cj4*r01*sj1*sj2*sj3);
IkReal x1009=((((-8.0)*x1007))+(((8.0)*x1008))+(((8.0)*x1001))+(((-8.0)*x1003))+(((-8.0)*x1004))+(((-8.0)*x1002))+(((-8.0)*x1005))+(((-8.0)*x1006)));
IkReal x1010=((((-1.0)*x991))+(((-1.0)*x993))+(((-1.0)*x999))+(((-1.0)*x994))+x998+x996+x990+x997);
op[0]=x1000;
op[1]=x1009;
op[2]=x1000;
op[3]=((((16.0)*x1008))+(((-16.0)*x1007))+(((-16.0)*x1004))+(((-16.0)*x1003))+(((-16.0)*x1006))+(((-16.0)*x1005))+(((-16.0)*x1002))+(((16.0)*x1001)));
op[4]=x1010;
op[5]=x1009;
op[6]=x1010;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5)*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((htj5*htj5)*(((((-4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj1*cj2*cj4*r10*sj3))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj2*r11*sj1*sj3))))))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+((htj5*(((((-8.0)*cj2*r10*sj1*sj3))+(((-8.0)*cj1*cj2*cj4*r11*sj3))+(((8.0)*cj4*r11*sj1*sj2*sj3))+(((-8.0)*cj1*cj3*cj4*r11*sj2))+(((-8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj3*r10*sj1*sj2))+(((-8.0)*cj2*cj3*cj4*r11*sj1))+(((8.0)*cj1*cj2*cj3*r10))))))+(((htj5*htj5*htj5)*(((((-16.0)*cj1*cj3*cj4*r11*sj2))+(((-16.0)*cj2*r10*sj1*sj3))+(((-16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj3*r10*sj1*sj2))+(((-16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj4*r11*sj3))+(((16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*cj2*cj3*r10))))))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((4.0)*cj3*r11*sj1*sj2))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*r11*sj2*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj3*cj4*r10*sj2))))))+(((-4.0)*cj2*r11*sj1*sj3)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1011=(cj5*sj4);
IkReal x1012=(sj4*sj5);
if( IKabs((((r00*x1011))+(((-1.0)*r01*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1011))+((r11*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1011))+(((-1.0)*r01*x1012))))+IKsqr(((((-1.0)*r10*x1011))+((r11*x1012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x1011))+(((-1.0)*r01*x1012))), ((((-1.0)*r10*x1011))+((r11*x1012))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1013=IKsin(j0);
IkReal x1014=(sj4*sj5);
IkReal x1015=((1.0)*cj5*sj4);
IkReal x1016=IKcos(j0);
IkReal x1017=((1.0)*x1016);
IkReal x1018=(cj3*cj5);
IkReal x1019=(cj3*sj5);
IkReal x1020=(cj1*sj2);
IkReal x1021=(cj2*sj1);
IkReal x1022=(cj4*cj5*sj3);
IkReal x1023=((1.0)*cj4*sj3*sj5);
IkReal x1024=(cj5*sj3);
IkReal x1025=(sj3*sj5);
IkReal x1026=(cj1*cj2);
IkReal x1027=(x1016*x1026);
IkReal x1028=(cj3*cj4*sj5);
IkReal x1029=(sj1*sj2);
IkReal x1030=((1.0)*cj3*cj4*cj5);
IkReal x1031=(x1013*x1026);
IkReal x1032=(sj1*sj2*x1013);
IkReal x1033=((0.09465)*cj5);
IkReal x1034=((0.09465)*sj5);
IkReal x1035=((0.425)*cj1);
evalcond[0]=((((-1.0)*r00*x1015))+((r01*x1014))+x1013);
evalcond[1]=((((-1.0)*r10*x1015))+(((-1.0)*x1017))+((r11*x1014)));
evalcond[2]=(((r00*x1019))+((x1016*x1020))+((r01*x1018))+((x1016*x1021))+((r00*x1022))+(((-1.0)*r01*x1023)));
evalcond[3]=(((r10*x1022))+((r11*x1018))+((r10*x1019))+((x1013*x1020))+((x1013*x1021))+(((-1.0)*r11*x1023)));
evalcond[4]=((((-1.0)*x1017*x1029))+((r00*x1025))+((r01*x1024))+x1027+((r01*x1028))+(((-1.0)*r00*x1030)));
evalcond[5]=((((-1.0)*x1032))+x1031+((r11*x1028))+((r10*x1025))+(((-1.0)*r10*x1030))+((r11*x1024)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.39225)*x1027))+(((-1.0)*r00*x1034))+(((-1.0)*x1016*x1035))+(((0.39225)*x1016*x1029))+(((-1.0)*r01*x1033))+(((0.10915)*x1013)));
evalcond[7]=((((-1.0)*x1013*x1035))+(((-1.0)*(1.0)*py))+(((0.39225)*x1032))+(((-1.0)*r10*x1034))+(((-1.0)*r11*x1033))+(((-0.39225)*x1031))+(((-0.10915)*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1038 = IKatan2WithCheck(IkReal(((-1.0)*(((0.09465)*r21)))),IkReal(((-1.0)*(((0.09465)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1038.valid){
continue;
}
IkReal x1036=((-1.0)*(x1038.value));
if((((((0.0089586225)*(r20*r20)))+(((0.0089586225)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1039=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r20*r20)))+(((0.0089586225)*(r21*r21)))))),-1);
if(!x1039.valid){
continue;
}
if( (((-1.0)*(x1039.value)*(((((-1.0)*(0.39225)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.39225)*cj2*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1039.value)*(((((-1.0)*(0.39225)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.39225)*cj2*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1037=IKasin(((-1.0)*(x1039.value)*(((((-1.0)*(0.39225)*cj1*sj2))+(((-1.0)*(1.0)*pz))+(((-1.0)*(0.425)*sj1))+(((-1.0)*(0.39225)*cj2*sj1))))));
j5array[0]=(x1037+x1036);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1037))+x1036);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1040=(sj3*(r21*r21));
IkReal x1041=cj5*cj5;
IkReal x1042=((((-1.0)*(2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1041*(r20*r20)))+x1040+((sj3*(r22*r22)))+(((-1.0)*x1040*x1041)));
j4eval[0]=x1042;
j4eval[1]=IKsign(x1042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1043=(cj3*(r21*r21));
IkReal x1044=cj5*cj5;
IkReal x1045=((((-1.0)*(2.0)*cj3*cj5*r20*r21*sj5))+x1043+((cj3*x1044*(r20*r20)))+(((-1.0)*x1043*x1044))+((cj3*(r22*r22))));
j4eval[0]=x1045;
j4eval[1]=IKsign(x1045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1046=cj1*cj1;
IkReal x1047=cj2*cj2;
IkReal x1048=(cj1*sj1*sj2);
IkReal x1049=(cj2*x1046);
IkReal x1050=(cj1*cj2*sj1*sj2);
IkReal x1051=(x1046*x1047);
j0eval[0]=((6.19369221392727)+(((12.4570625281677)*x1049))+x1046+(((-5.74856797255738)*x1047))+(((-12.4570625281677)*x1048))+(((11.4971359451148)*x1051))+(((-11.4971359451148)*x1050)));
j0eval[1]=IKsign(((66309514.0)+(((123088050.0)*x1051))+(((133365000.0)*x1049))+(((10705975.0)*x1046))+(((-61544025.0)*x1047))+(((-123088050.0)*x1050))+(((-133365000.0)*x1048))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1052=(((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
IkReal x1053=((1.0)*cj5);
IkReal x1054=((1.0)*sj5);
j0eval[0]=x1052;
j0eval[1]=IKsign(x1052);
j0eval[2]=((IKabs(((((-1.0)*r01*x1053))+(((-1.0)*r00*x1054)))))+(IKabs(((((-1.0)*r11*x1053))+(((-1.0)*r10*x1054))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1055=r21*r21;
IkReal x1056=(r21*sj5);
IkReal x1057=cj5*cj5;
IkReal x1058=((((-2.0)*cj5*r20*x1056))+x1055+((x1057*(r20*r20)))+(((-1.0)*x1055*x1057))+(r22*r22));
IkReal x1059=(sj1*sj2);
IkReal x1060=((1.0)*cj1*cj2);
IkReal x1061=(cj5*r20);
j4eval[0]=x1058;
j4eval[1]=IKsign(x1058);
j4eval[2]=((IKabs(((((-1.0)*sj1*sj2*x1061))+((x1056*x1059))+(((-1.0)*x1056*x1060))+((cj1*cj2*x1061)))))+(IKabs(((((-1.0)*r22*x1060))+((r22*x1059))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=(((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1062=(cj1*cj2);
IkReal x1063=(sj1*sj2);
IkReal x1064=((20000.0)*px);
IkReal x1065=((8500.0)*cj1);
IkReal x1066=(cj5*r01);
IkReal x1067=(r00*sj5);
IkReal x1068=((5952.0)*cj1*cj2);
IkReal x1069=((5952.0)*sj1*sj2);
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(((((2183.0)*x1062))+(((-2183.0)*x1063))),-1);
if(!x1070.valid){
continue;
}
CheckValue<IkReal> x1071=IKPowWithIntegerCheck((x1062+(((-1.0)*x1063))),-1);
if(!x1071.valid){
continue;
}
if( IKabs(((x1070.value)*(((((-1.0)*x1067*x1068))+((x1066*x1069))+(((-1.0)*x1065*x1067))+(((-1.0)*x1063*x1064))+(((-1.0)*x1066*x1068))+((x1062*x1064))+(((-1.0)*x1065*x1066))+((x1067*x1069)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1071.value)*(((((-1.0)*x1067))+(((-1.0)*x1066)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1070.value)*(((((-1.0)*x1067*x1068))+((x1066*x1069))+(((-1.0)*x1065*x1067))+(((-1.0)*x1063*x1064))+(((-1.0)*x1066*x1068))+((x1062*x1064))+(((-1.0)*x1065*x1066))+((x1067*x1069))))))+IKsqr(((x1071.value)*(((((-1.0)*x1067))+(((-1.0)*x1066))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1070.value)*(((((-1.0)*x1067*x1068))+((x1066*x1069))+(((-1.0)*x1065*x1067))+(((-1.0)*x1063*x1064))+(((-1.0)*x1066*x1068))+((x1062*x1064))+(((-1.0)*x1065*x1066))+((x1067*x1069))))), ((x1071.value)*(((((-1.0)*x1067))+(((-1.0)*x1066))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1072=(cj5*r01);
IkReal x1073=(r00*sj5);
IkReal x1074=IKcos(j0);
IkReal x1075=(cj1*cj2);
IkReal x1076=(x1074*x1075);
IkReal x1077=(sj1*sj2*x1074);
IkReal x1078=(cj5*r11);
IkReal x1079=(r10*sj5);
IkReal x1080=IKsin(j0);
IkReal x1081=(x1075*x1080);
IkReal x1082=(sj1*sj2*x1080);
IkReal x1083=((0.425)*cj1);
evalcond[0]=(x1076+x1072+x1073+(((-1.0)*x1077)));
evalcond[1]=(x1078+x1079+x1081+(((-1.0)*x1082)));
evalcond[2]=((((-0.09465)*x1073))+(((-1.0)*(1.0)*px))+(((0.10915)*x1080))+(((0.39225)*x1077))+(((-0.39225)*x1076))+(((-1.0)*x1074*x1083))+(((-0.09465)*x1072)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.39225)*x1081))+(((-1.0)*x1080*x1083))+(((-0.10915)*x1074))+(((-0.09465)*x1079))+(((-0.09465)*x1078))+(((0.39225)*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1084=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1084;
j4eval[1]=IKsign(x1084);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1085=((1.0)*sj5);
IkReal x1086=((((-1.0)*r00*x1085))+(((-1.0)*(1.0)*cj5*r01)));
j4eval[0]=x1086;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1085))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1087=((1.0)*cj5);
IkReal x1088=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1087)));
j4eval[0]=x1088;
j4eval[1]=IKsign(x1088);
j4eval[2]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1087))+(((-1.0)*cj0*r00*x1087))+((cj0*r01*sj5)))))+(IKabs((((cj0*r02))+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1089=((1.0)*cj5);
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1089)))),-1);
if(!x1090.valid){
continue;
}
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1089))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1089)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1090.value)))+(x1091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1092=IKcos(j4);
IkReal x1093=((1.0)*r22);
IkReal x1094=IKsin(j4);
IkReal x1095=(sj5*x1094);
IkReal x1096=((1.0)*cj5*x1094);
IkReal x1097=((1.0)*r02);
IkReal x1098=((1.0)*r12);
IkReal x1099=(cj5*x1092);
IkReal x1100=((1.0)*sj5*x1092);
IkReal x1101=IKsin((j1+j2));
evalcond[0]=(((r21*x1095))+(((-1.0)*x1092*x1093))+(((-1.0)*r20*x1096)));
evalcond[1]=((((-1.0)*r00*x1096))+sj0+((r01*x1095))+(((-1.0)*x1092*x1097)));
evalcond[2]=((((-1.0)*r10*x1096))+((r11*x1095))+(((-1.0)*(1.0)*cj0))+(((-1.0)*x1092*x1098)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1100))+(((-1.0)*x1093*x1094))+((sj1*sj2))+((r20*x1099)));
evalcond[4]=(((cj0*x1101))+((r00*x1099))+(((-1.0)*x1094*x1097))+(((-1.0)*r01*x1100)));
evalcond[5]=((((-1.0)*x1094*x1098))+((r10*x1099))+(((-1.0)*r11*x1100))+((sj0*x1101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1102=((1.0)*cj0);
CheckValue<IkReal> x1103 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1102)),IkReal(((((-1.0)*r21*sj5*x1102))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1103.valid){
continue;
}
CheckValue<IkReal> x1104=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1103.value)+(((1.5707963267949)*(x1104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1105=IKcos(j4);
IkReal x1106=((1.0)*r22);
IkReal x1107=IKsin(j4);
IkReal x1108=(sj5*x1107);
IkReal x1109=((1.0)*cj5*x1107);
IkReal x1110=((1.0)*r02);
IkReal x1111=((1.0)*r12);
IkReal x1112=(cj5*x1105);
IkReal x1113=((1.0)*sj5*x1105);
IkReal x1114=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1105*x1106))+(((-1.0)*r20*x1109))+((r21*x1108)));
evalcond[1]=(sj0+(((-1.0)*x1105*x1110))+(((-1.0)*r00*x1109))+((r01*x1108)));
evalcond[2]=((((-1.0)*x1105*x1111))+((r11*x1108))+(((-1.0)*r10*x1109))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1112))+(((-1.0)*r21*x1113))+(((-1.0)*x1106*x1107))+((sj1*sj2)));
evalcond[4]=(((cj0*x1114))+((r00*x1112))+(((-1.0)*r01*x1113))+(((-1.0)*x1107*x1110)));
evalcond[5]=((((-1.0)*r11*x1113))+(((-1.0)*x1107*x1111))+((r10*x1112))+((sj0*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1115 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1115.valid){
continue;
}
CheckValue<IkReal> x1116=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1115.value)+(((1.5707963267949)*(x1116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1117=IKcos(j4);
IkReal x1118=((1.0)*r22);
IkReal x1119=IKsin(j4);
IkReal x1120=(sj5*x1119);
IkReal x1121=((1.0)*cj5*x1119);
IkReal x1122=((1.0)*r02);
IkReal x1123=((1.0)*r12);
IkReal x1124=(cj5*x1117);
IkReal x1125=((1.0)*sj5*x1117);
IkReal x1126=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1121))+(((-1.0)*x1117*x1118))+((r21*x1120)));
evalcond[1]=(sj0+(((-1.0)*r00*x1121))+((r01*x1120))+(((-1.0)*x1117*x1122)));
evalcond[2]=(((r11*x1120))+(((-1.0)*x1117*x1123))+(((-1.0)*r10*x1121))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*x1125))+(((-1.0)*x1118*x1119))+((sj1*sj2))+((r20*x1124)));
evalcond[4]=(((r00*x1124))+(((-1.0)*x1119*x1122))+(((-1.0)*r01*x1125))+((cj0*x1126)));
evalcond[5]=((((-1.0)*r11*x1125))+((r10*x1124))+((sj0*x1126))+(((-1.0)*x1119*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1127=r21*r21;
IkReal x1128=(r21*sj5);
IkReal x1129=cj5*cj5;
IkReal x1130=(sj1*sj2);
IkReal x1131=((1.0)*cj1*cj2);
IkReal x1132=(cj5*r20);
CheckValue<IkReal> x1133 = IKatan2WithCheck(IkReal((((r22*x1130))+(((-1.0)*r22*x1131)))),IkReal((((x1128*x1130))+((cj1*cj2*x1132))+(((-1.0)*x1128*x1131))+(((-1.0)*sj1*sj2*x1132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1133.valid){
continue;
}
CheckValue<IkReal> x1134=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1127*x1129))+(((-2.0)*cj5*r20*x1128))+x1127+(r22*r22)+((x1129*(r20*r20))))),-1);
if(!x1134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1133.value)+(((1.5707963267949)*(x1134.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1135=IKcos(j4);
IkReal x1136=((1.0)*r22);
IkReal x1137=IKsin(j4);
IkReal x1138=(r21*sj5);
IkReal x1139=(cj5*r20);
evalcond[0]=((((-1.0)*x1135*x1136))+((x1137*x1138))+(((-1.0)*x1137*x1139)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+((x1135*x1139))+(((-1.0)*x1135*x1138))+((sj1*sj2))+(((-1.0)*x1136*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1140=(cj5*sj4);
IkReal x1141=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x1140))+(((-1.0)*r01*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1140))+((r11*x1141)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x1140))+(((-1.0)*r01*x1141))))+IKsqr(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1140))+((r11*x1141))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x1140))+(((-1.0)*r01*x1141))), ((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1140))+((r11*x1141))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1142=IKsin(j0);
IkReal x1143=((1.0)*cj4);
IkReal x1144=(sj4*sj5);
IkReal x1145=((1.0)*cj5*sj4);
IkReal x1146=IKcos(j0);
IkReal x1147=((1.0)*x1146);
IkReal x1148=(cj5*r01);
IkReal x1149=(r00*sj5);
IkReal x1150=(cj1*cj2);
IkReal x1151=(x1146*x1150);
IkReal x1152=(sj1*sj2);
IkReal x1153=(cj5*r11);
IkReal x1154=(r10*sj5);
IkReal x1155=(x1142*x1150);
IkReal x1156=(sj1*sj2*x1142);
IkReal x1157=((1.0)*sj4);
IkReal x1158=(cj4*cj5);
IkReal x1159=((1.0)*cj4*sj5);
IkReal x1160=IKsin((j1+j2));
IkReal x1161=((0.425)*cj1);
evalcond[0]=(((r01*x1144))+(((-1.0)*r00*x1145))+x1142+(((-1.0)*r02*x1143)));
evalcond[1]=(((r11*x1144))+(((-1.0)*x1147))+(((-1.0)*r12*x1143))+(((-1.0)*r10*x1145)));
evalcond[2]=((((-1.0)*x1147*x1152))+x1151+x1149+x1148);
evalcond[3]=((((-1.0)*x1156))+x1154+x1155+x1153);
evalcond[4]=(((x1146*x1160))+((r00*x1158))+(((-1.0)*r01*x1159))+(((-1.0)*r02*x1157)));
evalcond[5]=((((-1.0)*r11*x1159))+(((-1.0)*r12*x1157))+((r10*x1158))+((x1142*x1160)));
evalcond[6]=((((-1.0)*x1146*x1161))+(((-1.0)*(1.0)*px))+(((0.10915)*x1142))+(((-0.09465)*x1149))+(((-0.09465)*x1148))+(((0.39225)*x1146*x1152))+(((-0.39225)*x1151)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-1.0)*x1142*x1161))+(((-0.10915)*x1146))+(((-0.09465)*x1153))+(((0.39225)*x1156))+(((-0.39225)*x1155))+(((-0.09465)*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1162=((1.0)*cj5);
IkReal x1163=((1.0)*sj5);
CheckValue<IkReal> x1164=IKPowWithIntegerCheck(IKsign((((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)))),-1);
if(!x1164.valid){
continue;
}
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1163))+(((-1.0)*r11*x1162)))),IkReal(((((-1.0)*r01*x1162))+(((-1.0)*r00*x1163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1164.value)))+(x1165.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1166=(cj5*r01);
IkReal x1167=(r00*sj5);
IkReal x1168=IKcos(j0);
IkReal x1169=(cj1*cj2);
IkReal x1170=(x1168*x1169);
IkReal x1171=(sj1*sj2*x1168);
IkReal x1172=(cj5*r11);
IkReal x1173=(r10*sj5);
IkReal x1174=IKsin(j0);
IkReal x1175=(x1169*x1174);
IkReal x1176=(sj1*sj2*x1174);
IkReal x1177=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1171))+x1166+x1167+x1170);
evalcond[1]=(x1173+x1172+x1175+(((-1.0)*x1176)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*x1168*x1177))+(((-0.09465)*x1166))+(((-0.09465)*x1167))+(((0.10915)*x1174))+(((0.39225)*x1171))+(((-0.39225)*x1170)));
evalcond[3]=((((-0.09465)*x1172))+(((-1.0)*(1.0)*py))+(((-0.10915)*x1168))+(((0.39225)*x1176))+(((-1.0)*x1174*x1177))+(((-0.39225)*x1175))+(((-0.09465)*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1178=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1178;
j4eval[1]=IKsign(x1178);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1179=((1.0)*sj5);
IkReal x1180=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1179)));
j4eval[0]=x1180;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1179))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1181=((1.0)*cj5);
IkReal x1182=((((-1.0)*r21*x1181))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x1182;
j4eval[1]=IKsign(x1182);
j4eval[2]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1181))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1181))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1183=((1.0)*cj5);
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1183)))),-1);
if(!x1184.valid){
continue;
}
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1183))+(((-1.0)*cj0*r00*x1183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1184.value)))+(x1185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1186=IKcos(j4);
IkReal x1187=((1.0)*r22);
IkReal x1188=IKsin(j4);
IkReal x1189=(sj5*x1188);
IkReal x1190=((1.0)*cj5*x1188);
IkReal x1191=((1.0)*r02);
IkReal x1192=((1.0)*r12);
IkReal x1193=(cj5*x1186);
IkReal x1194=((1.0)*sj5*x1186);
IkReal x1195=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1186*x1187))+(((-1.0)*r20*x1190))+((r21*x1189)));
evalcond[1]=((((-1.0)*r00*x1190))+((r01*x1189))+(((-1.0)*x1186*x1191))+sj0);
evalcond[2]=((((-1.0)*x1186*x1192))+((r11*x1189))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r10*x1190)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1193))+(((-1.0)*r21*x1194))+((sj1*sj2))+(((-1.0)*x1187*x1188)));
evalcond[4]=(((cj0*x1195))+(((-1.0)*x1188*x1191))+((r00*x1193))+(((-1.0)*r01*x1194)));
evalcond[5]=((((-1.0)*x1188*x1192))+((sj0*x1195))+(((-1.0)*r11*x1194))+((r10*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1196=((1.0)*cj0);
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1196)),IkReal(((((-1.0)*r21*sj5*x1196))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1197.value)+(((1.5707963267949)*(x1198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1199=IKcos(j4);
IkReal x1200=((1.0)*r22);
IkReal x1201=IKsin(j4);
IkReal x1202=(sj5*x1201);
IkReal x1203=((1.0)*cj5*x1201);
IkReal x1204=((1.0)*r02);
IkReal x1205=((1.0)*r12);
IkReal x1206=(cj5*x1199);
IkReal x1207=((1.0)*sj5*x1199);
IkReal x1208=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r20*x1203))+((r21*x1202))+(((-1.0)*x1199*x1200)));
evalcond[1]=(((r01*x1202))+sj0+(((-1.0)*x1199*x1204))+(((-1.0)*r00*x1203)));
evalcond[2]=(((r11*x1202))+(((-1.0)*r10*x1203))+(((-1.0)*x1199*x1205))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1200*x1201))+((sj1*sj2))+((r20*x1206))+(((-1.0)*r21*x1207)));
evalcond[4]=((((-1.0)*x1201*x1204))+((r00*x1206))+(((-1.0)*r01*x1207))+((cj0*x1208)));
evalcond[5]=((((-1.0)*x1201*x1205))+(((-1.0)*r11*x1207))+((sj0*x1208))+((r10*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1209 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1209.valid){
continue;
}
CheckValue<IkReal> x1210=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1209.value)+(((1.5707963267949)*(x1210.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1211=IKcos(j4);
IkReal x1212=((1.0)*r22);
IkReal x1213=IKsin(j4);
IkReal x1214=(sj5*x1213);
IkReal x1215=((1.0)*cj5*x1213);
IkReal x1216=((1.0)*r02);
IkReal x1217=((1.0)*r12);
IkReal x1218=(cj5*x1211);
IkReal x1219=((1.0)*sj5*x1211);
IkReal x1220=IKsin((j1+j2));
evalcond[0]=(((r21*x1214))+(((-1.0)*r20*x1215))+(((-1.0)*x1211*x1212)));
evalcond[1]=((((-1.0)*x1211*x1216))+sj0+((r01*x1214))+(((-1.0)*r00*x1215)));
evalcond[2]=(((r11*x1214))+(((-1.0)*x1211*x1217))+(((-1.0)*r10*x1215))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((r20*x1218))+(((-1.0)*x1212*x1213))+(((-1.0)*r21*x1219))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r01*x1219))+((r00*x1218))+(((-1.0)*x1213*x1216))+((cj0*x1220)));
evalcond[5]=(((sj0*x1220))+((r10*x1218))+(((-1.0)*r11*x1219))+(((-1.0)*x1213*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1221=(((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
j0eval[0]=x1221;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1221);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1222=r21*r21;
IkReal x1223=(cj5*r20);
IkReal x1224=cj5*cj5;
IkReal x1225=((((-1.0)*x1222*x1224))+((x1224*(r20*r20)))+(r22*r22)+x1222+(((-2.0)*r21*sj5*x1223)));
IkReal x1226=(cj1*cj2);
IkReal x1227=((1.0)*sj1*sj2);
IkReal x1228=(r21*sj5);
j4eval[0]=x1225;
j4eval[1]=IKsign(x1225);
j4eval[2]=((IKabs((((sj1*sj2*x1223))+(((-1.0)*cj1*cj2*x1223))+((x1226*x1228))+(((-1.0)*x1227*x1228)))))+(IKabs(((((-1.0)*r22*x1227))+((r22*x1226))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=(((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1229=(cj1*cj2);
IkReal x1230=(sj1*sj2);
IkReal x1231=((20000.0)*px);
IkReal x1232=((8500.0)*cj1);
IkReal x1233=(cj5*r01);
IkReal x1234=(r00*sj5);
IkReal x1235=((9738.0)*cj1*cj2);
IkReal x1236=((9738.0)*sj1*sj2);
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(((((2183.0)*x1229))+(((-2183.0)*x1230))),-1);
if(!x1237.valid){
continue;
}
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(((((-1.0)*x1230))+x1229),-1);
if(!x1238.valid){
continue;
}
if( IKabs(((x1237.value)*((((x1233*x1235))+((x1229*x1231))+((x1234*x1235))+(((-1.0)*x1234*x1236))+(((-1.0)*x1230*x1231))+(((-1.0)*x1233*x1236))+((x1232*x1233))+((x1232*x1234)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1238.value)*((x1233+x1234)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1237.value)*((((x1233*x1235))+((x1229*x1231))+((x1234*x1235))+(((-1.0)*x1234*x1236))+(((-1.0)*x1230*x1231))+(((-1.0)*x1233*x1236))+((x1232*x1233))+((x1232*x1234))))))+IKsqr(((x1238.value)*((x1233+x1234))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1237.value)*((((x1233*x1235))+((x1229*x1231))+((x1234*x1235))+(((-1.0)*x1234*x1236))+(((-1.0)*x1230*x1231))+(((-1.0)*x1233*x1236))+((x1232*x1233))+((x1232*x1234))))), ((x1238.value)*((x1233+x1234))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1239=(cj5*r01);
IkReal x1240=(r00*sj5);
IkReal x1241=IKcos(j0);
IkReal x1242=(cj1*cj2);
IkReal x1243=(x1241*x1242);
IkReal x1244=(sj1*sj2*x1241);
IkReal x1245=(cj5*r11);
IkReal x1246=(r10*sj5);
IkReal x1247=IKsin(j0);
IkReal x1248=(x1242*x1247);
IkReal x1249=(sj1*sj2*x1247);
IkReal x1250=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1240))+(((-1.0)*x1239))+(((-1.0)*x1244))+x1243);
evalcond[1]=((((-1.0)*x1246))+(((-1.0)*x1245))+(((-1.0)*x1249))+x1248);
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.09465)*x1239))+(((0.10915)*x1247))+(((0.39225)*x1244))+(((-0.09465)*x1240))+(((-0.39225)*x1243))+(((-1.0)*x1241*x1250)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((0.39225)*x1249))+(((-0.10915)*x1241))+(((-1.0)*x1247*x1250))+(((-0.09465)*x1245))+(((-0.39225)*x1248))+(((-0.09465)*x1246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1251=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1251;
j4eval[1]=IKsign(x1251);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1252=((1.0)*sj5);
IkReal x1253=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1252)));
j4eval[0]=x1253;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1252))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1254=((1.0)*cj5);
IkReal x1255=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1254)));
j4eval[0]=x1255;
j4eval[1]=IKsign(x1255);
j4eval[2]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1254))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1254)))))+(IKabs((((cj0*r02))+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1256=((1.0)*cj5);
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1256))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1256)))),-1);
if(!x1258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1257.value)+(((1.5707963267949)*(x1258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j4);
IkReal x1260=((1.0)*x1259);
IkReal x1261=IKsin(j4);
IkReal x1262=(r21*sj5);
IkReal x1263=(cj5*r20);
IkReal x1264=((1.0)*x1261);
IkReal x1265=(r01*sj5);
IkReal x1266=(cj5*r00);
IkReal x1267=(r11*sj5);
IkReal x1268=(cj5*r10);
IkReal x1269=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1260))+((x1261*x1262))+(((-1.0)*x1263*x1264)));
evalcond[1]=(((x1261*x1265))+sj0+(((-1.0)*r02*x1260))+(((-1.0)*x1264*x1266)));
evalcond[2]=((((-1.0)*x1264*x1268))+((x1261*x1267))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1260)));
evalcond[3]=(((r22*x1261))+(((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1260*x1263))+((x1259*x1262))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1260*x1266))+((cj0*x1269))+((r02*x1261))+((x1259*x1265)));
evalcond[5]=(((x1259*x1267))+((r12*x1261))+((sj0*x1269))+(((-1.0)*x1260*x1268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1270=((1.0)*cj0);
CheckValue<IkReal> x1271 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1270)),IkReal(((((-1.0)*r21*sj5*x1270))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1271.value)+(((1.5707963267949)*(x1272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1273=IKcos(j4);
IkReal x1274=((1.0)*x1273);
IkReal x1275=IKsin(j4);
IkReal x1276=(r21*sj5);
IkReal x1277=(cj5*r20);
IkReal x1278=((1.0)*x1275);
IkReal x1279=(r01*sj5);
IkReal x1280=(cj5*r00);
IkReal x1281=(r11*sj5);
IkReal x1282=(cj5*r10);
IkReal x1283=IKsin((j1+j2));
evalcond[0]=(((x1275*x1276))+(((-1.0)*x1277*x1278))+(((-1.0)*r22*x1274)));
evalcond[1]=((((-1.0)*x1278*x1280))+((x1275*x1279))+sj0+(((-1.0)*r02*x1274)));
evalcond[2]=((((-1.0)*r12*x1274))+(((-1.0)*x1278*x1282))+((x1275*x1281))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1274*x1277))+((r22*x1275))+((sj1*sj2))+((x1273*x1276)));
evalcond[4]=(((r02*x1275))+((cj0*x1283))+(((-1.0)*x1274*x1280))+((x1273*x1279)));
evalcond[5]=(((r12*x1275))+(((-1.0)*x1274*x1282))+((sj0*x1283))+((x1273*x1281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1284.value)+(((1.5707963267949)*(x1285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1286=IKcos(j4);
IkReal x1287=((1.0)*x1286);
IkReal x1288=IKsin(j4);
IkReal x1289=(r21*sj5);
IkReal x1290=(cj5*r20);
IkReal x1291=((1.0)*x1288);
IkReal x1292=(r01*sj5);
IkReal x1293=(cj5*r00);
IkReal x1294=(r11*sj5);
IkReal x1295=(cj5*r10);
IkReal x1296=IKsin((j1+j2));
evalcond[0]=(((x1288*x1289))+(((-1.0)*x1290*x1291))+(((-1.0)*r22*x1287)));
evalcond[1]=(((x1288*x1292))+(((-1.0)*r02*x1287))+sj0+(((-1.0)*x1291*x1293)));
evalcond[2]=((((-1.0)*x1291*x1295))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1287))+((x1288*x1294)));
evalcond[3]=((((-1.0)*x1287*x1290))+(((-1.0)*(1.0)*cj1*cj2))+((x1286*x1289))+((r22*x1288))+((sj1*sj2)));
evalcond[4]=(((cj0*x1296))+(((-1.0)*x1287*x1293))+((r02*x1288))+((x1286*x1292)));
evalcond[5]=(((x1286*x1294))+(((-1.0)*x1287*x1295))+((r12*x1288))+((sj0*x1296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1297=r21*r21;
IkReal x1298=(cj5*r20);
IkReal x1299=cj5*cj5;
IkReal x1300=(cj1*cj2);
IkReal x1301=((1.0)*sj1*sj2);
IkReal x1302=(r21*sj5);
CheckValue<IkReal> x1303 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1301))+((r22*x1300)))),IkReal((((x1300*x1302))+((sj1*sj2*x1298))+(((-1.0)*cj1*cj2*x1298))+(((-1.0)*x1301*x1302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1303.valid){
continue;
}
CheckValue<IkReal> x1304=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1297*x1299))+x1297+(r22*r22)+(((-2.0)*r21*sj5*x1298))+((x1299*(r20*r20))))),-1);
if(!x1304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1303.value)+(((1.5707963267949)*(x1304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1305=IKcos(j4);
IkReal x1306=((1.0)*x1305);
IkReal x1307=IKsin(j4);
IkReal x1308=(r21*sj5);
IkReal x1309=(cj5*r20);
evalcond[0]=((((-1.0)*r22*x1306))+(((-1.0)*x1307*x1309))+((x1307*x1308)));
evalcond[1]=((((-1.0)*(1.0)*cj1*cj2))+((r22*x1307))+((x1305*x1308))+(((-1.0)*x1306*x1309))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1310=(cj5*sj4);
IkReal x1311=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x1310))+(((-1.0)*r01*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1310))+((r11*x1311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x1310))+(((-1.0)*r01*x1311))))+IKsqr(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1310))+((r11*x1311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x1310))+(((-1.0)*r01*x1311))), ((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1310))+((r11*x1311))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1312=IKsin(j0);
IkReal x1313=((1.0)*cj4);
IkReal x1314=(sj4*sj5);
IkReal x1315=((1.0)*cj5*sj4);
IkReal x1316=IKcos(j0);
IkReal x1317=((1.0)*x1316);
IkReal x1318=(cj4*sj5);
IkReal x1319=((1.0)*cj4*cj5);
IkReal x1320=IKsin((j1+j2));
IkReal x1321=(cj5*r01);
IkReal x1322=(r00*sj5);
IkReal x1323=(cj1*cj2);
IkReal x1324=(x1316*x1323);
IkReal x1325=(sj1*sj2);
IkReal x1326=(cj5*r11);
IkReal x1327=(r10*sj5);
IkReal x1328=(x1312*x1323);
IkReal x1329=(sj1*sj2*x1312);
IkReal x1330=((0.425)*cj1);
evalcond[0]=(((r01*x1314))+(((-1.0)*r00*x1315))+(((-1.0)*r02*x1313))+x1312);
evalcond[1]=((((-1.0)*r12*x1313))+(((-1.0)*x1317))+(((-1.0)*r10*x1315))+((r11*x1314)));
evalcond[2]=(((x1316*x1320))+((r01*x1318))+(((-1.0)*r00*x1319))+((r02*sj4)));
evalcond[3]=(x1324+(((-1.0)*x1321))+(((-1.0)*x1317*x1325))+(((-1.0)*x1322)));
evalcond[4]=(((r12*sj4))+((r11*x1318))+(((-1.0)*r10*x1319))+((x1312*x1320)));
evalcond[5]=(x1328+(((-1.0)*x1329))+(((-1.0)*x1326))+(((-1.0)*x1327)));
evalcond[6]=((((0.10915)*x1312))+(((-1.0)*(1.0)*px))+(((-0.09465)*x1322))+(((-0.39225)*x1324))+(((0.39225)*x1316*x1325))+(((-0.09465)*x1321))+(((-1.0)*x1316*x1330)));
evalcond[7]=((((0.39225)*x1329))+(((-1.0)*(1.0)*py))+(((-0.09465)*x1326))+(((-0.10915)*x1316))+(((-0.09465)*x1327))+(((-0.39225)*x1328))+(((-1.0)*x1312*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1331=IKPowWithIntegerCheck(IKsign((((cj1*cj2))+(((-1.0)*(1.0)*sj1*sj2)))),-1);
if(!x1331.valid){
continue;
}
CheckValue<IkReal> x1332 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1332.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1331.value)))+(x1332.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1333=(cj5*r01);
IkReal x1334=(r00*sj5);
IkReal x1335=IKcos(j0);
IkReal x1336=(cj1*cj2);
IkReal x1337=(x1335*x1336);
IkReal x1338=(sj1*sj2*x1335);
IkReal x1339=(cj5*r11);
IkReal x1340=(r10*sj5);
IkReal x1341=IKsin(j0);
IkReal x1342=(x1336*x1341);
IkReal x1343=(sj1*sj2*x1341);
IkReal x1344=((0.425)*cj1);
evalcond[0]=((((-1.0)*x1338))+(((-1.0)*x1334))+x1337+(((-1.0)*x1333)));
evalcond[1]=((((-1.0)*x1339))+(((-1.0)*x1340))+(((-1.0)*x1343))+x1342);
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.09465)*x1334))+(((-1.0)*x1335*x1344))+(((-0.39225)*x1337))+(((0.10915)*x1341))+(((-0.09465)*x1333))+(((0.39225)*x1338)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.09465)*x1340))+(((0.39225)*x1343))+(((-0.10915)*x1335))+(((-1.0)*x1341*x1344))+(((-0.39225)*x1342))+(((-0.09465)*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1345=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1345;
j4eval[1]=IKsign(x1345);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1346=((1.0)*sj5);
IkReal x1347=((((-1.0)*r00*x1346))+(((-1.0)*(1.0)*cj5*r01)));
j4eval[0]=x1347;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1346))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x1348=((1.0)*cj5);
IkReal x1349=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1348)));
j4eval[0]=x1349;
j4eval[1]=IKsign(x1349);
j4eval[2]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1348))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1348))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1350=((1.0)*cj5);
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1350))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1350)))),-1);
if(!x1352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1351.value)+(((1.5707963267949)*(x1352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1353=IKcos(j4);
IkReal x1354=((1.0)*x1353);
IkReal x1355=IKsin(j4);
IkReal x1356=(r21*sj5);
IkReal x1357=(cj5*r20);
IkReal x1358=((1.0)*x1355);
IkReal x1359=(r01*sj5);
IkReal x1360=(cj5*r00);
IkReal x1361=(r11*sj5);
IkReal x1362=(cj5*r10);
IkReal x1363=IKsin((j1+j2));
evalcond[0]=((((-1.0)*r22*x1354))+(((-1.0)*x1357*x1358))+((x1355*x1356)));
evalcond[1]=(((x1355*x1359))+sj0+(((-1.0)*x1358*x1360))+(((-1.0)*r02*x1354)));
evalcond[2]=(((x1355*x1361))+(((-1.0)*x1358*x1362))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1354)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+((x1353*x1356))+(((-1.0)*x1354*x1357))+((r22*x1355))+((sj1*sj2)));
evalcond[4]=(((cj0*x1363))+((r02*x1355))+(((-1.0)*x1354*x1360))+((x1353*x1359)));
evalcond[5]=(((sj0*x1363))+(((-1.0)*x1354*x1362))+((r12*x1355))+((x1353*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1364=((1.0)*cj0);
CheckValue<IkReal> x1365 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1364)),IkReal(((((-1.0)*r21*sj5*x1364))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1365.valid){
continue;
}
CheckValue<IkReal> x1366=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1365.value)+(((1.5707963267949)*(x1366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1367=IKcos(j4);
IkReal x1368=((1.0)*x1367);
IkReal x1369=IKsin(j4);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=((1.0)*x1369);
IkReal x1373=(r01*sj5);
IkReal x1374=(cj5*r00);
IkReal x1375=(r11*sj5);
IkReal x1376=(cj5*r10);
IkReal x1377=IKsin((j1+j2));
evalcond[0]=((((-1.0)*x1371*x1372))+(((-1.0)*r22*x1368))+((x1369*x1370)));
evalcond[1]=((((-1.0)*r02*x1368))+(((-1.0)*x1372*x1374))+sj0+((x1369*x1373)));
evalcond[2]=(((x1369*x1375))+(((-1.0)*(1.0)*cj0))+(((-1.0)*x1372*x1376))+(((-1.0)*r12*x1368)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1368*x1371))+((r22*x1369))+((x1367*x1370))+((sj1*sj2)));
evalcond[4]=(((cj0*x1377))+(((-1.0)*x1368*x1374))+((r02*x1369))+((x1367*x1373)));
evalcond[5]=((((-1.0)*x1368*x1376))+((x1367*x1375))+((sj0*x1377))+((r12*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1378 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1378.valid){
continue;
}
CheckValue<IkReal> x1379=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1379.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1378.value)+(((1.5707963267949)*(x1379.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1380=IKcos(j4);
IkReal x1381=((1.0)*x1380);
IkReal x1382=IKsin(j4);
IkReal x1383=(r21*sj5);
IkReal x1384=(cj5*r20);
IkReal x1385=((1.0)*x1382);
IkReal x1386=(r01*sj5);
IkReal x1387=(cj5*r00);
IkReal x1388=(r11*sj5);
IkReal x1389=(cj5*r10);
IkReal x1390=IKsin((j1+j2));
evalcond[0]=(((x1382*x1383))+(((-1.0)*x1384*x1385))+(((-1.0)*r22*x1381)));
evalcond[1]=((((-1.0)*x1385*x1387))+sj0+(((-1.0)*r02*x1381))+((x1382*x1386)));
evalcond[2]=((((-1.0)*x1385*x1389))+((x1382*x1388))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1381)));
evalcond[3]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*x1381*x1384))+((x1380*x1383))+((sj1*sj2))+((r22*x1382)));
evalcond[4]=((((-1.0)*x1381*x1387))+((cj0*x1390))+((r02*x1382))+((x1380*x1386)));
evalcond[5]=((((-1.0)*x1381*x1389))+((x1380*x1388))+((r12*x1382))+((sj0*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1391=(((cj1*sj2))+((cj2*sj1)));
IkReal x1392=((1.0)*cj5);
IkReal x1393=((1.0)*sj5);
j0eval[0]=x1391;
j0eval[1]=IKsign(x1391);
j0eval[2]=((IKabs(((((-1.0)*r00*x1393))+(((-1.0)*r01*x1392)))))+(IKabs(((((-1.0)*r11*x1392))+(((-1.0)*r10*x1393))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1394=r21*r21;
IkReal x1395=(cj5*r20);
IkReal x1396=cj5*cj5;
IkReal x1397=((((-2.0)*r21*sj5*x1395))+((x1396*(r20*r20)))+(((-1.0)*x1394*x1396))+x1394+(r22*r22));
IkReal x1398=(cj1*sj2);
IkReal x1399=(cj2*sj1);
IkReal x1400=((1.0)*r21*sj5);
j4eval[0]=x1397;
j4eval[1]=IKsign(x1397);
j4eval[2]=((IKabs((((x1395*x1398))+(((-1.0)*x1399*x1400))+((x1395*x1399))+(((-1.0)*x1398*x1400)))))+(IKabs((((r22*x1398))+((r22*x1399))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1401=(cj2*sj1);
IkReal x1402=(cj1*sj2);
IkReal x1403=((1.0)*(IKcos((j1+j2))));
j0eval[0]=((((-1.0)*x1401*x1403))+(((-1.0)*x1402*x1403))+(((-1.08349267049076)*cj1*x1401))+(((-1.0)*(1.08349267049076)*sj2*(cj1*cj1))));
j0eval[1]=(x1402+x1401);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1404=(cj2*sj1);
IkReal x1405=(cj1*sj2);
IkReal x1406=((0.39225)*(IKcos((j1+j2))));
IkReal x1407=(cj5*r01);
IkReal x1408=(r00*sj5);
IkReal x1409=(cj5*r11);
IkReal x1410=((0.09465)*cj1*sj2);
IkReal x1411=(r10*sj5);
IkReal x1412=((0.09465)*cj2*sj1);
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(((((-1.0)*x1404*x1406))+(((-1.0)*(0.425)*sj2*(cj1*cj1)))+(((-1.0)*x1405*x1406))+(((-0.425)*cj1*x1404))),-1);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck((x1405+x1404),-1);
if(!x1414.valid){
continue;
}
if( IKabs(((x1413.value)*((((x1409*x1410))+((x1409*x1412))+(((-0.10915)*x1408))+((x1411*x1412))+((py*x1404))+((py*x1405))+((x1410*x1411))+(((-0.10915)*x1407)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1414.value)*(((((-1.0)*x1407))+(((-1.0)*x1408)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1413.value)*((((x1409*x1410))+((x1409*x1412))+(((-0.10915)*x1408))+((x1411*x1412))+((py*x1404))+((py*x1405))+((x1410*x1411))+(((-0.10915)*x1407))))))+IKsqr(((x1414.value)*(((((-1.0)*x1407))+(((-1.0)*x1408))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1413.value)*((((x1409*x1410))+((x1409*x1412))+(((-0.10915)*x1408))+((x1411*x1412))+((py*x1404))+((py*x1405))+((x1410*x1411))+(((-0.10915)*x1407))))), ((x1414.value)*(((((-1.0)*x1407))+(((-1.0)*x1408))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1415=(cj5*r01);
IkReal x1416=(r00*sj5);
IkReal x1417=IKcos(j0);
IkReal x1418=(cj1*sj2);
IkReal x1419=(cj2*sj1);
IkReal x1420=(cj5*r11);
IkReal x1421=(r10*sj5);
IkReal x1422=IKsin(j0);
IkReal x1423=((0.425)*cj1);
IkReal x1424=x1406;
evalcond[0]=(((x1417*x1419))+((x1417*x1418))+x1415+x1416);
evalcond[1]=(((x1419*x1422))+x1421+x1420+((x1418*x1422)));
evalcond[2]=((((-0.09465)*x1415))+(((-1.0)*(1.0)*px))+(((-0.09465)*x1416))+(((0.10915)*x1422))+(((-1.0)*x1417*x1423))+(((-1.0)*x1417*x1424)));
evalcond[3]=((((-1.0)*x1422*x1423))+(((-0.10915)*x1417))+(((-1.0)*(1.0)*py))+(((-0.09465)*x1420))+(((-1.0)*x1422*x1424))+(((-0.09465)*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1425=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1425;
j4eval[1]=IKsign(x1425);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1426=((1.0)*sj5);
IkReal x1427=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1426)));
j4eval[0]=x1427;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1426))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1427);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1428=((1.0)*cj5);
IkReal x1429=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1428)));
j4eval[0]=x1429;
j4eval[1]=IKsign(x1429);
j4eval[2]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1428))+(((-1.0)*cj0*r00*x1428))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=((1.0)*cj5);
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1430))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1430)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1430)))),-1);
if(!x1432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1431.value)+(((1.5707963267949)*(x1432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1433=IKcos(j4);
IkReal x1434=((1.0)*x1433);
IkReal x1435=IKsin(j4);
IkReal x1436=(r21*sj5);
IkReal x1437=(cj5*r20);
IkReal x1438=((1.0)*x1435);
IkReal x1439=(r01*sj5);
IkReal x1440=(cj5*r00);
IkReal x1441=(r11*sj5);
IkReal x1442=(cj5*r10);
IkReal x1443=IKcos((j1+j2));
evalcond[0]=(((x1435*x1436))+(((-1.0)*r22*x1434))+(((-1.0)*x1437*x1438)));
evalcond[1]=(((x1435*x1439))+sj0+(((-1.0)*x1438*x1440))+(((-1.0)*r02*x1434)));
evalcond[2]=(((x1435*x1441))+(((-1.0)*r12*x1434))+(((-1.0)*(1.0)*cj0))+(((-1.0)*x1438*x1442)));
evalcond[3]=(((x1433*x1436))+((cj1*sj2))+((cj2*sj1))+((r22*x1435))+(((-1.0)*x1434*x1437)));
evalcond[4]=(((r02*x1435))+((cj0*x1443))+((x1433*x1439))+(((-1.0)*x1434*x1440)));
evalcond[5]=(((r12*x1435))+((x1433*x1441))+(((-1.0)*x1434*x1442))+((sj0*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1444=((1.0)*cj0);
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1444)),IkReal((((cj0*cj5*r20))+(((-1.0)*r21*sj5*x1444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1445.value)+(((1.5707963267949)*(x1446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1447=IKcos(j4);
IkReal x1448=((1.0)*x1447);
IkReal x1449=IKsin(j4);
IkReal x1450=(r21*sj5);
IkReal x1451=(cj5*r20);
IkReal x1452=((1.0)*x1449);
IkReal x1453=(r01*sj5);
IkReal x1454=(cj5*r00);
IkReal x1455=(r11*sj5);
IkReal x1456=(cj5*r10);
IkReal x1457=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1448))+(((-1.0)*x1451*x1452))+((x1449*x1450)));
evalcond[1]=((((-1.0)*x1452*x1454))+(((-1.0)*r02*x1448))+sj0+((x1449*x1453)));
evalcond[2]=((((-1.0)*x1452*x1456))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1448))+((x1449*x1455)));
evalcond[3]=(((x1447*x1450))+(((-1.0)*x1448*x1451))+((cj1*sj2))+((r22*x1449))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1448*x1454))+((x1447*x1453))+((r02*x1449))+((cj0*x1457)));
evalcond[5]=(((sj0*x1457))+((r12*x1449))+((x1447*x1455))+(((-1.0)*x1448*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
CheckValue<IkReal> x1459=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1458.value)+(((1.5707963267949)*(x1459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1460=IKcos(j4);
IkReal x1461=((1.0)*x1460);
IkReal x1462=IKsin(j4);
IkReal x1463=(r21*sj5);
IkReal x1464=(cj5*r20);
IkReal x1465=((1.0)*x1462);
IkReal x1466=(r01*sj5);
IkReal x1467=(cj5*r00);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r10);
IkReal x1470=IKcos((j1+j2));
evalcond[0]=(((x1462*x1463))+(((-1.0)*r22*x1461))+(((-1.0)*x1464*x1465)));
evalcond[1]=((((-1.0)*r02*x1461))+((x1462*x1466))+sj0+(((-1.0)*x1465*x1467)));
evalcond[2]=((((-1.0)*x1465*x1469))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r12*x1461))+((x1462*x1468)));
evalcond[3]=(((r22*x1462))+((cj1*sj2))+((x1460*x1463))+(((-1.0)*x1461*x1464))+((cj2*sj1)));
evalcond[4]=(((x1460*x1466))+(((-1.0)*x1461*x1467))+((r02*x1462))+((cj0*x1470)));
evalcond[5]=(((x1460*x1468))+(((-1.0)*x1461*x1469))+((r12*x1462))+((sj0*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1471=r21*r21;
IkReal x1472=(cj5*r20);
IkReal x1473=cj5*cj5;
IkReal x1474=((1.0)*r22);
IkReal x1475=(cj1*sj2);
IkReal x1476=(cj2*sj1);
IkReal x1477=((1.0)*r21*sj5);
CheckValue<IkReal> x1478=IKPowWithIntegerCheck(IKsign(((((-2.0)*r21*sj5*x1472))+((x1473*(r20*r20)))+x1471+(((-1.0)*x1471*x1473))+(r22*r22))),-1);
if(!x1478.valid){
continue;
}
CheckValue<IkReal> x1479 = IKatan2WithCheck(IkReal(((((-1.0)*x1474*x1475))+(((-1.0)*x1474*x1476)))),IkReal((((x1472*x1476))+((x1472*x1475))+(((-1.0)*x1476*x1477))+(((-1.0)*x1475*x1477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1478.value)))+(x1479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1480=IKcos(j4);
IkReal x1481=((1.0)*x1480);
IkReal x1482=IKsin(j4);
IkReal x1483=(r21*sj5);
IkReal x1484=(cj5*r20);
evalcond[0]=(((x1482*x1483))+(((-1.0)*x1482*x1484))+(((-1.0)*r22*x1481)));
evalcond[1]=(((r22*x1482))+((cj1*sj2))+(((-1.0)*x1481*x1484))+((x1480*x1483))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1485=(cj5*sj4);
IkReal x1486=(sj4*sj5);
if( IKabs((((cj4*r02))+(((-1.0)*r01*x1486))+((r00*x1485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1486))+(((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+(((-1.0)*r01*x1486))+((r00*x1485))))+IKsqr((((r11*x1486))+(((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+(((-1.0)*r01*x1486))+((r00*x1485))), (((r11*x1486))+(((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1485))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1487=IKsin(j0);
IkReal x1488=((1.0)*cj4);
IkReal x1489=(sj4*sj5);
IkReal x1490=((1.0)*cj5*sj4);
IkReal x1491=IKcos(j0);
IkReal x1492=(cj5*r01);
IkReal x1493=(r00*sj5);
IkReal x1494=(cj1*sj2);
IkReal x1495=(cj2*sj1);
IkReal x1496=(cj5*r11);
IkReal x1497=(r10*sj5);
IkReal x1498=(cj4*sj5);
IkReal x1499=((1.0)*cj4*cj5);
IkReal x1500=IKcos((j1+j2));
IkReal x1501=(x1491*x1500);
IkReal x1502=(x1487*x1500);
IkReal x1503=((0.425)*cj1);
evalcond[0]=(((r01*x1489))+(((-1.0)*r02*x1488))+(((-1.0)*r00*x1490))+x1487);
evalcond[1]=((((-1.0)*r12*x1488))+(((-1.0)*r10*x1490))+(((-1.0)*x1491))+((r11*x1489)));
evalcond[2]=(x1492+x1493+((x1491*x1495))+((x1491*x1494)));
evalcond[3]=(x1497+x1496+((x1487*x1494))+((x1487*x1495)));
evalcond[4]=(((r01*x1498))+(((-1.0)*r00*x1499))+((r02*sj4))+x1501);
evalcond[5]=(((r12*sj4))+(((-1.0)*r10*x1499))+((r11*x1498))+x1502);
evalcond[6]=((((-1.0)*(1.0)*px))+(((0.10915)*x1487))+(((-0.09465)*x1492))+(((-1.0)*x1491*x1503))+(((-0.09465)*x1493))+(((-0.39225)*x1501)));
evalcond[7]=((((-1.0)*x1487*x1503))+(((-1.0)*(1.0)*py))+(((-0.10915)*x1491))+(((-0.09465)*x1496))+(((-0.09465)*x1497))+(((-0.39225)*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1504=((1.0)*cj5);
IkReal x1505=((1.0)*sj5);
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign((((cj1*sj2))+((cj2*sj1)))),-1);
if(!x1506.valid){
continue;
}
CheckValue<IkReal> x1507 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1504))+(((-1.0)*r10*x1505)))),IkReal(((((-1.0)*r01*x1504))+(((-1.0)*r00*x1505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1507.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1506.value)))+(x1507.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1508=(cj5*r01);
IkReal x1509=(r00*sj5);
IkReal x1510=IKcos(j0);
IkReal x1511=(cj1*sj2);
IkReal x1512=(cj2*sj1);
IkReal x1513=(cj5*r11);
IkReal x1514=(r10*sj5);
IkReal x1515=IKsin(j0);
IkReal x1516=((0.425)*cj1);
IkReal x1517=((0.39225)*(IKcos((j1+j2))));
evalcond[0]=(((x1510*x1512))+((x1510*x1511))+x1508+x1509);
evalcond[1]=(x1514+x1513+((x1511*x1515))+((x1512*x1515)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.09465)*x1508))+(((-0.09465)*x1509))+(((-1.0)*x1510*x1516))+(((-1.0)*x1510*x1517))+(((0.10915)*x1515)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-0.09465)*x1513))+(((-0.10915)*x1510))+(((-0.09465)*x1514))+(((-1.0)*x1515*x1516))+(((-1.0)*x1515*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1518=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1518;
j4eval[1]=IKsign(x1518);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1519=((1.0)*sj5);
IkReal x1520=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1519)));
j4eval[0]=x1520;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1519))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1521=((1.0)*cj5);
IkReal x1522=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1521)));
j4eval[0]=x1522;
j4eval[1]=IKsign(x1522);
j4eval[2]=((IKabs((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1521))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x1521)))))+(IKabs((((cj0*r02))+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1523=((1.0)*cj5);
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1523))+(((-1.0)*cj0*r00*x1523)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1523)))),-1);
if(!x1525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1524.value)+(((1.5707963267949)*(x1525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1526=IKcos(j4);
IkReal x1527=((1.0)*x1526);
IkReal x1528=IKsin(j4);
IkReal x1529=(r21*sj5);
IkReal x1530=(cj5*r20);
IkReal x1531=((1.0)*x1528);
IkReal x1532=(r01*sj5);
IkReal x1533=(cj5*r00);
IkReal x1534=(r11*sj5);
IkReal x1535=(cj5*r10);
IkReal x1536=IKcos((j1+j2));
evalcond[0]=(((x1528*x1529))+(((-1.0)*x1530*x1531))+(((-1.0)*r22*x1527)));
evalcond[1]=((((-1.0)*x1531*x1533))+((x1528*x1532))+(((-1.0)*r02*x1527))+sj0);
evalcond[2]=((((-1.0)*r12*x1527))+(((-1.0)*x1531*x1535))+((x1528*x1534))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=(((x1526*x1529))+(((-1.0)*x1527*x1530))+((cj1*sj2))+((r22*x1528))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1527*x1533))+((r02*x1528))+((cj0*x1536))+((x1526*x1532)));
evalcond[5]=(((r12*x1528))+(((-1.0)*x1527*x1535))+((sj0*x1536))+((x1526*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1537=((1.0)*cj0);
CheckValue<IkReal> x1538 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1537)),IkReal(((((-1.0)*r21*sj5*x1537))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1538.value)+(((1.5707963267949)*(x1539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1540=IKcos(j4);
IkReal x1541=((1.0)*x1540);
IkReal x1542=IKsin(j4);
IkReal x1543=(r21*sj5);
IkReal x1544=(cj5*r20);
IkReal x1545=((1.0)*x1542);
IkReal x1546=(r01*sj5);
IkReal x1547=(cj5*r00);
IkReal x1548=(r11*sj5);
IkReal x1549=(cj5*r10);
IkReal x1550=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r22*x1541))+((x1542*x1543))+(((-1.0)*x1544*x1545)));
evalcond[1]=((((-1.0)*x1545*x1547))+((x1542*x1546))+(((-1.0)*r02*x1541))+sj0);
evalcond[2]=((((-1.0)*x1545*x1549))+((x1542*x1548))+(((-1.0)*r12*x1541))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=(((cj1*sj2))+((x1540*x1543))+(((-1.0)*x1541*x1544))+((r22*x1542))+((cj2*sj1)));
evalcond[4]=(((x1540*x1546))+(((-1.0)*x1541*x1547))+((r02*x1542))+((cj0*x1550)));
evalcond[5]=(((sj0*x1550))+((r12*x1542))+((x1540*x1548))+(((-1.0)*x1541*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1551 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1551.value)+(((1.5707963267949)*(x1552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1553=IKcos(j4);
IkReal x1554=((1.0)*x1553);
IkReal x1555=IKsin(j4);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj5*r20);
IkReal x1558=((1.0)*x1555);
IkReal x1559=(r01*sj5);
IkReal x1560=(cj5*r00);
IkReal x1561=(r11*sj5);
IkReal x1562=(cj5*r10);
IkReal x1563=IKcos((j1+j2));
evalcond[0]=(((x1555*x1556))+(((-1.0)*x1557*x1558))+(((-1.0)*r22*x1554)));
evalcond[1]=(((x1555*x1559))+(((-1.0)*r02*x1554))+sj0+(((-1.0)*x1558*x1560)));
evalcond[2]=((((-1.0)*r12*x1554))+((x1555*x1561))+(((-1.0)*x1558*x1562))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=(((cj1*sj2))+(((-1.0)*x1554*x1557))+((x1553*x1556))+((r22*x1555))+((cj2*sj1)));
evalcond[4]=(((r02*x1555))+(((-1.0)*x1554*x1560))+((x1553*x1559))+((cj0*x1563)));
evalcond[5]=(((sj0*x1563))+((x1553*x1561))+((r12*x1555))+(((-1.0)*x1554*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1564=(((cj1*sj2))+((cj2*sj1)));
j0eval[0]=x1564;
j0eval[1]=((IKabs((((cj5*r01))+((r00*sj5)))))+(IKabs((((r10*sj5))+((cj5*r11))))));
j0eval[2]=IKsign(x1564);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1565=r21*r21;
IkReal x1566=(r21*sj5);
IkReal x1567=cj5*cj5;
IkReal x1568=((((-1.0)*x1565*x1567))+((x1567*(r20*r20)))+(((-2.0)*cj5*r20*x1566))+x1565+(r22*r22));
IkReal x1569=(cj1*sj2);
IkReal x1570=(cj2*sj1);
IkReal x1571=((1.0)*cj5*r20);
j4eval[0]=x1568;
j4eval[1]=IKsign(x1568);
j4eval[2]=((IKabs((((r22*x1570))+((r22*x1569)))))+(IKabs(((((-1.0)*x1569*x1571))+((x1566*x1570))+((x1566*x1569))+(((-1.0)*x1570*x1571))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1572=(cj2*sj1);
IkReal x1573=(cj1*sj2);
IkReal x1574=((1.0)*(IKcos((j1+j2))));
j0eval[0]=((((-1.08349267049076)*cj1*x1572))+(((-1.0)*x1572*x1574))+(((-1.0)*(1.08349267049076)*sj2*(cj1*cj1)))+(((-1.0)*x1573*x1574)));
j0eval[1]=(x1573+x1572);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1575=(cj2*sj1);
IkReal x1576=(cj1*sj2);
IkReal x1577=((0.39225)*(IKcos((j1+j2))));
IkReal x1578=(cj5*r01);
IkReal x1579=(r00*sj5);
IkReal x1580=(cj5*r11);
IkReal x1581=((0.09465)*cj1*sj2);
IkReal x1582=(r10*sj5);
IkReal x1583=((0.09465)*cj2*sj1);
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(((((-1.0)*(0.425)*sj2*(cj1*cj1)))+(((-1.0)*x1576*x1577))+(((-0.425)*cj1*x1575))+(((-1.0)*x1575*x1577))),-1);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585=IKPowWithIntegerCheck((x1576+x1575),-1);
if(!x1585.valid){
continue;
}
if( IKabs(((x1584.value)*((((x1580*x1581))+((x1580*x1583))+((x1581*x1582))+((x1582*x1583))+(((0.10915)*x1578))+((py*x1575))+((py*x1576))+(((0.10915)*x1579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1585.value)*((x1578+x1579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1584.value)*((((x1580*x1581))+((x1580*x1583))+((x1581*x1582))+((x1582*x1583))+(((0.10915)*x1578))+((py*x1575))+((py*x1576))+(((0.10915)*x1579))))))+IKsqr(((x1585.value)*((x1578+x1579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1584.value)*((((x1580*x1581))+((x1580*x1583))+((x1581*x1582))+((x1582*x1583))+(((0.10915)*x1578))+((py*x1575))+((py*x1576))+(((0.10915)*x1579))))), ((x1585.value)*((x1578+x1579))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1586=(cj5*r01);
IkReal x1587=(r00*sj5);
IkReal x1588=IKcos(j0);
IkReal x1589=(cj1*sj2);
IkReal x1590=(cj2*sj1);
IkReal x1591=(cj5*r11);
IkReal x1592=(r10*sj5);
IkReal x1593=IKsin(j0);
IkReal x1594=((0.425)*cj1);
IkReal x1595=x1577;
evalcond[0]=(((x1588*x1589))+(((-1.0)*x1587))+(((-1.0)*x1586))+((x1588*x1590)));
evalcond[1]=(((x1589*x1593))+(((-1.0)*x1591))+((x1590*x1593))+(((-1.0)*x1592)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-0.09465)*x1586))+(((-1.0)*x1588*x1594))+(((0.10915)*x1593))+(((-1.0)*x1588*x1595))+(((-0.09465)*x1587)));
evalcond[3]=((((-1.0)*(1.0)*py))+(((-1.0)*x1593*x1595))+(((-1.0)*x1593*x1594))+(((-0.10915)*x1588))+(((-0.09465)*x1591))+(((-0.09465)*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1596=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1596;
j4eval[1]=IKsign(x1596);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1597=((1.0)*sj5);
IkReal x1598=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1597)));
j4eval[0]=x1598;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1597))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1599=((1.0)*cj5);
IkReal x1600=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1599)));
j4eval[0]=x1600;
j4eval[1]=IKsign(x1600);
j4eval[2]=((IKabs(((((-1.0)*cj0*r00*x1599))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1599)))))+(IKabs((((cj0*r02))+((r12*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1601=((1.0)*cj5);
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1601)))),-1);
if(!x1602.valid){
continue;
}
CheckValue<IkReal> x1603 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x1601))+(((-1.0)*cj0*r00*x1601))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1602.value)))+(x1603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1604=IKcos(j4);
IkReal x1605=((1.0)*r22);
IkReal x1606=IKsin(j4);
IkReal x1607=(sj5*x1606);
IkReal x1608=((1.0)*cj5*x1606);
IkReal x1609=((1.0)*r02);
IkReal x1610=((1.0)*r12);
IkReal x1611=(cj5*x1604);
IkReal x1612=((1.0)*sj5*x1604);
IkReal x1613=IKcos((j1+j2));
evalcond[0]=(((r21*x1607))+(((-1.0)*r20*x1608))+(((-1.0)*x1604*x1605)));
evalcond[1]=((((-1.0)*r00*x1608))+sj0+(((-1.0)*x1604*x1609))+((r01*x1607)));
evalcond[2]=(((r11*x1607))+(((-1.0)*x1604*x1610))+(((-1.0)*r10*x1608))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=(((r20*x1611))+(((-1.0)*r21*x1612))+((cj1*sj2))+(((-1.0)*x1605*x1606))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1606*x1609))+((cj0*x1613))+(((-1.0)*r01*x1612))+((r00*x1611)));
evalcond[5]=((((-1.0)*x1606*x1610))+((r10*x1611))+((sj0*x1613))+(((-1.0)*r11*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1614=((1.0)*cj0);
CheckValue<IkReal> x1615 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1614)),IkReal(((((-1.0)*r21*sj5*x1614))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1615.valid){
continue;
}
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1615.value)+(((1.5707963267949)*(x1616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1617=IKcos(j4);
IkReal x1618=((1.0)*r22);
IkReal x1619=IKsin(j4);
IkReal x1620=(sj5*x1619);
IkReal x1621=((1.0)*cj5*x1619);
IkReal x1622=((1.0)*r02);
IkReal x1623=((1.0)*r12);
IkReal x1624=(cj5*x1617);
IkReal x1625=((1.0)*sj5*x1617);
IkReal x1626=IKcos((j1+j2));
evalcond[0]=((((-1.0)*x1617*x1618))+((r21*x1620))+(((-1.0)*r20*x1621)));
evalcond[1]=(((r01*x1620))+(((-1.0)*r00*x1621))+(((-1.0)*x1617*x1622))+sj0);
evalcond[2]=(((r11*x1620))+(((-1.0)*x1617*x1623))+(((-1.0)*r10*x1621))+(((-1.0)*(1.0)*cj0)));
evalcond[3]=((((-1.0)*r21*x1625))+((cj1*sj2))+((r20*x1624))+(((-1.0)*x1618*x1619))+((cj2*sj1)));
evalcond[4]=(((r00*x1624))+(((-1.0)*x1619*x1622))+(((-1.0)*r01*x1625))+((cj0*x1626)));
evalcond[5]=(((sj0*x1626))+(((-1.0)*x1619*x1623))+((r10*x1624))+(((-1.0)*r11*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1627 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1627.valid){
continue;
}
CheckValue<IkReal> x1628=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1627.value)+(((1.5707963267949)*(x1628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1629=IKcos(j4);
IkReal x1630=((1.0)*r22);
IkReal x1631=IKsin(j4);
IkReal x1632=(sj5*x1631);
IkReal x1633=((1.0)*cj5*x1631);
IkReal x1634=((1.0)*r02);
IkReal x1635=((1.0)*r12);
IkReal x1636=(cj5*x1629);
IkReal x1637=((1.0)*sj5*x1629);
IkReal x1638=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1633))+((r21*x1632))+(((-1.0)*x1629*x1630)));
evalcond[1]=((((-1.0)*r00*x1633))+(((-1.0)*x1629*x1634))+sj0+((r01*x1632)));
evalcond[2]=((((-1.0)*x1629*x1635))+((r11*x1632))+(((-1.0)*(1.0)*cj0))+(((-1.0)*r10*x1633)));
evalcond[3]=((((-1.0)*x1630*x1631))+((cj1*sj2))+(((-1.0)*r21*x1637))+((r20*x1636))+((cj2*sj1)));
evalcond[4]=(((cj0*x1638))+(((-1.0)*x1631*x1634))+(((-1.0)*r01*x1637))+((r00*x1636)));
evalcond[5]=((((-1.0)*x1631*x1635))+(((-1.0)*r11*x1637))+((r10*x1636))+((sj0*x1638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1639=(cj1*sj2);
IkReal x1640=(cj2*sj1);
IkReal x1641=(r21*sj5);
IkReal x1642=((1.0)*cj5*r20);
IkReal x1643=r21*r21;
IkReal x1644=cj5*cj5;
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKsign((((x1644*(r20*r20)))+(((-2.0)*cj5*r20*x1641))+(r22*r22)+(((-1.0)*x1643*x1644))+x1643)),-1);
if(!x1645.valid){
continue;
}
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal((((r22*x1639))+((r22*x1640)))),IkReal(((((-1.0)*x1640*x1642))+(((-1.0)*x1639*x1642))+((x1640*x1641))+((x1639*x1641)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1645.value)))+(x1646.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1647=IKcos(j4);
IkReal x1648=((1.0)*r22);
IkReal x1649=IKsin(j4);
IkReal x1650=(r21*sj5);
IkReal x1651=(cj5*r20);
evalcond[0]=(((x1649*x1650))+(((-1.0)*x1647*x1648))+(((-1.0)*x1649*x1651)));
evalcond[1]=((((-1.0)*x1647*x1650))+((cj1*sj2))+((x1647*x1651))+(((-1.0)*x1648*x1649))+((cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1652=(cj5*sj4);
IkReal x1653=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x1652))+(((-1.0)*r01*x1653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1652))+((r11*x1653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x1652))+(((-1.0)*r01*x1653))))+IKsqr(((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1652))+((r11*x1653))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x1652))+(((-1.0)*r01*x1653))), ((((-1.0)*(1.0)*cj4*r12))+(((-1.0)*r10*x1652))+((r11*x1653))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1654=IKsin(j0);
IkReal x1655=((1.0)*cj4);
IkReal x1656=(sj4*sj5);
IkReal x1657=((1.0)*cj5*sj4);
IkReal x1658=IKcos(j0);
IkReal x1659=(cj5*r01);
IkReal x1660=(r00*sj5);
IkReal x1661=(cj1*sj2);
IkReal x1662=(cj2*sj1);
IkReal x1663=(cj5*r11);
IkReal x1664=(r10*sj5);
IkReal x1665=((1.0)*sj4);
IkReal x1666=(cj4*cj5);
IkReal x1667=((1.0)*cj4*sj5);
IkReal x1668=IKcos((j1+j2));
IkReal x1669=(x1658*x1668);
IkReal x1670=(x1654*x1668);
IkReal x1671=((0.425)*cj1);
evalcond[0]=((((-1.0)*r00*x1657))+(((-1.0)*r02*x1655))+x1654+((r01*x1656)));
evalcond[1]=((((-1.0)*r12*x1655))+(((-1.0)*x1658))+(((-1.0)*r10*x1657))+((r11*x1656)));
evalcond[2]=((((-1.0)*x1659))+((x1658*x1661))+((x1658*x1662))+(((-1.0)*x1660)));
evalcond[3]=(((x1654*x1662))+((x1654*x1661))+(((-1.0)*x1664))+(((-1.0)*x1663)));
evalcond[4]=((((-1.0)*r01*x1667))+(((-1.0)*r02*x1665))+((r00*x1666))+x1669);
evalcond[5]=(x1670+(((-1.0)*r12*x1665))+(((-1.0)*r11*x1667))+((r10*x1666)));
evalcond[6]=((((-1.0)*(1.0)*px))+(((-0.09465)*x1660))+(((-0.39225)*x1669))+(((-0.09465)*x1659))+(((-1.0)*x1658*x1671))+(((0.10915)*x1654)));
evalcond[7]=((((-1.0)*(1.0)*py))+(((-0.10915)*x1658))+(((-1.0)*x1654*x1671))+(((-0.09465)*x1664))+(((-0.09465)*x1663))+(((-0.39225)*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1672=IKPowWithIntegerCheck(IKsign((((cj1*sj2))+((cj2*sj1)))),-1);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal((((r10*sj5))+((cj5*r11)))),IkReal((((cj5*r01))+((r00*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1672.value)))+(x1673.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1674=(cj5*r01);
IkReal x1675=(r00*sj5);
IkReal x1676=IKcos(j0);
IkReal x1677=(cj1*sj2);
IkReal x1678=(cj2*sj1);
IkReal x1679=(cj5*r11);
IkReal x1680=(r10*sj5);
IkReal x1681=IKsin(j0);
IkReal x1682=((0.425)*cj1);
IkReal x1683=((0.39225)*(IKcos((j1+j2))));
evalcond[0]=((((-1.0)*x1674))+((x1676*x1678))+(((-1.0)*x1675))+((x1676*x1677)));
evalcond[1]=((((-1.0)*x1680))+((x1678*x1681))+((x1677*x1681))+(((-1.0)*x1679)));
evalcond[2]=((((-1.0)*x1676*x1683))+(((-1.0)*(1.0)*px))+(((-0.09465)*x1674))+(((0.10915)*x1681))+(((-0.09465)*x1675))+(((-1.0)*x1676*x1682)));
evalcond[3]=((((-0.10915)*x1676))+(((-1.0)*(1.0)*py))+(((-1.0)*x1681*x1682))+(((-1.0)*x1681*x1683))+(((-0.09465)*x1679))+(((-0.09465)*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1684=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1684;
j4eval[1]=IKsign(x1684);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1685=((1.0)*sj5);
IkReal x1686=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1685)));
j4eval[0]=x1686;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1685))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x1686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1687=((1.0)*cj5);
IkReal x1688=((((-1.0)*r21*x1687))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x1688;
j4eval[1]=IKsign(x1688);
j4eval[2]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1687))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1687))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1689=((1.0)*cj5);
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1689)))),-1);
if(!x1690.valid){
continue;
}
CheckValue<IkReal> x1691 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1689))+(((-1.0)*r10*sj0*x1689))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1690.value)))+(x1691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1692=IKcos(j4);
IkReal x1693=((1.0)*r22);
IkReal x1694=IKsin(j4);
IkReal x1695=(sj5*x1694);
IkReal x1696=((1.0)*cj5*x1694);
IkReal x1697=((1.0)*r02);
IkReal x1698=((1.0)*r12);
IkReal x1699=(cj5*x1692);
IkReal x1700=((1.0)*sj5*x1692);
IkReal x1701=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1696))+(((-1.0)*x1692*x1693))+((r21*x1695)));
evalcond[1]=((((-1.0)*r00*x1696))+(((-1.0)*x1692*x1697))+sj0+((r01*x1695)));
evalcond[2]=(((r11*x1695))+(((-1.0)*r10*x1696))+(((-1.0)*(1.0)*cj0))+(((-1.0)*x1692*x1698)));
evalcond[3]=((((-1.0)*x1693*x1694))+((r20*x1699))+((cj1*sj2))+((cj2*sj1))+(((-1.0)*r21*x1700)));
evalcond[4]=((((-1.0)*x1694*x1697))+(((-1.0)*r01*x1700))+((cj0*x1701))+((r00*x1699)));
evalcond[5]=((((-1.0)*r11*x1700))+(((-1.0)*x1694*x1698))+((r10*x1699))+((sj0*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1702=((1.0)*cj0);
CheckValue<IkReal> x1703 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1702)),IkReal(((((-1.0)*r21*sj5*x1702))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
CheckValue<IkReal> x1704=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x1704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1703.value)+(((1.5707963267949)*(x1704.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1705=IKcos(j4);
IkReal x1706=((1.0)*r22);
IkReal x1707=IKsin(j4);
IkReal x1708=(sj5*x1707);
IkReal x1709=((1.0)*cj5*x1707);
IkReal x1710=((1.0)*r02);
IkReal x1711=((1.0)*r12);
IkReal x1712=(cj5*x1705);
IkReal x1713=((1.0)*sj5*x1705);
IkReal x1714=IKcos((j1+j2));
evalcond[0]=((((-1.0)*r20*x1709))+((r21*x1708))+(((-1.0)*x1705*x1706)));
evalcond[1]=((((-1.0)*r00*x1709))+(((-1.0)*x1705*x1710))+((r01*x1708))+sj0);
evalcond[2]=((((-1.0)*r10*x1709))+(((-1.0)*x1705*x1711))+(((-1.0)*(1.0)*cj0))+((r11*x1708)));
evalcond[3]=(((r20*x1712))+((cj1*sj2))+(((-1.0)*r21*x1713))+((cj2*sj1))+(((-1.0)*x1706*x1707)));
evalcond[4]=((((-1.0)*r01*x1713))+((r00*x1712))+(((-1.0)*x1707*x1710))+((cj0*x1714)));
evalcond[5]=(((r10*x1712))+(((-1.0)*x1707*x1711))+(((-1.0)*r11*x1713))+((sj0*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x1716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1715.value)+(((1.5707963267949)*(x1716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1717=IKcos(j4);
IkReal x1718=((1.0)*r22);
IkReal x1719=IKsin(j4);
IkReal x1720=(sj5*x1719);
IkReal x1721=((1.0)*cj5*x1719);
IkReal x1722=((1.0)*r02);
IkReal x1723=((1.0)*r12);
IkReal x1724=(cj5*x1717);
IkReal x1725=((1.0)*sj5*x1717);
IkReal x1726=IKcos((j1+j2));
evalcond[0]=(((r21*x1720))+(((-1.0)*x1717*x1718))+(((-1.0)*r20*x1721)));
evalcond[1]=(((r01*x1720))+sj0+(((-1.0)*x1717*x1722))+(((-1.0)*r00*x1721)));
evalcond[2]=(((r11*x1720))+(((-1.0)*r10*x1721))+(((-1.0)*(1.0)*cj0))+(((-1.0)*x1717*x1723)));
evalcond[3]=((((-1.0)*x1718*x1719))+((r20*x1724))+((cj1*sj2))+(((-1.0)*r21*x1725))+((cj2*sj1)));
evalcond[4]=((((-1.0)*x1719*x1722))+((cj0*x1726))+((r00*x1724))+(((-1.0)*r01*x1725)));
evalcond[5]=((((-1.0)*r11*x1725))+((r10*x1724))+((sj0*x1726))+(((-1.0)*x1719*x1723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1727=cj1*cj1;
IkReal x1728=cj2*cj2;
IkReal x1729=(cj1*sj1*sj2);
IkReal x1730=((170000000.0)*cj1);
IkReal x1731=((4132419.0)*cj5);
IkReal x1732=((4132419.0)*sj5);
IkReal x1733=((156900000.0)*cj1*cj2);
IkReal x1734=((16090500.0)*cj1*cj5);
IkReal x1735=((16090500.0)*cj1*sj5);
IkReal x1736=((156900000.0)*sj1*sj2);
IkReal x1737=((14850585.0)*cj1*cj2*cj5);
IkReal x1738=((14850585.0)*cj1*cj2*sj5);
IkReal x1739=((14850585.0)*cj5*sj1*sj2);
IkReal x1740=((14850585.0)*sj1*sj2*sj5);
CheckValue<IkReal> x1741=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((-123088050.0)*cj2*x1729))+(((-61544025.0)*x1728))+(((133365000.0)*cj2*x1727))+(((-133365000.0)*x1729))+(((10705975.0)*x1727))+(((123088050.0)*x1727*x1728)))),-1);
if(!x1741.valid){
continue;
}
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1735))+(((43660000.0)*px))+((py*x1736))+((r01*x1731))+((r00*x1732))+(((-1.0)*py*x1733))+(((-1.0)*r11*x1734))+(((-1.0)*r11*x1737))+(((-1.0)*r10*x1738))+((r11*x1739))+((r10*x1740))+(((-1.0)*py*x1730)))),IkReal(((((-1.0)*r10*x1732))+(((-1.0)*r01*x1734))+(((-1.0)*r01*x1737))+(((-1.0)*r00*x1738))+(((-1.0)*px*x1730))+(((-1.0)*r11*x1731))+(((-1.0)*r00*x1735))+(((-1.0)*(43660000.0)*py))+((r01*x1739))+((r00*x1740))+((px*x1736))+(((-1.0)*px*x1733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1741.value)))+(x1742.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1743=((0.09465)*cj5);
IkReal x1744=((0.09465)*sj5);
IkReal x1745=IKsin(j0);
IkReal x1746=IKcos(j0);
IkReal x1747=((0.425)*cj1);
IkReal x1748=((0.39225)*cj1*cj2);
IkReal x1749=((0.39225)*sj1*sj2);
evalcond[0]=((((-1.0)*(1.0)*px))+(((0.10915)*x1745))+(((-1.0)*x1746*x1748))+((x1746*x1749))+(((-1.0)*r00*x1744))+(((-1.0)*x1746*x1747))+(((-1.0)*r01*x1743)));
evalcond[1]=((((-1.0)*(1.0)*py))+(((-1.0)*x1745*x1747))+(((-0.10915)*x1746))+(((-1.0)*x1745*x1748))+(((-1.0)*r10*x1744))+((x1745*x1749))+(((-1.0)*r11*x1743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x1750=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x1750;
j4eval[1]=IKsign(x1750);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1751=((1.0)*sj5);
IkReal x1752=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x1751)));
j4eval[0]=x1752;
j4eval[1]=((IKabs(((((-1.0)*cj0*r21*x1751))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1752);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1753=((1.0)*cj5);
IkReal x1754=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x1753)));
j4eval[0]=x1754;
j4eval[1]=IKsign(x1754);
j4eval[2]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj0*r00*x1753))+((cj0*r01*sj5))+(((-1.0)*r10*sj0*x1753))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1755=((1.0)*r20);
IkReal x1757 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1757)==0){
continue;
}
IkReal x1756=pow(x1757,-0.5);
CheckValue<IkReal> x1758 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1755)),IKFAST_ATAN2_MAGTHRESH);
if(!x1758.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1758.value));
IkReal gconst1=(r21*x1756);
IkReal gconst2=((-1.0)*x1755*x1756);
CheckValue<IkReal> x1759 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1759.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1759.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1760=((1.0)*r20);
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1760)),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
IkReal x1761=((-1.0)*(x1763.value));
IkReal x1762=x1756;
sj5=gconst1;
cj5=gconst2;
j5=x1761;
IkReal gconst0=x1761;
IkReal gconst1=(r21*x1762);
IkReal gconst2=((-1.0)*x1760*x1762);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1764=((1.0)*r20);
CheckValue<IkReal> x1767 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1764)),IKFAST_ATAN2_MAGTHRESH);
if(!x1767.valid){
continue;
}
IkReal x1765=((-1.0)*(x1767.value));
IkReal x1766=x1756;
sj5=gconst1;
cj5=gconst2;
j5=x1765;
IkReal gconst0=x1765;
IkReal gconst1=(r21*x1766);
IkReal gconst2=((-1.0)*x1764*x1766);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1768=((1.0)*r20);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*x1768)),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
IkReal x1769=((-1.0)*(x1771.value));
IkReal x1770=x1756;
sj5=gconst1;
cj5=gconst2;
j5=x1769;
IkReal gconst0=x1769;
IkReal gconst1=(r21*x1770);
IkReal gconst2=((-1.0)*x1768*x1770);
IkReal x1772=r22*r22;
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1772))),-1);
if(!x1775.valid){
continue;
}
IkReal x1773=(sj3*(x1775.value));
IkReal x1774=((((2.0)*x1773*(r20*r20)*(r21*r21)))+((x1773*(r20*r20*r20*r20)))+((sj3*x1772))+((x1773*(r21*r21*r21*r21))));
j4eval[0]=x1774;
j4eval[1]=IKsign(x1774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=(gconst1*r21);
IkReal x1777=gconst1*gconst1;
IkReal x1778=r21*r21;
IkReal x1779=gconst2*gconst2;
IkReal x1780=r20*r20;
IkReal x1781=(sj1*sj2);
IkReal x1782=((1.0)*cj1*cj2);
IkReal x1783=(cj3*r22);
IkReal x1784=(gconst2*r20);
IkReal x1785=(cj3*gconst1*gconst2);
IkReal x1786=(cj3*r20*r21);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((((gconst1*r20*x1783))+((gconst2*r21*x1783))+((r22*x1781))+(((-1.0)*r22*x1782)))),IkReal((((x1777*x1786))+(((-1.0)*x1779*x1786))+(((-1.0)*sj1*sj2*x1784))+((x1778*x1785))+(((-1.0)*x1776*x1782))+(((-1.0)*x1780*x1785))+((cj1*cj2*x1784))+((x1776*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign((((sj3*x1777*x1778))+(((-2.0)*gconst2*r20*sj3*x1776))+((sj3*(r22*r22)))+((sj3*x1779*x1780)))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1789=IKcos(j4);
IkReal x1790=((1.0)*x1789);
IkReal x1791=IKsin(j4);
IkReal x1792=(gconst1*x1791);
IkReal x1793=((1.0)*gconst2*x1791);
IkReal x1794=((1.0)*cj0);
IkReal x1795=(cj1*sj2);
IkReal x1796=(cj2*sj1);
IkReal x1797=(gconst1*sj3);
IkReal x1798=(gconst2*sj3);
IkReal x1799=(cj3*x1791);
IkReal x1800=(cj3*gconst1*x1789);
IkReal x1801=((1.0)*cj3*gconst2*x1789);
IkReal x1802=(sj1*sj2);
IkReal x1803=(cj1*cj2);
IkReal x1804=(cj3*gconst1);
IkReal x1805=(cj3*gconst2);
IkReal x1806=((1.0)*sj3*x1791);
IkReal x1807=(gconst2*sj3*x1789);
IkReal x1808=((1.0)*gconst1*sj3*x1789);
evalcond[0]=((((-1.0)*r20*x1793))+(((-1.0)*r22*x1790))+((r21*x1792)));
evalcond[1]=((((-1.0)*r02*x1790))+(((-1.0)*r00*x1793))+sj0+((r01*x1792)));
evalcond[2]=(((r11*x1792))+(((-1.0)*r12*x1790))+(((-1.0)*r10*x1793))+(((-1.0)*x1794)));
evalcond[3]=((((-1.0)*r20*x1801))+((r22*x1799))+((r21*x1800))+((r20*x1797))+((r21*x1798))+x1796+x1795);
evalcond[4]=(((r21*x1805))+(((-1.0)*r21*x1808))+(((-1.0)*x1803))+x1802+((r20*x1804))+((r20*x1807))+(((-1.0)*r22*x1806)));
evalcond[5]=(((r00*x1807))+(((-1.0)*r01*x1808))+((r00*x1804))+((r01*x1805))+((cj0*x1795))+((cj0*x1796))+(((-1.0)*r02*x1806)));
evalcond[6]=(((r00*x1797))+((r02*x1799))+((r01*x1800))+((cj0*x1803))+(((-1.0)*x1794*x1802))+(((-1.0)*r00*x1801))+((r01*x1798)));
evalcond[7]=(((sj0*x1795))+((sj0*x1796))+((r11*x1805))+(((-1.0)*r12*x1806))+(((-1.0)*r11*x1808))+((r10*x1807))+((r10*x1804)));
evalcond[8]=((((-1.0)*r10*x1801))+((r10*x1797))+((sj0*x1803))+((r11*x1800))+((r11*x1798))+(((-1.0)*sj0*x1802))+((r12*x1799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1809=((1.0)*cj0);
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst1*r00))+(((-1.0)*(1.0)*gconst2*r01)))),-1);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1809)),IkReal((((cj0*gconst2*r20))+(((-1.0)*gconst1*r21*x1809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1810.value)))+(x1811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1812=IKcos(j4);
IkReal x1813=((1.0)*x1812);
IkReal x1814=IKsin(j4);
IkReal x1815=(gconst1*x1814);
IkReal x1816=((1.0)*gconst2*x1814);
IkReal x1817=((1.0)*cj0);
IkReal x1818=(cj1*sj2);
IkReal x1819=(cj2*sj1);
IkReal x1820=(gconst1*sj3);
IkReal x1821=(gconst2*sj3);
IkReal x1822=(cj3*x1814);
IkReal x1823=(cj3*gconst1*x1812);
IkReal x1824=((1.0)*cj3*gconst2*x1812);
IkReal x1825=(sj1*sj2);
IkReal x1826=(cj1*cj2);
IkReal x1827=(cj3*gconst1);
IkReal x1828=(cj3*gconst2);
IkReal x1829=((1.0)*sj3*x1814);
IkReal x1830=(gconst2*sj3*x1812);
IkReal x1831=((1.0)*gconst1*sj3*x1812);
evalcond[0]=((((-1.0)*r22*x1813))+(((-1.0)*r20*x1816))+((r21*x1815)));
evalcond[1]=(((r01*x1815))+(((-1.0)*r00*x1816))+sj0+(((-1.0)*r02*x1813)));
evalcond[2]=((((-1.0)*r10*x1816))+(((-1.0)*x1817))+(((-1.0)*r12*x1813))+((r11*x1815)));
evalcond[3]=(((r22*x1822))+((r21*x1821))+x1819+x1818+(((-1.0)*r20*x1824))+((r21*x1823))+((r20*x1820)));
evalcond[4]=(x1825+(((-1.0)*x1826))+((r20*x1830))+(((-1.0)*r22*x1829))+(((-1.0)*r21*x1831))+((r20*x1827))+((r21*x1828)));
evalcond[5]=((((-1.0)*r02*x1829))+((r00*x1827))+((r00*x1830))+((cj0*x1818))+(((-1.0)*r01*x1831))+((cj0*x1819))+((r01*x1828)));
evalcond[6]=(((r02*x1822))+(((-1.0)*r00*x1824))+((r00*x1820))+(((-1.0)*x1817*x1825))+((r01*x1823))+((r01*x1821))+((cj0*x1826)));
evalcond[7]=(((r10*x1830))+((sj0*x1818))+((r10*x1827))+((r11*x1828))+(((-1.0)*r11*x1831))+(((-1.0)*r12*x1829))+((sj0*x1819)));
evalcond[8]=((((-1.0)*r10*x1824))+(((-1.0)*sj0*x1825))+((r11*x1823))+((r10*x1820))+((r12*x1822))+((sj0*x1826))+((r11*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*(1.0)*gconst2*r20*sj0))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x1833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1832.value)+(((1.5707963267949)*(x1833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1834=IKcos(j4);
IkReal x1835=((1.0)*x1834);
IkReal x1836=IKsin(j4);
IkReal x1837=(gconst1*x1836);
IkReal x1838=((1.0)*gconst2*x1836);
IkReal x1839=((1.0)*cj0);
IkReal x1840=(cj1*sj2);
IkReal x1841=(cj2*sj1);
IkReal x1842=(gconst1*sj3);
IkReal x1843=(gconst2*sj3);
IkReal x1844=(cj3*x1836);
IkReal x1845=(cj3*gconst1*x1834);
IkReal x1846=((1.0)*cj3*gconst2*x1834);
IkReal x1847=(sj1*sj2);
IkReal x1848=(cj1*cj2);
IkReal x1849=(cj3*gconst1);
IkReal x1850=(cj3*gconst2);
IkReal x1851=((1.0)*sj3*x1836);
IkReal x1852=(gconst2*sj3*x1834);
IkReal x1853=((1.0)*gconst1*sj3*x1834);
evalcond[0]=((((-1.0)*r22*x1835))+(((-1.0)*r20*x1838))+((r21*x1837)));
evalcond[1]=((((-1.0)*r02*x1835))+(((-1.0)*r00*x1838))+sj0+((r01*x1837)));
evalcond[2]=((((-1.0)*r10*x1838))+((r11*x1837))+(((-1.0)*r12*x1835))+(((-1.0)*x1839)));
evalcond[3]=(((r21*x1843))+((r21*x1845))+x1841+x1840+((r22*x1844))+(((-1.0)*r20*x1846))+((r20*x1842)));
evalcond[4]=((((-1.0)*x1848))+(((-1.0)*r21*x1853))+((r21*x1850))+x1847+(((-1.0)*r22*x1851))+((r20*x1852))+((r20*x1849)));
evalcond[5]=((((-1.0)*r02*x1851))+((r00*x1849))+((r00*x1852))+((cj0*x1840))+((cj0*x1841))+(((-1.0)*r01*x1853))+((r01*x1850)));
evalcond[6]=(((r01*x1845))+((cj0*x1848))+((r02*x1844))+((r01*x1843))+(((-1.0)*r00*x1846))+((r00*x1842))+(((-1.0)*x1839*x1847)));
evalcond[7]=(((r10*x1849))+((r11*x1850))+((sj0*x1840))+(((-1.0)*r11*x1853))+((sj0*x1841))+((r10*x1852))+(((-1.0)*r12*x1851)));
evalcond[8]=(((sj0*x1848))+((r11*x1843))+((r11*x1845))+((r10*x1842))+((r12*x1844))+(((-1.0)*r10*x1846))+(((-1.0)*sj0*x1847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1854=((1.0)*r21);
IkReal x1855=((1.0)*r20);
IkReal x1857 = ((1.0)+(((-1.0)*(1.0)*(r22*r22))));
if(IKabs(x1857)==0){
continue;
}
IkReal x1856=pow(x1857,-0.5);
CheckValue<IkReal> x1858 = IKatan2WithCheck(IkReal(((-1.0)*x1854)),IkReal(((-1.0)*x1855)),IKFAST_ATAN2_MAGTHRESH);
if(!x1858.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1858.value))));
IkReal gconst4=((-1.0)*x1854*x1856);
IkReal gconst5=(x1855*x1856);
CheckValue<IkReal> x1859 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r21)))),IkReal(((-1.0)*(((1.0)*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1859.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x1859.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1860=((1.0)*r21);
IkReal x1861=((1.0)*r20);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal(((-1.0)*x1860)),IkReal(((-1.0)*x1861)),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1862=((-1.0)*(x1864.value));
IkReal x1863=x1856;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1862);
IkReal gconst3=((3.14159265358979)+x1862);
IkReal gconst4=((-1.0)*x1860*x1863);
IkReal gconst5=(x1861*x1863);
j4eval[0]=1.0;
j4eval[1]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1865=((1.0)*r21);
IkReal x1866=((1.0)*r20);
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(((-1.0)*x1865)),IkReal(((-1.0)*x1866)),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1867=((-1.0)*(x1869.value));
IkReal x1868=x1856;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1867);
IkReal gconst3=((3.14159265358979)+x1867);
IkReal gconst4=((-1.0)*x1865*x1868);
IkReal gconst5=(x1866*x1868);
j4eval[0]=1.0;
j4eval[1]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[5];
IkReal x1870=((1.0)*r21);
IkReal x1871=((1.0)*r20);
CheckValue<IkReal> x1874 = IKatan2WithCheck(IkReal(((-1.0)*x1870)),IkReal(((-1.0)*x1871)),IKFAST_ATAN2_MAGTHRESH);
if(!x1874.valid){
continue;
}
IkReal x1872=((-1.0)*(x1874.value));
IkReal x1873=x1856;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+x1872);
IkReal gconst3=((3.14159265358979)+x1872);
IkReal gconst4=((-1.0)*x1870*x1873);
IkReal gconst5=(x1871*x1873);
j4eval[0]=0;
j4eval[1]=-1.0;
j4eval[2]=((-1.0)+(r22*r22));
j4eval[3]=((((r12*r12)*(sj0*sj0)))+(((cj0*cj0)*(r02*r02)))+(((2.0)*cj0*r02*r12*sj0)));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1875=((1.0)*gconst5);
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal(((((-1.0)*cj0*r00*x1875))+(((-1.0)*r10*sj0*x1875))+((gconst4*r11*sj0))+((cj0*gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x1875))+(((-1.0)*(1.0)*gconst4*r20)))),-1);
if(!x1877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1876.value)+(((1.5707963267949)*(x1877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1878=IKcos(j4);
IkReal x1879=((1.0)*x1878);
IkReal x1880=IKsin(j4);
IkReal x1881=(gconst4*x1880);
IkReal x1882=((1.0)*gconst5*x1880);
IkReal x1883=((1.0)*cj0);
IkReal x1884=(cj1*sj2);
IkReal x1885=(cj2*sj1);
IkReal x1886=(gconst4*sj3);
IkReal x1887=(gconst5*sj3);
IkReal x1888=(cj3*x1880);
IkReal x1889=(cj3*gconst4*x1878);
IkReal x1890=((1.0)*cj3*gconst5*x1878);
IkReal x1891=(sj1*sj2);
IkReal x1892=(cj1*cj2);
IkReal x1893=(cj3*gconst4);
IkReal x1894=(cj3*gconst5);
IkReal x1895=((1.0)*sj3*x1880);
IkReal x1896=(gconst5*sj3*x1878);
IkReal x1897=((1.0)*gconst4*sj3*x1878);
evalcond[0]=(((r21*x1881))+(((-1.0)*r20*x1882))+(((-1.0)*r22*x1879)));
evalcond[1]=((((-1.0)*r00*x1882))+sj0+(((-1.0)*r02*x1879))+((r01*x1881)));
evalcond[2]=((((-1.0)*r10*x1882))+((r11*x1881))+(((-1.0)*r12*x1879))+(((-1.0)*x1883)));
evalcond[3]=(((r22*x1888))+x1884+x1885+((r20*x1886))+(((-1.0)*r20*x1890))+((r21*x1887))+((r21*x1889)));
evalcond[4]=((((-1.0)*r21*x1897))+((r21*x1894))+x1891+((r20*x1896))+((r20*x1893))+(((-1.0)*r22*x1895))+(((-1.0)*x1892)));
evalcond[5]=(((r00*x1893))+((cj0*x1885))+((r00*x1896))+(((-1.0)*r01*x1897))+((r01*x1894))+(((-1.0)*r02*x1895))+((cj0*x1884)));
evalcond[6]=(((r00*x1886))+((cj0*x1892))+((r01*x1887))+((r02*x1888))+((r01*x1889))+(((-1.0)*x1883*x1891))+(((-1.0)*r00*x1890)));
evalcond[7]=((((-1.0)*r11*x1897))+((r11*x1894))+((sj0*x1885))+((sj0*x1884))+((r10*x1893))+((r10*x1896))+(((-1.0)*r12*x1895)));
evalcond[8]=(((r12*x1888))+(((-1.0)*r10*x1890))+((r11*x1887))+((sj0*x1892))+((r11*x1889))+(((-1.0)*sj0*x1891))+((r10*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1898=((1.0)*cj0);
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst4*r00))+(((-1.0)*(1.0)*gconst5*r01)))),-1);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(((-1.0)*r22*x1898)),IkReal((((cj0*gconst5*r20))+(((-1.0)*gconst4*r21*x1898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1899.value)))+(x1900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1901=IKcos(j4);
IkReal x1902=((1.0)*x1901);
IkReal x1903=IKsin(j4);
IkReal x1904=(gconst4*x1903);
IkReal x1905=((1.0)*gconst5*x1903);
IkReal x1906=((1.0)*cj0);
IkReal x1907=(cj1*sj2);
IkReal x1908=(cj2*sj1);
IkReal x1909=(gconst4*sj3);
IkReal x1910=(gconst5*sj3);
IkReal x1911=(cj3*x1903);
IkReal x1912=(cj3*gconst4*x1901);
IkReal x1913=((1.0)*cj3*gconst5*x1901);
IkReal x1914=(sj1*sj2);
IkReal x1915=(cj1*cj2);
IkReal x1916=(cj3*gconst4);
IkReal x1917=(cj3*gconst5);
IkReal x1918=((1.0)*sj3*x1903);
IkReal x1919=(gconst5*sj3*x1901);
IkReal x1920=((1.0)*gconst4*sj3*x1901);
evalcond[0]=((((-1.0)*r22*x1902))+(((-1.0)*r20*x1905))+((r21*x1904)));
evalcond[1]=((((-1.0)*r00*x1905))+((r01*x1904))+sj0+(((-1.0)*r02*x1902)));
evalcond[2]=((((-1.0)*r12*x1902))+(((-1.0)*r10*x1905))+((r11*x1904))+(((-1.0)*x1906)));
evalcond[3]=(((r21*x1912))+((r20*x1909))+((r22*x1911))+(((-1.0)*r20*x1913))+x1908+x1907+((r21*x1910)));
evalcond[4]=(((r20*x1916))+x1914+(((-1.0)*r21*x1920))+((r21*x1917))+(((-1.0)*x1915))+((r20*x1919))+(((-1.0)*r22*x1918)));
evalcond[5]=(((cj0*x1907))+((r00*x1916))+(((-1.0)*r02*x1918))+((r00*x1919))+((cj0*x1908))+((r01*x1917))+(((-1.0)*r01*x1920)));
evalcond[6]=(((r01*x1910))+((cj0*x1915))+(((-1.0)*r00*x1913))+(((-1.0)*x1906*x1914))+((r01*x1912))+((r02*x1911))+((r00*x1909)));
evalcond[7]=(((r10*x1916))+((sj0*x1907))+(((-1.0)*r11*x1920))+((sj0*x1908))+((r11*x1917))+((r10*x1919))+(((-1.0)*r12*x1918)));
evalcond[8]=(((sj0*x1915))+((r12*x1911))+(((-1.0)*r10*x1913))+(((-1.0)*sj0*x1914))+((r11*x1912))+((r10*x1909))+((r11*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign((((gconst4*r10))+((gconst5*r11)))),-1);
if(!x1921.valid){
continue;
}
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst4*r21*sj0))+(((-1.0)*(1.0)*gconst5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1921.value)))+(x1922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1923=IKcos(j4);
IkReal x1924=((1.0)*x1923);
IkReal x1925=IKsin(j4);
IkReal x1926=(gconst4*x1925);
IkReal x1927=((1.0)*gconst5*x1925);
IkReal x1928=((1.0)*cj0);
IkReal x1929=(cj1*sj2);
IkReal x1930=(cj2*sj1);
IkReal x1931=(gconst4*sj3);
IkReal x1932=(gconst5*sj3);
IkReal x1933=(cj3*x1925);
IkReal x1934=(cj3*gconst4*x1923);
IkReal x1935=((1.0)*cj3*gconst5*x1923);
IkReal x1936=(sj1*sj2);
IkReal x1937=(cj1*cj2);
IkReal x1938=(cj3*gconst4);
IkReal x1939=(cj3*gconst5);
IkReal x1940=((1.0)*sj3*x1925);
IkReal x1941=(gconst5*sj3*x1923);
IkReal x1942=((1.0)*gconst4*sj3*x1923);
evalcond[0]=((((-1.0)*r20*x1927))+(((-1.0)*r22*x1924))+((r21*x1926)));
evalcond[1]=((((-1.0)*r00*x1927))+(((-1.0)*r02*x1924))+sj0+((r01*x1926)));
evalcond[2]=((((-1.0)*r10*x1927))+(((-1.0)*x1928))+((r11*x1926))+(((-1.0)*r12*x1924)));
evalcond[3]=(((r22*x1933))+((r20*x1931))+((r21*x1932))+x1929+x1930+((r21*x1934))+(((-1.0)*r20*x1935)));
evalcond[4]=((((-1.0)*r22*x1940))+(((-1.0)*r21*x1942))+x1936+((r21*x1939))+((r20*x1941))+((r20*x1938))+(((-1.0)*x1937)));
evalcond[5]=(((r01*x1939))+((r00*x1941))+(((-1.0)*r01*x1942))+((cj0*x1929))+((r00*x1938))+(((-1.0)*r02*x1940))+((cj0*x1930)));
evalcond[6]=(((r01*x1932))+((r02*x1933))+((r00*x1931))+((cj0*x1937))+(((-1.0)*r00*x1935))+((r01*x1934))+(((-1.0)*x1928*x1936)));
evalcond[7]=(((sj0*x1929))+(((-1.0)*r11*x1942))+((r10*x1941))+((r10*x1938))+((r11*x1939))+(((-1.0)*r12*x1940))+((sj0*x1930)));
evalcond[8]=(((r11*x1934))+(((-1.0)*sj0*x1936))+(((-1.0)*r10*x1935))+((r12*x1933))+((sj0*x1937))+((r10*x1931))+((r11*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1943=((1.0)*r00);
IkReal x1945 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x1945)==0){
continue;
}
IkReal x1944=pow(x1945,-0.5);
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x1943)),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1946.value));
IkReal gconst7=(r01*x1944);
IkReal gconst8=((-1.0)*x1943*x1944);
CheckValue<IkReal> x1947 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1947.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x1947.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x1948=((1.0)*r00);
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x1948)),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
IkReal x1949=((-1.0)*(x1951.value));
IkReal x1950=x1944;
sj5=gconst7;
cj5=gconst8;
j5=x1949;
IkReal gconst6=x1949;
IkReal gconst7=(r01*x1950);
IkReal gconst8=((-1.0)*x1948*x1950);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1952=((1.0)*r00);
CheckValue<IkReal> x1955 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x1952)),IKFAST_ATAN2_MAGTHRESH);
if(!x1955.valid){
continue;
}
IkReal x1953=((-1.0)*(x1955.value));
IkReal x1954=x1944;
sj5=gconst7;
cj5=gconst8;
j5=x1953;
IkReal gconst6=x1953;
IkReal gconst7=(r01*x1954);
IkReal gconst8=((-1.0)*x1952*x1954);
IkReal x1956=(r12*sj0);
IkReal x1957=((1.0)*(r02*r02));
IkReal x1960 = ((1.0)+(((-1.0)*x1957)));
if(IKabs(x1960)==0){
continue;
}
IkReal x1958=pow(x1960,-0.5);
IkReal x1959=(cj0*x1958);
j4eval[0]=((IKabs((((cj0*r02))+x1956)))+(IKabs(((((-1.0)*r02*x1956*x1958))+(((-1.0)*x1957*x1959))+x1959))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1961=((1.0)*r00);
CheckValue<IkReal> x1964 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*x1961)),IKFAST_ATAN2_MAGTHRESH);
if(!x1964.valid){
continue;
}
IkReal x1962=((-1.0)*(x1964.value));
IkReal x1963=x1944;
sj5=gconst7;
cj5=gconst8;
j5=x1962;
IkReal gconst6=x1962;
IkReal gconst7=(r01*x1963);
IkReal gconst8=((-1.0)*x1961*x1963);
CheckValue<IkReal> x1967=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r02*r02)))),-1);
if(!x1967.valid){
continue;
}
IkReal x1965=(sj3*(x1967.value));
IkReal x1966=((((2.0)*r00*r01*r20*r21*x1965))+((x1965*(r01*r01)*(r21*r21)))+((sj3*(r22*r22)))+((x1965*(r00*r00)*(r20*r20))));
j4eval[0]=x1966;
j4eval[1]=IKsign(x1966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1968=(gconst7*r21);
IkReal x1969=gconst7*gconst7;
IkReal x1970=r21*r21;
IkReal x1971=gconst8*gconst8;
IkReal x1972=r20*r20;
IkReal x1973=(sj1*sj2);
IkReal x1974=((1.0)*cj1*cj2);
IkReal x1975=(cj3*r22);
IkReal x1976=(gconst8*r20);
IkReal x1977=(cj3*gconst7*gconst8);
IkReal x1978=(cj3*r20*r21);
CheckValue<IkReal> x1979=IKPowWithIntegerCheck(IKsign((((sj3*x1969*x1970))+((sj3*(r22*r22)))+((sj3*x1971*x1972))+(((-2.0)*gconst8*r20*sj3*x1968)))),-1);
if(!x1979.valid){
continue;
}
CheckValue<IkReal> x1980 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1974))+((gconst8*r21*x1975))+((r22*x1973))+((gconst7*r20*x1975)))),IkReal((((cj1*cj2*x1976))+(((-1.0)*x1972*x1977))+((x1969*x1978))+(((-1.0)*x1971*x1978))+((x1968*x1973))+((x1970*x1977))+(((-1.0)*x1968*x1974))+(((-1.0)*sj1*sj2*x1976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1979.value)))+(x1980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x1981=IKcos(j4);
IkReal x1982=((1.0)*x1981);
IkReal x1983=IKsin(j4);
IkReal x1984=(gconst7*x1983);
IkReal x1985=((1.0)*gconst8*x1983);
IkReal x1986=((1.0)*cj0);
IkReal x1987=(cj1*sj2);
IkReal x1988=(cj2*sj1);
IkReal x1989=(gconst7*sj3);
IkReal x1990=(gconst8*sj3);
IkReal x1991=(cj3*x1983);
IkReal x1992=(cj3*gconst7*x1981);
IkReal x1993=((1.0)*cj3*gconst8*x1981);
IkReal x1994=(sj1*sj2);
IkReal x1995=(cj1*cj2);
IkReal x1996=(cj3*gconst7);
IkReal x1997=(cj3*gconst8);
IkReal x1998=((1.0)*sj3*x1983);
IkReal x1999=(gconst8*sj3*x1981);
IkReal x2000=((1.0)*gconst7*sj3*x1981);
evalcond[0]=((((-1.0)*r22*x1982))+((r21*x1984))+(((-1.0)*r20*x1985)));
evalcond[1]=(sj0+(((-1.0)*r00*x1985))+((r01*x1984))+(((-1.0)*r02*x1982)));
evalcond[2]=(((r11*x1984))+(((-1.0)*r12*x1982))+(((-1.0)*x1986))+(((-1.0)*r10*x1985)));
evalcond[3]=(((r21*x1992))+((r21*x1990))+x1988+x1987+((r22*x1991))+(((-1.0)*r20*x1993))+((r20*x1989)));
evalcond[4]=(x1994+(((-1.0)*r21*x2000))+((r20*x1996))+((r20*x1999))+(((-1.0)*r22*x1998))+(((-1.0)*x1995))+((r21*x1997)));
evalcond[5]=(((r00*x1999))+(((-1.0)*r01*x2000))+(((-1.0)*r02*x1998))+((cj0*x1987))+((r01*x1997))+((cj0*x1988))+((r00*x1996)));
evalcond[6]=(((r01*x1992))+((r01*x1990))+((r00*x1989))+(((-1.0)*r00*x1993))+(((-1.0)*x1986*x1994))+((r02*x1991))+((cj0*x1995)));
evalcond[7]=((((-1.0)*r12*x1998))+(((-1.0)*r11*x2000))+((sj0*x1988))+((r11*x1997))+((r10*x1996))+((sj0*x1987))+((r10*x1999)));
evalcond[8]=(((sj0*x1995))+(((-1.0)*sj0*x1994))+((r11*x1990))+(((-1.0)*r10*x1993))+((r11*x1992))+((r10*x1989))+((r12*x1991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2001=((1.0)*gconst8);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((gconst7*r11*sj0))+(((-1.0)*cj0*r00*x2001))+(((-1.0)*r10*sj0*x2001))+((cj0*gconst7*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
CheckValue<IkReal> x2003=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2001))+(((-1.0)*(1.0)*gconst7*r20)))),-1);
if(!x2003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2002.value)+(((1.5707963267949)*(x2003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2004=IKcos(j4);
IkReal x2005=((1.0)*x2004);
IkReal x2006=IKsin(j4);
IkReal x2007=(gconst7*x2006);
IkReal x2008=((1.0)*gconst8*x2006);
IkReal x2009=((1.0)*cj0);
IkReal x2010=(cj1*sj2);
IkReal x2011=(cj2*sj1);
IkReal x2012=(gconst7*sj3);
IkReal x2013=(gconst8*sj3);
IkReal x2014=(cj3*x2006);
IkReal x2015=(cj3*gconst7*x2004);
IkReal x2016=((1.0)*cj3*gconst8*x2004);
IkReal x2017=(sj1*sj2);
IkReal x2018=(cj1*cj2);
IkReal x2019=(cj3*gconst7);
IkReal x2020=(cj3*gconst8);
IkReal x2021=((1.0)*sj3*x2006);
IkReal x2022=(gconst8*sj3*x2004);
IkReal x2023=((1.0)*gconst7*sj3*x2004);
evalcond[0]=(((r21*x2007))+(((-1.0)*r20*x2008))+(((-1.0)*r22*x2005)));
evalcond[1]=(((r01*x2007))+sj0+(((-1.0)*r00*x2008))+(((-1.0)*r02*x2005)));
evalcond[2]=(((r11*x2007))+(((-1.0)*r10*x2008))+(((-1.0)*x2009))+(((-1.0)*r12*x2005)));
evalcond[3]=((((-1.0)*r20*x2016))+x2010+x2011+((r21*x2015))+((r21*x2013))+((r20*x2012))+((r22*x2014)));
evalcond[4]=((((-1.0)*r22*x2021))+x2017+((r21*x2020))+(((-1.0)*r21*x2023))+((r20*x2019))+((r20*x2022))+(((-1.0)*x2018)));
evalcond[5]=(((cj0*x2010))+(((-1.0)*r02*x2021))+(((-1.0)*r01*x2023))+((r00*x2019))+((r00*x2022))+((r01*x2020))+((cj0*x2011)));
evalcond[6]=(((cj0*x2018))+((r00*x2012))+(((-1.0)*x2009*x2017))+((r01*x2013))+((r01*x2015))+(((-1.0)*r00*x2016))+((r02*x2014)));
evalcond[7]=(((sj0*x2010))+(((-1.0)*r12*x2021))+((sj0*x2011))+((r11*x2020))+((r10*x2022))+(((-1.0)*r11*x2023))+((r10*x2019)));
evalcond[8]=(((r11*x2013))+((r10*x2012))+(((-1.0)*r10*x2016))+((r12*x2014))+(((-1.0)*sj0*x2017))+((sj0*x2018))+((r11*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2024 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*(1.0)*gconst8*r20*sj0))+((gconst7*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(IKsign((((gconst8*r11))+((gconst7*r10)))),-1);
if(!x2025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2024.value)+(((1.5707963267949)*(x2025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2026=IKcos(j4);
IkReal x2027=((1.0)*x2026);
IkReal x2028=IKsin(j4);
IkReal x2029=(gconst7*x2028);
IkReal x2030=((1.0)*gconst8*x2028);
IkReal x2031=((1.0)*cj0);
IkReal x2032=(cj1*sj2);
IkReal x2033=(cj2*sj1);
IkReal x2034=(gconst7*sj3);
IkReal x2035=(gconst8*sj3);
IkReal x2036=(cj3*x2028);
IkReal x2037=(cj3*gconst7*x2026);
IkReal x2038=((1.0)*cj3*gconst8*x2026);
IkReal x2039=(sj1*sj2);
IkReal x2040=(cj1*cj2);
IkReal x2041=(cj3*gconst7);
IkReal x2042=(cj3*gconst8);
IkReal x2043=((1.0)*sj3*x2028);
IkReal x2044=(gconst8*sj3*x2026);
IkReal x2045=((1.0)*gconst7*sj3*x2026);
evalcond[0]=((((-1.0)*r20*x2030))+(((-1.0)*r22*x2027))+((r21*x2029)));
evalcond[1]=((((-1.0)*r00*x2030))+sj0+(((-1.0)*r02*x2027))+((r01*x2029)));
evalcond[2]=((((-1.0)*r10*x2030))+(((-1.0)*x2031))+((r11*x2029))+(((-1.0)*r12*x2027)));
evalcond[3]=(((r22*x2036))+((r21*x2035))+((r20*x2034))+((r21*x2037))+(((-1.0)*r20*x2038))+x2033+x2032);
evalcond[4]=(((r20*x2044))+(((-1.0)*r22*x2043))+((r20*x2041))+(((-1.0)*r21*x2045))+((r21*x2042))+x2039+(((-1.0)*x2040)));
evalcond[5]=(((cj0*x2033))+(((-1.0)*r01*x2045))+((r01*x2042))+((r00*x2044))+(((-1.0)*r02*x2043))+((r00*x2041))+((cj0*x2032)));
evalcond[6]=(((r02*x2036))+(((-1.0)*r00*x2038))+((cj0*x2040))+(((-1.0)*x2031*x2039))+((r01*x2035))+((r00*x2034))+((r01*x2037)));
evalcond[7]=(((sj0*x2033))+((r10*x2041))+((sj0*x2032))+(((-1.0)*r12*x2043))+((r10*x2044))+(((-1.0)*r11*x2045))+((r11*x2042)));
evalcond[8]=(((r12*x2036))+(((-1.0)*r10*x2038))+((r11*x2035))+((r10*x2034))+((sj0*x2040))+((r11*x2037))+(((-1.0)*sj0*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2046=((1.0)*r01);
IkReal x2047=((1.0)*r00);
IkReal x2049 = ((1.0)+(((-1.0)*(1.0)*(r02*r02))));
if(IKabs(x2049)==0){
continue;
}
IkReal x2048=pow(x2049,-0.5);
CheckValue<IkReal> x2050 = IKatan2WithCheck(IkReal(((-1.0)*x2046)),IkReal(((-1.0)*x2047)),IKFAST_ATAN2_MAGTHRESH);
if(!x2050.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2050.value))));
IkReal gconst10=((-1.0)*x2046*x2048);
IkReal gconst11=(x2047*x2048);
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r01)))),IkReal(((-1.0)*(((1.0)*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2051.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x2052=((1.0)*r01);
IkReal x2053=((1.0)*r00);
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal(((-1.0)*x2052)),IkReal(((-1.0)*x2053)),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
IkReal x2054=((-1.0)*(x2056.value));
IkReal x2055=x2048;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2054);
IkReal gconst9=((3.14159265358979)+x2054);
IkReal gconst10=((-1.0)*x2052*x2055);
IkReal gconst11=(x2053*x2055);
j4eval[0]=-1.0;
j4eval[1]=r22;
j4eval[2]=sj0;
j4eval[3]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[6];
IkReal x2057=((1.0)*r01);
IkReal x2058=((1.0)*r00);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((-1.0)*x2057)),IkReal(((-1.0)*x2058)),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
IkReal x2059=((-1.0)*(x2061.value));
IkReal x2060=x2048;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2059);
IkReal gconst9=((3.14159265358979)+x2059);
IkReal gconst10=((-1.0)*x2057*x2060);
IkReal gconst11=(x2058*x2060);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=-1.0;
j4eval[3]=cj0;
j4eval[4]=r22;
j4eval[5]=((-1.0)+(r02*r02));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  || IKabs(j4eval[5]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2062=((1.0)*r01);
IkReal x2063=((1.0)*r00);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal(((-1.0)*x2062)),IkReal(((-1.0)*x2063)),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
IkReal x2064=((-1.0)*(x2066.value));
IkReal x2065=x2048;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+x2064);
IkReal gconst9=((3.14159265358979)+x2064);
IkReal gconst10=((-1.0)*x2062*x2065);
IkReal gconst11=(x2063*x2065);
IkReal x2067=((1.0)*(r02*r02));
IkReal x2070 = ((1.0)+(((-1.0)*x2067)));
if(IKabs(x2070)==0){
continue;
}
IkReal x2068=pow(x2070,-0.5);
IkReal x2069=((1.0)*x2068);
j4eval[0]=((IKabs((((cj0*r02))+((r12*sj0)))))+(IKabs(((((-1.0)*cj0*x2067*x2068))+(((-1.0)*r02*r12*sj0*x2069))+((cj0*x2069))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2071=((1.0)*gconst11);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal(((((-1.0)*cj0*r00*x2071))+((cj0*gconst10*r01))+((gconst10*r11*sj0))+(((-1.0)*r10*sj0*x2071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2071))+(((-1.0)*(1.0)*gconst10*r20)))),-1);
if(!x2073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2072.value)+(((1.5707963267949)*(x2073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2074=IKcos(j4);
IkReal x2075=((1.0)*x2074);
IkReal x2076=IKsin(j4);
IkReal x2077=(gconst10*x2076);
IkReal x2078=((1.0)*gconst11*x2076);
IkReal x2079=((1.0)*cj0);
IkReal x2080=(cj1*sj2);
IkReal x2081=(cj2*sj1);
IkReal x2082=(gconst10*sj3);
IkReal x2083=(gconst11*sj3);
IkReal x2084=(cj3*x2076);
IkReal x2085=(cj3*gconst10*x2074);
IkReal x2086=((1.0)*cj3*gconst11*x2074);
IkReal x2087=(sj1*sj2);
IkReal x2088=(cj1*cj2);
IkReal x2089=(cj3*gconst10);
IkReal x2090=(cj3*gconst11);
IkReal x2091=((1.0)*sj3*x2076);
IkReal x2092=(gconst11*sj3*x2074);
IkReal x2093=((1.0)*gconst10*sj3*x2074);
evalcond[0]=((((-1.0)*r20*x2078))+((r21*x2077))+(((-1.0)*r22*x2075)));
evalcond[1]=(((r01*x2077))+(((-1.0)*r00*x2078))+sj0+(((-1.0)*r02*x2075)));
evalcond[2]=((((-1.0)*x2079))+(((-1.0)*r10*x2078))+(((-1.0)*r12*x2075))+((r11*x2077)));
evalcond[3]=(((r22*x2084))+(((-1.0)*r20*x2086))+((r21*x2083))+((r21*x2085))+x2080+x2081+((r20*x2082)));
evalcond[4]=(((r20*x2089))+(((-1.0)*r21*x2093))+(((-1.0)*r22*x2091))+x2087+((r20*x2092))+((r21*x2090))+(((-1.0)*x2088)));
evalcond[5]=(((cj0*x2081))+((r00*x2089))+(((-1.0)*r01*x2093))+((cj0*x2080))+((r00*x2092))+((r01*x2090))+(((-1.0)*r02*x2091)));
evalcond[6]=(((r00*x2082))+(((-1.0)*x2079*x2087))+((r01*x2085))+((r01*x2083))+(((-1.0)*r00*x2086))+((r02*x2084))+((cj0*x2088)));
evalcond[7]=(((r11*x2090))+(((-1.0)*r12*x2091))+((r10*x2089))+((sj0*x2080))+(((-1.0)*r11*x2093))+((sj0*x2081))+((r10*x2092)));
evalcond[8]=(((sj0*x2088))+((r11*x2085))+((r10*x2082))+((r12*x2084))+((r11*x2083))+(((-1.0)*r10*x2086))+(((-1.0)*sj0*x2087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2094=((1.0)*cj0);
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2094)),IkReal(((((-1.0)*gconst10*r21*x2094))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
CheckValue<IkReal> x2096=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst10*r00))+(((-1.0)*(1.0)*gconst11*r01)))),-1);
if(!x2096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2095.value)+(((1.5707963267949)*(x2096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2097=IKcos(j4);
IkReal x2098=((1.0)*x2097);
IkReal x2099=IKsin(j4);
IkReal x2100=(gconst10*x2099);
IkReal x2101=((1.0)*gconst11*x2099);
IkReal x2102=((1.0)*cj0);
IkReal x2103=(cj1*sj2);
IkReal x2104=(cj2*sj1);
IkReal x2105=(gconst10*sj3);
IkReal x2106=(gconst11*sj3);
IkReal x2107=(cj3*x2099);
IkReal x2108=(cj3*gconst10*x2097);
IkReal x2109=((1.0)*cj3*gconst11*x2097);
IkReal x2110=(sj1*sj2);
IkReal x2111=(cj1*cj2);
IkReal x2112=(cj3*gconst10);
IkReal x2113=(cj3*gconst11);
IkReal x2114=((1.0)*sj3*x2099);
IkReal x2115=(gconst11*sj3*x2097);
IkReal x2116=((1.0)*gconst10*sj3*x2097);
evalcond[0]=(((r21*x2100))+(((-1.0)*r22*x2098))+(((-1.0)*r20*x2101)));
evalcond[1]=((((-1.0)*r00*x2101))+sj0+((r01*x2100))+(((-1.0)*r02*x2098)));
evalcond[2]=(((r11*x2100))+(((-1.0)*r10*x2101))+(((-1.0)*x2102))+(((-1.0)*r12*x2098)));
evalcond[3]=(((r21*x2106))+x2104+x2103+((r20*x2105))+(((-1.0)*r20*x2109))+((r22*x2107))+((r21*x2108)));
evalcond[4]=(((r20*x2115))+x2110+(((-1.0)*r21*x2116))+(((-1.0)*r22*x2114))+(((-1.0)*x2111))+((r20*x2112))+((r21*x2113)));
evalcond[5]=((((-1.0)*r01*x2116))+((cj0*x2103))+((r01*x2113))+((r00*x2115))+((r00*x2112))+(((-1.0)*r02*x2114))+((cj0*x2104)));
evalcond[6]=((((-1.0)*r00*x2109))+((cj0*x2111))+((r00*x2105))+((r01*x2108))+(((-1.0)*x2102*x2110))+((r01*x2106))+((r02*x2107)));
evalcond[7]=(((sj0*x2104))+((r10*x2115))+((r10*x2112))+(((-1.0)*r11*x2116))+(((-1.0)*r12*x2114))+((sj0*x2103))+((r11*x2113)));
evalcond[8]=(((r11*x2106))+((r12*x2107))+((sj0*x2111))+(((-1.0)*sj0*x2110))+((r10*x2105))+(((-1.0)*r10*x2109))+((r11*x2108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*(1.0)*gconst11*r20*sj0))+((gconst10*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((gconst11*r11))+((gconst10*r10)))),-1);
if(!x2118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2117.value)+(((1.5707963267949)*(x2118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2119=IKcos(j4);
IkReal x2120=((1.0)*x2119);
IkReal x2121=IKsin(j4);
IkReal x2122=(gconst10*x2121);
IkReal x2123=((1.0)*gconst11*x2121);
IkReal x2124=((1.0)*cj0);
IkReal x2125=(cj1*sj2);
IkReal x2126=(cj2*sj1);
IkReal x2127=(gconst10*sj3);
IkReal x2128=(gconst11*sj3);
IkReal x2129=(cj3*x2121);
IkReal x2130=(cj3*gconst10*x2119);
IkReal x2131=((1.0)*cj3*gconst11*x2119);
IkReal x2132=(sj1*sj2);
IkReal x2133=(cj1*cj2);
IkReal x2134=(cj3*gconst10);
IkReal x2135=(cj3*gconst11);
IkReal x2136=((1.0)*sj3*x2121);
IkReal x2137=(gconst11*sj3*x2119);
IkReal x2138=((1.0)*gconst10*sj3*x2119);
evalcond[0]=((((-1.0)*r22*x2120))+((r21*x2122))+(((-1.0)*r20*x2123)));
evalcond[1]=(((r01*x2122))+(((-1.0)*r00*x2123))+(((-1.0)*r02*x2120))+sj0);
evalcond[2]=((((-1.0)*r12*x2120))+(((-1.0)*x2124))+((r11*x2122))+(((-1.0)*r10*x2123)));
evalcond[3]=((((-1.0)*r20*x2131))+x2126+x2125+((r21*x2130))+((r22*x2129))+((r21*x2128))+((r20*x2127)));
evalcond[4]=((((-1.0)*x2133))+(((-1.0)*r21*x2138))+(((-1.0)*r22*x2136))+((r20*x2134))+((r21*x2135))+((r20*x2137))+x2132);
evalcond[5]=(((r01*x2135))+(((-1.0)*r02*x2136))+((r00*x2137))+((r00*x2134))+(((-1.0)*r01*x2138))+((cj0*x2126))+((cj0*x2125)));
evalcond[6]=((((-1.0)*r00*x2131))+((r01*x2130))+((r00*x2127))+(((-1.0)*x2124*x2132))+((r01*x2128))+((r02*x2129))+((cj0*x2133)));
evalcond[7]=((((-1.0)*r11*x2138))+((r11*x2135))+(((-1.0)*r12*x2136))+((sj0*x2125))+((sj0*x2126))+((r10*x2137))+((r10*x2134)));
evalcond[8]=(((r11*x2128))+((r11*x2130))+((r12*x2129))+((sj0*x2133))+((r10*x2127))+(((-1.0)*r10*x2131))+(((-1.0)*sj0*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2139=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2139;
j4eval[1]=IKsign(x2139);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2140=((1.0)*cj5);
IkReal x2141=((((-1.0)*r21*x2140))+(((-1.0)*(1.0)*r20*sj5)));
j4eval[0]=x2141;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x2140)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2142=(r01*((cj3*r21)));
IkReal x2143=cj5*cj5;
IkReal x2144=((1.0)*cj5*sj5);
IkReal x2145=(((cj3*r02*r22))+x2142+((cj3*r00*r20*x2143))+(((-1.0)*cj3*r01*r20*x2144))+(((-1.0)*cj3*r00*r21*x2144))+(((-1.0)*x2142*x2143)));
j4eval[0]=x2145;
j4eval[1]=IKsign(x2145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2146=(r01*((cj3*r21)));
IkReal x2147=cj5*cj5;
IkReal x2148=(cj5*sj5);
IkReal x2149=((1.0)*cj5*r01*sj3);
IkReal x2150=((1.0)*r00*sj3);
IkReal x2151=(sj3*x2147);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2150))+(((-1.0)*r22*x2149)))),IkReal(((((-1.0)*r21*x2150))+((r01*r20*x2151))+((r00*r21*x2151))+((r00*r20*sj3*x2148))+(((-1.0)*r21*sj5*x2149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
CheckValue<IkReal> x2153=IKPowWithIntegerCheck(IKsign((((cj3*r02*r22))+x2146+(((-1.0)*cj3*cj5*r01*r20*sj5))+(((-1.0)*cj3*r00*r21*x2148))+((cj3*r00*r20*x2147))+(((-1.0)*x2146*x2147)))),-1);
if(!x2153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2152.value)+(((1.5707963267949)*(x2153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2154=IKcos(j4);
IkReal x2155=((1.0)*x2154);
IkReal x2156=IKsin(j4);
IkReal x2157=(sj5*x2156);
IkReal x2158=((1.0)*cj5*x2156);
IkReal x2159=(cj5*sj3);
IkReal x2160=(sj3*sj5);
IkReal x2161=(cj3*x2156);
IkReal x2162=(cj3*sj5*x2154);
IkReal x2163=((1.0)*cj3*cj5*x2154);
IkReal x2164=(cj3*cj5);
IkReal x2165=(cj3*sj5);
IkReal x2166=((1.0)*sj3*x2156);
IkReal x2167=(cj5*sj3*x2154);
IkReal x2168=((1.0)*sj3*sj5*x2154);
IkReal x2169=(((cj1*sj2))+((cj2*sj1)));
IkReal x2170=(cj1*cj2);
IkReal x2171=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2155))+(((-1.0)*r20*x2158))+((r21*x2157)));
evalcond[1]=((((-1.0)*r12*x2155))+((r11*x2157))+(((-1.0)*r10*x2158)));
evalcond[2]=((1.0)+((r01*x2157))+(((-1.0)*r00*x2158))+(((-1.0)*r02*x2155)));
evalcond[3]=((((-1.0)*r00*x2163))+((r02*x2161))+((r00*x2160))+((r01*x2159))+((r01*x2162)));
evalcond[4]=((((-1.0)*r02*x2166))+((r01*x2164))+((r00*x2167))+(((-1.0)*r01*x2168))+((r00*x2165)));
evalcond[5]=(((r22*x2161))+x2169+((r20*x2160))+(((-1.0)*r20*x2163))+((r21*x2162))+((r21*x2159)));
evalcond[6]=(((r10*x2167))+(((-1.0)*r12*x2166))+((r11*x2164))+(((-1.0)*r11*x2168))+x2169+((r10*x2165)));
evalcond[7]=(((r10*x2160))+x2170+((r12*x2161))+((r11*x2159))+((r11*x2162))+(((-1.0)*x2171))+(((-1.0)*r10*x2163)));
evalcond[8]=(x2171+((r21*x2164))+((r20*x2165))+(((-1.0)*x2170))+(((-1.0)*r21*x2168))+(((-1.0)*r22*x2166))+((r20*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2172=((1.0)*cj5);
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2172)))),-1);
if(!x2174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2173.value)+(((1.5707963267949)*(x2174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2175=IKcos(j4);
IkReal x2176=((1.0)*x2175);
IkReal x2177=IKsin(j4);
IkReal x2178=(sj5*x2177);
IkReal x2179=((1.0)*cj5*x2177);
IkReal x2180=(cj5*sj3);
IkReal x2181=(sj3*sj5);
IkReal x2182=(cj3*x2177);
IkReal x2183=(cj3*sj5*x2175);
IkReal x2184=((1.0)*cj3*cj5*x2175);
IkReal x2185=(cj3*cj5);
IkReal x2186=(cj3*sj5);
IkReal x2187=((1.0)*sj3*x2177);
IkReal x2188=(cj5*sj3*x2175);
IkReal x2189=((1.0)*sj3*sj5*x2175);
IkReal x2190=(((cj1*sj2))+((cj2*sj1)));
IkReal x2191=(cj1*cj2);
IkReal x2192=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2176))+(((-1.0)*r20*x2179))+((r21*x2178)));
evalcond[1]=(((r11*x2178))+(((-1.0)*r12*x2176))+(((-1.0)*r10*x2179)));
evalcond[2]=((1.0)+(((-1.0)*r02*x2176))+(((-1.0)*r00*x2179))+((r01*x2178)));
evalcond[3]=(((r01*x2180))+(((-1.0)*r00*x2184))+((r01*x2183))+((r02*x2182))+((r00*x2181)));
evalcond[4]=(((r01*x2185))+((r00*x2188))+(((-1.0)*r01*x2189))+(((-1.0)*r02*x2187))+((r00*x2186)));
evalcond[5]=(((r21*x2183))+x2190+((r21*x2180))+((r22*x2182))+(((-1.0)*r20*x2184))+((r20*x2181)));
evalcond[6]=(x2190+((r10*x2186))+((r11*x2185))+(((-1.0)*r11*x2189))+(((-1.0)*r12*x2187))+((r10*x2188)));
evalcond[7]=(((r10*x2181))+x2191+((r11*x2180))+(((-1.0)*r10*x2184))+((r12*x2182))+((r11*x2183))+(((-1.0)*x2192)));
evalcond[8]=(x2192+((r20*x2186))+((r21*x2185))+(((-1.0)*r21*x2189))+(((-1.0)*x2191))+(((-1.0)*r22*x2187))+((r20*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*(1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2193.value)+(((1.5707963267949)*(x2194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2195=IKcos(j4);
IkReal x2196=((1.0)*x2195);
IkReal x2197=IKsin(j4);
IkReal x2198=(sj5*x2197);
IkReal x2199=((1.0)*cj5*x2197);
IkReal x2200=(cj5*sj3);
IkReal x2201=(sj3*sj5);
IkReal x2202=(cj3*x2197);
IkReal x2203=(cj3*sj5*x2195);
IkReal x2204=((1.0)*cj3*cj5*x2195);
IkReal x2205=(cj3*cj5);
IkReal x2206=(cj3*sj5);
IkReal x2207=((1.0)*sj3*x2197);
IkReal x2208=(cj5*sj3*x2195);
IkReal x2209=((1.0)*sj3*sj5*x2195);
IkReal x2210=(((cj1*sj2))+((cj2*sj1)));
IkReal x2211=(cj1*cj2);
IkReal x2212=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2196))+((r21*x2198))+(((-1.0)*r20*x2199)));
evalcond[1]=((((-1.0)*r10*x2199))+((r11*x2198))+(((-1.0)*r12*x2196)));
evalcond[2]=((1.0)+(((-1.0)*r00*x2199))+(((-1.0)*r02*x2196))+((r01*x2198)));
evalcond[3]=(((r02*x2202))+((r01*x2200))+(((-1.0)*r00*x2204))+((r00*x2201))+((r01*x2203)));
evalcond[4]=((((-1.0)*r01*x2209))+((r00*x2208))+((r01*x2205))+((r00*x2206))+(((-1.0)*r02*x2207)));
evalcond[5]=(((r21*x2200))+((r20*x2201))+(((-1.0)*r20*x2204))+((r22*x2202))+x2210+((r21*x2203)));
evalcond[6]=((((-1.0)*r11*x2209))+((r10*x2206))+x2210+((r11*x2205))+(((-1.0)*r12*x2207))+((r10*x2208)));
evalcond[7]=(((r10*x2201))+(((-1.0)*x2212))+x2211+((r11*x2203))+((r11*x2200))+(((-1.0)*r10*x2204))+((r12*x2202)));
evalcond[8]=((((-1.0)*r21*x2209))+(((-1.0)*r22*x2207))+((r20*x2206))+x2212+((r20*x2208))+(((-1.0)*x2211))+((r21*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2213=(((r10*sj5))+((cj5*r11)));
j4eval[0]=x2213;
j4eval[1]=IKsign(x2213);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2214=((1.0)*sj5);
IkReal x2215=((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2214)));
j4eval[0]=x2215;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x2214)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2215);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2216=(r01*((cj3*r21)));
IkReal x2217=cj5*cj5;
IkReal x2218=((1.0)*cj5*sj5);
IkReal x2219=((((-1.0)*cj3*r01*r20*x2218))+(((-1.0)*x2216*x2217))+((cj3*r02*r22))+((cj3*r00*r20*x2217))+x2216+(((-1.0)*cj3*r00*r21*x2218)));
j4eval[0]=x2219;
j4eval[1]=IKsign(x2219);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2220=(r01*((cj3*r21)));
IkReal x2221=cj5*cj5;
IkReal x2222=(cj5*sj5);
IkReal x2223=((1.0)*cj5*r01*sj3);
IkReal x2224=((1.0)*r00*sj3);
IkReal x2225=(sj3*x2221);
CheckValue<IkReal> x2226=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r00*r21*x2222))+((cj3*r02*r22))+((cj3*r00*r20*x2221))+(((-1.0)*cj3*cj5*r01*r20*sj5))+x2220+(((-1.0)*x2220*x2221)))),-1);
if(!x2226.valid){
continue;
}
CheckValue<IkReal> x2227 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2224))+(((-1.0)*r22*x2223)))),IkReal((((r00*r20*sj3*x2222))+((r00*r21*x2225))+((r01*r20*x2225))+(((-1.0)*r21*x2224))+(((-1.0)*r21*sj5*x2223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2226.value)))+(x2227.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2228=IKcos(j4);
IkReal x2229=((1.0)*x2228);
IkReal x2230=IKsin(j4);
IkReal x2231=(sj5*x2230);
IkReal x2232=((1.0)*cj5*x2230);
IkReal x2233=(cj5*sj3);
IkReal x2234=(sj3*sj5);
IkReal x2235=(cj3*x2230);
IkReal x2236=(cj3*sj5*x2228);
IkReal x2237=((1.0)*cj3*cj5*x2228);
IkReal x2238=(cj3*cj5);
IkReal x2239=(cj3*sj5);
IkReal x2240=((1.0)*sj3*x2230);
IkReal x2241=(cj5*sj3*x2228);
IkReal x2242=((1.0)*sj3*sj5*x2228);
IkReal x2243=(cj1*sj2);
IkReal x2244=(cj2*sj1);
IkReal x2245=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2229))+((r21*x2231))+(((-1.0)*r20*x2232)));
evalcond[1]=((((-1.0)*r10*x2232))+(((-1.0)*r12*x2229))+((r11*x2231)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x2232))+(((-1.0)*r02*x2229))+((r01*x2231)));
evalcond[3]=(((r01*x2236))+((r00*x2234))+((r01*x2233))+(((-1.0)*r00*x2237))+((r02*x2235)));
evalcond[4]=(((r00*x2241))+((r01*x2238))+(((-1.0)*r02*x2240))+((r00*x2239))+(((-1.0)*r01*x2242)));
evalcond[5]=(((r21*x2236))+((r21*x2233))+(((-1.0)*r20*x2237))+((r20*x2234))+((r22*x2235))+x2243+x2244);
evalcond[6]=(((r10*x2234))+(((-1.0)*r10*x2237))+((r12*x2235))+((r11*x2236))+x2245+((r11*x2233)));
evalcond[7]=(((r20*x2241))+((r20*x2239))+(((-1.0)*r21*x2242))+((r21*x2238))+(((-1.0)*r22*x2240))+x2245);
evalcond[8]=((((-1.0)*x2243))+((r10*x2239))+(((-1.0)*r11*x2242))+((r11*x2238))+(((-1.0)*x2244))+((r10*x2241))+(((-1.0)*r12*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2246=((1.0)*sj5);
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*cj5*r21))+(((-1.0)*r20*x2246)))),-1);
if(!x2247.valid){
continue;
}
CheckValue<IkReal> x2248 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r12)))),IkReal(((((-1.0)*r11*x2246))+((cj5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2247.value)))+(x2248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2249=IKcos(j4);
IkReal x2250=((1.0)*x2249);
IkReal x2251=IKsin(j4);
IkReal x2252=(sj5*x2251);
IkReal x2253=((1.0)*cj5*x2251);
IkReal x2254=(cj5*sj3);
IkReal x2255=(sj3*sj5);
IkReal x2256=(cj3*x2251);
IkReal x2257=(cj3*sj5*x2249);
IkReal x2258=((1.0)*cj3*cj5*x2249);
IkReal x2259=(cj3*cj5);
IkReal x2260=(cj3*sj5);
IkReal x2261=((1.0)*sj3*x2251);
IkReal x2262=(cj5*sj3*x2249);
IkReal x2263=((1.0)*sj3*sj5*x2249);
IkReal x2264=(cj1*sj2);
IkReal x2265=(cj2*sj1);
IkReal x2266=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2252))+(((-1.0)*r22*x2250))+(((-1.0)*r20*x2253)));
evalcond[1]=((((-1.0)*r10*x2253))+(((-1.0)*r12*x2250))+((r11*x2252)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2250))+(((-1.0)*r00*x2253))+((r01*x2252)));
evalcond[3]=(((r00*x2255))+((r02*x2256))+(((-1.0)*r00*x2258))+((r01*x2254))+((r01*x2257)));
evalcond[4]=(((r00*x2262))+((r01*x2259))+(((-1.0)*r01*x2263))+(((-1.0)*r02*x2261))+((r00*x2260)));
evalcond[5]=(x2265+x2264+((r21*x2257))+((r21*x2254))+((r20*x2255))+(((-1.0)*r20*x2258))+((r22*x2256)));
evalcond[6]=(((r11*x2257))+((r11*x2254))+x2266+((r12*x2256))+(((-1.0)*r10*x2258))+((r10*x2255)));
evalcond[7]=(((r21*x2259))+((r20*x2260))+x2266+(((-1.0)*r22*x2261))+(((-1.0)*r21*x2263))+((r20*x2262)));
evalcond[8]=((((-1.0)*x2265))+(((-1.0)*x2264))+((r10*x2260))+(((-1.0)*r11*x2263))+((r10*x2262))+(((-1.0)*r12*x2261))+((r11*x2259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2267=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal((((cj5*r20))+(((-1.0)*(1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2267.value)))+(x2268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2269=IKcos(j4);
IkReal x2270=((1.0)*x2269);
IkReal x2271=IKsin(j4);
IkReal x2272=(sj5*x2271);
IkReal x2273=((1.0)*cj5*x2271);
IkReal x2274=(cj5*sj3);
IkReal x2275=(sj3*sj5);
IkReal x2276=(cj3*x2271);
IkReal x2277=(cj3*sj5*x2269);
IkReal x2278=((1.0)*cj3*cj5*x2269);
IkReal x2279=(cj3*cj5);
IkReal x2280=(cj3*sj5);
IkReal x2281=((1.0)*sj3*x2271);
IkReal x2282=(cj5*sj3*x2269);
IkReal x2283=((1.0)*sj3*sj5*x2269);
IkReal x2284=(cj1*sj2);
IkReal x2285=(cj2*sj1);
IkReal x2286=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2270))+(((-1.0)*r20*x2273))+((r21*x2272)));
evalcond[1]=((((-1.0)*r10*x2273))+((r11*x2272))+(((-1.0)*r12*x2270)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x2270))+(((-1.0)*r00*x2273))+((r01*x2272)));
evalcond[3]=(((r01*x2277))+((r02*x2276))+((r00*x2275))+(((-1.0)*r00*x2278))+((r01*x2274)));
evalcond[4]=((((-1.0)*r02*x2281))+((r01*x2279))+((r00*x2282))+(((-1.0)*r01*x2283))+((r00*x2280)));
evalcond[5]=(x2285+x2284+((r21*x2274))+(((-1.0)*r20*x2278))+((r21*x2277))+((r22*x2276))+((r20*x2275)));
evalcond[6]=(x2286+((r12*x2276))+((r11*x2277))+((r10*x2275))+(((-1.0)*r10*x2278))+((r11*x2274)));
evalcond[7]=(x2286+((r21*x2279))+(((-1.0)*r21*x2283))+(((-1.0)*r22*x2281))+((r20*x2280))+((r20*x2282)));
evalcond[8]=((((-1.0)*r12*x2281))+((r11*x2279))+((r10*x2282))+(((-1.0)*x2285))+(((-1.0)*x2284))+((r10*x2280))+(((-1.0)*r11*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2288 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2288)==0){
continue;
}
IkReal x2287=pow(x2288,-0.5);
CheckValue<IkReal> x2289 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2289.valid){
continue;
}
IkReal gconst12=((-1.0)*(((1.0)*(x2289.value))));
IkReal gconst13=((-1.0)*r11*x2287);
IkReal gconst14=(r10*x2287);
CheckValue<IkReal> x2290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x2290.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
IkReal x2291=((-1.0)*(((1.0)*(x2293.value))));
IkReal x2292=x2287;
sj5=gconst13;
cj5=gconst14;
j5=x2291;
IkReal gconst12=x2291;
IkReal gconst13=((-1.0)*r11*x2292);
IkReal gconst14=(r10*x2292);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2296 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2296.valid){
continue;
}
IkReal x2294=((-1.0)*(((1.0)*(x2296.value))));
IkReal x2295=x2287;
sj5=gconst13;
cj5=gconst14;
j5=x2294;
IkReal gconst12=x2294;
IkReal gconst13=((-1.0)*r11*x2295);
IkReal gconst14=(r10*x2295);
IkReal x2297=(cj0*r02);
IkReal x2298=((1.0)*(r12*r12));
IkReal x2301 = ((1.0)+(((-1.0)*x2298)));
if(IKabs(x2301)==0){
continue;
}
IkReal x2299=pow(x2301,-0.5);
IkReal x2300=(sj0*x2299);
j4eval[0]=((IKabs((x2297+((r12*sj0)))))+(IKabs(((((-1.0)*x2298*x2300))+(((-1.0)*r12*x2297*x2299))+x2300))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2304 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2304.valid){
continue;
}
IkReal x2302=((-1.0)*(((1.0)*(x2304.value))));
IkReal x2303=x2287;
sj5=gconst13;
cj5=gconst14;
j5=x2302;
IkReal gconst12=x2302;
IkReal gconst13=((-1.0)*r11*x2303);
IkReal gconst14=(r10*x2303);
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2307.valid){
continue;
}
IkReal x2305=(cj3*(x2307.value));
IkReal x2306=((((2.0)*r10*r11*r20*r21*x2305))+((cj3*(r22*r22)))+((x2305*(r11*r11)*(r21*r21)))+((x2305*(r10*r10)*(r20*r20))));
j4eval[0]=x2306;
j4eval[1]=IKsign(x2306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2308=(gconst14*r20);
IkReal x2309=gconst13*gconst13;
IkReal x2310=r21*r21;
IkReal x2311=gconst14*gconst14;
IkReal x2312=r20*r20;
IkReal x2313=((1.0)*r22);
IkReal x2314=(cj1*sj2);
IkReal x2315=(cj2*sj1);
IkReal x2316=((1.0)*r22*sj3);
IkReal x2317=((1.0)*gconst13*r21);
IkReal x2318=(gconst13*gconst14*sj3);
IkReal x2319=(r20*r21*sj3);
CheckValue<IkReal> x2320=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*gconst13*r21*x2308))+((cj3*x2311*x2312))+((cj3*(r22*r22)))+((cj3*x2309*x2310)))),-1);
if(!x2320.valid){
continue;
}
CheckValue<IkReal> x2321 = IKatan2WithCheck(IkReal(((((-1.0)*x2313*x2314))+(((-1.0)*gconst14*r21*x2316))+(((-1.0)*gconst13*r20*x2316))+(((-1.0)*x2313*x2315)))),IkReal((((x2308*x2314))+(((-1.0)*x2310*x2318))+((x2308*x2315))+((x2312*x2318))+((x2311*x2319))+(((-1.0)*x2309*x2319))+(((-1.0)*x2314*x2317))+(((-1.0)*x2315*x2317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2321.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2320.value)))+(x2321.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2322=IKcos(j4);
IkReal x2323=((1.0)*x2322);
IkReal x2324=IKsin(j4);
IkReal x2325=(gconst13*x2324);
IkReal x2326=((1.0)*gconst14*x2324);
IkReal x2327=((1.0)*cj0);
IkReal x2328=(cj1*sj2);
IkReal x2329=(cj2*sj1);
IkReal x2330=(gconst13*sj3);
IkReal x2331=(gconst14*sj3);
IkReal x2332=(cj3*x2324);
IkReal x2333=(cj3*gconst13*x2322);
IkReal x2334=((1.0)*cj3*gconst14*x2322);
IkReal x2335=(sj1*sj2);
IkReal x2336=(cj1*cj2);
IkReal x2337=(cj3*gconst13);
IkReal x2338=(cj3*gconst14);
IkReal x2339=((1.0)*sj3*x2324);
IkReal x2340=(gconst14*sj3*x2322);
IkReal x2341=((1.0)*gconst13*sj3*x2322);
evalcond[0]=(((r21*x2325))+(((-1.0)*r20*x2326))+(((-1.0)*r22*x2323)));
evalcond[1]=((((-1.0)*r02*x2323))+(((-1.0)*r00*x2326))+((r01*x2325))+sj0);
evalcond[2]=((((-1.0)*r12*x2323))+(((-1.0)*r10*x2326))+((r11*x2325))+(((-1.0)*x2327)));
evalcond[3]=(((r21*x2333))+((r20*x2330))+(((-1.0)*r20*x2334))+((r21*x2331))+x2329+x2328+((r22*x2332)));
evalcond[4]=((((-1.0)*r21*x2341))+((r20*x2340))+((r20*x2337))+(((-1.0)*x2336))+(((-1.0)*r22*x2339))+x2335+((r21*x2338)));
evalcond[5]=(((cj0*x2329))+(((-1.0)*r02*x2339))+((r00*x2337))+(((-1.0)*r01*x2341))+((r00*x2340))+((cj0*x2328))+((r01*x2338)));
evalcond[6]=(((r01*x2333))+((cj0*x2336))+(((-1.0)*r00*x2334))+(((-1.0)*x2327*x2335))+((r02*x2332))+((r01*x2331))+((r00*x2330)));
evalcond[7]=(((r10*x2337))+(((-1.0)*r11*x2341))+((sj0*x2329))+((r10*x2340))+((r11*x2338))+(((-1.0)*r12*x2339))+((sj0*x2328)));
evalcond[8]=(((r11*x2333))+((r12*x2332))+((sj0*x2336))+((r11*x2331))+((r10*x2330))+(((-1.0)*r10*x2334))+(((-1.0)*sj0*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2342=((1.0)*gconst14);
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((cj0*gconst13*r01))+(((-1.0)*r10*sj0*x2342))+((gconst13*r11*sj0))+(((-1.0)*cj0*r00*x2342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2342))+(((-1.0)*(1.0)*gconst13*r20)))),-1);
if(!x2344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2343.value)+(((1.5707963267949)*(x2344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2345=IKcos(j4);
IkReal x2346=((1.0)*x2345);
IkReal x2347=IKsin(j4);
IkReal x2348=(gconst13*x2347);
IkReal x2349=((1.0)*gconst14*x2347);
IkReal x2350=((1.0)*cj0);
IkReal x2351=(cj1*sj2);
IkReal x2352=(cj2*sj1);
IkReal x2353=(gconst13*sj3);
IkReal x2354=(gconst14*sj3);
IkReal x2355=(cj3*x2347);
IkReal x2356=(cj3*gconst13*x2345);
IkReal x2357=((1.0)*cj3*gconst14*x2345);
IkReal x2358=(sj1*sj2);
IkReal x2359=(cj1*cj2);
IkReal x2360=(cj3*gconst13);
IkReal x2361=(cj3*gconst14);
IkReal x2362=((1.0)*sj3*x2347);
IkReal x2363=(gconst14*sj3*x2345);
IkReal x2364=((1.0)*gconst13*sj3*x2345);
evalcond[0]=(((r21*x2348))+(((-1.0)*r20*x2349))+(((-1.0)*r22*x2346)));
evalcond[1]=((((-1.0)*r02*x2346))+((r01*x2348))+(((-1.0)*r00*x2349))+sj0);
evalcond[2]=((((-1.0)*r10*x2349))+((r11*x2348))+(((-1.0)*x2350))+(((-1.0)*r12*x2346)));
evalcond[3]=(((r22*x2355))+((r20*x2353))+(((-1.0)*r20*x2357))+x2352+x2351+((r21*x2354))+((r21*x2356)));
evalcond[4]=(((r21*x2361))+(((-1.0)*r22*x2362))+x2358+(((-1.0)*r21*x2364))+(((-1.0)*x2359))+((r20*x2360))+((r20*x2363)));
evalcond[5]=(((cj0*x2352))+((cj0*x2351))+((r00*x2360))+((r00*x2363))+(((-1.0)*r01*x2364))+((r01*x2361))+(((-1.0)*r02*x2362)));
evalcond[6]=((((-1.0)*x2350*x2358))+(((-1.0)*r00*x2357))+((r01*x2354))+((cj0*x2359))+((r00*x2353))+((r02*x2355))+((r01*x2356)));
evalcond[7]=(((r10*x2360))+((r10*x2363))+((r11*x2361))+(((-1.0)*r11*x2364))+(((-1.0)*r12*x2362))+((sj0*x2352))+((sj0*x2351)));
evalcond[8]=((((-1.0)*r10*x2357))+((sj0*x2359))+((r11*x2354))+(((-1.0)*sj0*x2358))+((r12*x2355))+((r10*x2353))+((r11*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2365=((1.0)*cj0);
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst13*r00))+(((-1.0)*(1.0)*gconst14*r01)))),-1);
if(!x2366.valid){
continue;
}
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2365)),IkReal(((((-1.0)*gconst13*r21*x2365))+((cj0*gconst14*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2366.value)))+(x2367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2368=IKcos(j4);
IkReal x2369=((1.0)*x2368);
IkReal x2370=IKsin(j4);
IkReal x2371=(gconst13*x2370);
IkReal x2372=((1.0)*gconst14*x2370);
IkReal x2373=((1.0)*cj0);
IkReal x2374=(cj1*sj2);
IkReal x2375=(cj2*sj1);
IkReal x2376=(gconst13*sj3);
IkReal x2377=(gconst14*sj3);
IkReal x2378=(cj3*x2370);
IkReal x2379=(cj3*gconst13*x2368);
IkReal x2380=((1.0)*cj3*gconst14*x2368);
IkReal x2381=(sj1*sj2);
IkReal x2382=(cj1*cj2);
IkReal x2383=(cj3*gconst13);
IkReal x2384=(cj3*gconst14);
IkReal x2385=((1.0)*sj3*x2370);
IkReal x2386=(gconst14*sj3*x2368);
IkReal x2387=((1.0)*gconst13*sj3*x2368);
evalcond[0]=(((r21*x2371))+(((-1.0)*r20*x2372))+(((-1.0)*r22*x2369)));
evalcond[1]=((((-1.0)*r00*x2372))+((r01*x2371))+sj0+(((-1.0)*r02*x2369)));
evalcond[2]=((((-1.0)*x2373))+((r11*x2371))+(((-1.0)*r10*x2372))+(((-1.0)*r12*x2369)));
evalcond[3]=((((-1.0)*r20*x2380))+x2374+x2375+((r22*x2378))+((r21*x2377))+((r21*x2379))+((r20*x2376)));
evalcond[4]=((((-1.0)*x2382))+(((-1.0)*r22*x2385))+((r20*x2383))+((r20*x2386))+x2381+((r21*x2384))+(((-1.0)*r21*x2387)));
evalcond[5]=(((cj0*x2375))+(((-1.0)*r02*x2385))+((cj0*x2374))+((r00*x2383))+(((-1.0)*r01*x2387))+((r00*x2386))+((r01*x2384)));
evalcond[6]=(((r02*x2378))+(((-1.0)*r00*x2380))+((cj0*x2382))+((r01*x2377))+(((-1.0)*x2373*x2381))+((r00*x2376))+((r01*x2379)));
evalcond[7]=((((-1.0)*r11*x2387))+((sj0*x2375))+((r10*x2386))+((sj0*x2374))+((r10*x2383))+(((-1.0)*r12*x2385))+((r11*x2384)));
evalcond[8]=((((-1.0)*sj0*x2381))+((r10*x2376))+((r11*x2377))+((r12*x2378))+((r11*x2379))+((sj0*x2382))+(((-1.0)*r10*x2380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2389 = ((1.0)+(((-1.0)*(1.0)*(r12*r12))));
if(IKabs(x2389)==0){
continue;
}
IkReal x2388=((1.0)*(pow(x2389,-0.5)));
CheckValue<IkReal> x2390 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2390.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(1.0)*(x2390.value))));
IkReal gconst16=(r11*x2388);
IkReal gconst17=((-1.0)*r10*x2388);
CheckValue<IkReal> x2391 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2391.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x2391.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x2394 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2394.valid){
continue;
}
IkReal x2392=((-1.0)*(((1.0)*(x2394.value))));
IkReal x2393=x2388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2392);
IkReal gconst15=((3.14159265358979)+x2392);
IkReal gconst16=(r11*x2393);
IkReal gconst17=((-1.0)*r10*x2393);
j4eval[0]=-1.0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((-1.0)+(r12*r12));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2397 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2397.valid){
continue;
}
IkReal x2395=((-1.0)*(((1.0)*(x2397.value))));
IkReal x2396=x2388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2395);
IkReal gconst15=((3.14159265358979)+x2395);
IkReal gconst16=(r11*x2396);
IkReal gconst17=((-1.0)*r10*x2396);
IkReal x2398=(cj0*r02);
IkReal x2399=((1.0)*(r12*r12));
IkReal x2402 = ((1.0)+(((-1.0)*x2399)));
if(IKabs(x2402)==0){
continue;
}
IkReal x2400=pow(x2402,-0.5);
IkReal x2401=(sj0*x2400);
j4eval[0]=((((1.0)*(IKabs(((((-1.0)*r12*x2398*x2400))+(((-1.0)*x2399*x2401))+x2401)))))+(((1.0)*(IKabs((x2398+((r12*sj0))))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2405 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2405.valid){
continue;
}
IkReal x2403=((-1.0)*(((1.0)*(x2405.value))));
IkReal x2404=x2388;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+x2403);
IkReal gconst15=((3.14159265358979)+x2403);
IkReal gconst16=(r11*x2404);
IkReal gconst17=((-1.0)*r10*x2404);
CheckValue<IkReal> x2408=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(1.0)*(r12*r12)))),-1);
if(!x2408.valid){
continue;
}
IkReal x2406=x2408.value;
IkReal x2407=((1.0)*cj3*x2406);
j4eval[0]=IKsign((((x2407*(r10*r10)*(r20*r20)))+((x2407*(r11*r11)*(r21*r21)))+((cj3*(r22*r22)))+(((2.0)*cj3*r10*r11*r20*r21*x2406))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2409=(gconst17*r20);
IkReal x2410=gconst16*gconst16;
IkReal x2411=r21*r21;
IkReal x2412=gconst17*gconst17;
IkReal x2413=r20*r20;
IkReal x2414=((1.0)*r22);
IkReal x2415=(cj1*sj2);
IkReal x2416=(cj2*sj1);
IkReal x2417=((1.0)*r22*sj3);
IkReal x2418=((1.0)*gconst16*r21);
IkReal x2419=(gconst16*gconst17*sj3);
IkReal x2420=(r20*r21*sj3);
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*gconst16*r21*x2409))+((cj3*x2410*x2411))+((cj3*(r22*r22)))+((cj3*x2412*x2413)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(((((-1.0)*gconst17*r21*x2417))+(((-1.0)*x2414*x2416))+(((-1.0)*gconst16*r20*x2417))+(((-1.0)*x2414*x2415)))),IkReal((((x2409*x2416))+(((-1.0)*x2411*x2419))+(((-1.0)*x2410*x2420))+((x2412*x2420))+(((-1.0)*x2415*x2418))+(((-1.0)*x2416*x2418))+((x2409*x2415))+((x2413*x2419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2421.value)))+(x2422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2423=IKcos(j4);
IkReal x2424=((1.0)*x2423);
IkReal x2425=IKsin(j4);
IkReal x2426=(gconst16*x2425);
IkReal x2427=((1.0)*gconst17*x2425);
IkReal x2428=((1.0)*cj0);
IkReal x2429=(cj1*sj2);
IkReal x2430=(cj2*sj1);
IkReal x2431=(gconst16*sj3);
IkReal x2432=(gconst17*sj3);
IkReal x2433=(cj3*x2425);
IkReal x2434=(cj3*gconst16*x2423);
IkReal x2435=((1.0)*cj3*gconst17*x2423);
IkReal x2436=(sj1*sj2);
IkReal x2437=(cj1*cj2);
IkReal x2438=(cj3*gconst16);
IkReal x2439=(cj3*gconst17);
IkReal x2440=((1.0)*sj3*x2425);
IkReal x2441=(gconst17*sj3*x2423);
IkReal x2442=((1.0)*gconst16*sj3*x2423);
evalcond[0]=((((-1.0)*r22*x2424))+(((-1.0)*r20*x2427))+((r21*x2426)));
evalcond[1]=((((-1.0)*r02*x2424))+(((-1.0)*r00*x2427))+sj0+((r01*x2426)));
evalcond[2]=(((r11*x2426))+(((-1.0)*r10*x2427))+(((-1.0)*r12*x2424))+(((-1.0)*x2428)));
evalcond[3]=(((r20*x2431))+(((-1.0)*r20*x2435))+((r21*x2434))+((r22*x2433))+x2430+x2429+((r21*x2432)));
evalcond[4]=(((r20*x2441))+((r20*x2438))+(((-1.0)*x2437))+(((-1.0)*r21*x2442))+(((-1.0)*r22*x2440))+x2436+((r21*x2439)));
evalcond[5]=(((cj0*x2430))+((r00*x2441))+(((-1.0)*r01*x2442))+((r00*x2438))+(((-1.0)*r02*x2440))+((cj0*x2429))+((r01*x2439)));
evalcond[6]=(((r01*x2434))+(((-1.0)*x2428*x2436))+(((-1.0)*r00*x2435))+((cj0*x2437))+((r00*x2431))+((r02*x2433))+((r01*x2432)));
evalcond[7]=(((sj0*x2430))+(((-1.0)*r11*x2442))+((r11*x2439))+((sj0*x2429))+(((-1.0)*r12*x2440))+((r10*x2438))+((r10*x2441)));
evalcond[8]=(((r11*x2434))+((r10*x2431))+((sj0*x2437))+(((-1.0)*r10*x2435))+((r12*x2433))+(((-1.0)*sj0*x2436))+((r11*x2432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=((1.0)*gconst17);
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*r10*sj0*x2443))+(((-1.0)*cj0*r00*x2443))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2443))+(((-1.0)*(1.0)*gconst16*r20)))),-1);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2446=IKcos(j4);
IkReal x2447=((1.0)*x2446);
IkReal x2448=IKsin(j4);
IkReal x2449=(gconst16*x2448);
IkReal x2450=((1.0)*gconst17*x2448);
IkReal x2451=((1.0)*cj0);
IkReal x2452=(cj1*sj2);
IkReal x2453=(cj2*sj1);
IkReal x2454=(gconst16*sj3);
IkReal x2455=(gconst17*sj3);
IkReal x2456=(cj3*x2448);
IkReal x2457=(cj3*gconst16*x2446);
IkReal x2458=((1.0)*cj3*gconst17*x2446);
IkReal x2459=(sj1*sj2);
IkReal x2460=(cj1*cj2);
IkReal x2461=(cj3*gconst16);
IkReal x2462=(cj3*gconst17);
IkReal x2463=((1.0)*sj3*x2448);
IkReal x2464=(gconst17*sj3*x2446);
IkReal x2465=((1.0)*gconst16*sj3*x2446);
evalcond[0]=(((r21*x2449))+(((-1.0)*r20*x2450))+(((-1.0)*r22*x2447)));
evalcond[1]=((((-1.0)*r02*x2447))+(((-1.0)*r00*x2450))+((r01*x2449))+sj0);
evalcond[2]=((((-1.0)*x2451))+(((-1.0)*r10*x2450))+(((-1.0)*r12*x2447))+((r11*x2449)));
evalcond[3]=(((r21*x2455))+(((-1.0)*r20*x2458))+((r21*x2457))+x2452+x2453+((r20*x2454))+((r22*x2456)));
evalcond[4]=(((r20*x2464))+(((-1.0)*r21*x2465))+x2459+(((-1.0)*r22*x2463))+((r20*x2461))+((r21*x2462))+(((-1.0)*x2460)));
evalcond[5]=(((r00*x2464))+((r01*x2462))+(((-1.0)*r01*x2465))+(((-1.0)*r02*x2463))+((cj0*x2452))+((r00*x2461))+((cj0*x2453)));
evalcond[6]=((((-1.0)*x2451*x2459))+(((-1.0)*r00*x2458))+((r01*x2455))+((cj0*x2460))+((r02*x2456))+((r01*x2457))+((r00*x2454)));
evalcond[7]=((((-1.0)*r11*x2465))+((r10*x2464))+((r11*x2462))+((sj0*x2452))+(((-1.0)*r12*x2463))+((sj0*x2453))+((r10*x2461)));
evalcond[8]=(((r11*x2457))+((r11*x2455))+(((-1.0)*r10*x2458))+(((-1.0)*sj0*x2459))+((r12*x2456))+((sj0*x2460))+((r10*x2454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2466=((1.0)*cj0);
CheckValue<IkReal> x2467=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*gconst16*r00))+(((-1.0)*(1.0)*gconst17*r01)))),-1);
if(!x2467.valid){
continue;
}
CheckValue<IkReal> x2468 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2466)),IkReal((((cj0*gconst17*r20))+(((-1.0)*gconst16*r21*x2466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2467.value)))+(x2468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2469=IKcos(j4);
IkReal x2470=((1.0)*x2469);
IkReal x2471=IKsin(j4);
IkReal x2472=(gconst16*x2471);
IkReal x2473=((1.0)*gconst17*x2471);
IkReal x2474=((1.0)*cj0);
IkReal x2475=(cj1*sj2);
IkReal x2476=(cj2*sj1);
IkReal x2477=(gconst16*sj3);
IkReal x2478=(gconst17*sj3);
IkReal x2479=(cj3*x2471);
IkReal x2480=(cj3*gconst16*x2469);
IkReal x2481=((1.0)*cj3*gconst17*x2469);
IkReal x2482=(sj1*sj2);
IkReal x2483=(cj1*cj2);
IkReal x2484=(cj3*gconst16);
IkReal x2485=(cj3*gconst17);
IkReal x2486=((1.0)*sj3*x2471);
IkReal x2487=(gconst17*sj3*x2469);
IkReal x2488=((1.0)*gconst16*sj3*x2469);
evalcond[0]=((((-1.0)*r22*x2470))+((r21*x2472))+(((-1.0)*r20*x2473)));
evalcond[1]=(((r01*x2472))+sj0+(((-1.0)*r00*x2473))+(((-1.0)*r02*x2470)));
evalcond[2]=((((-1.0)*r12*x2470))+(((-1.0)*r10*x2473))+((r11*x2472))+(((-1.0)*x2474)));
evalcond[3]=(((r22*x2479))+((r20*x2477))+x2476+x2475+(((-1.0)*r20*x2481))+((r21*x2480))+((r21*x2478)));
evalcond[4]=(((r20*x2487))+x2482+((r21*x2485))+(((-1.0)*r21*x2488))+((r20*x2484))+(((-1.0)*r22*x2486))+(((-1.0)*x2483)));
evalcond[5]=((((-1.0)*r01*x2488))+((r00*x2487))+((cj0*x2476))+((r00*x2484))+((r01*x2485))+((cj0*x2475))+(((-1.0)*r02*x2486)));
evalcond[6]=(((cj0*x2483))+((r00*x2477))+((r01*x2480))+((r01*x2478))+(((-1.0)*r00*x2481))+(((-1.0)*x2474*x2482))+((r02*x2479)));
evalcond[7]=(((r10*x2484))+((sj0*x2476))+((r11*x2485))+((sj0*x2475))+(((-1.0)*r12*x2486))+((r10*x2487))+(((-1.0)*r11*x2488)));
evalcond[8]=(((sj0*x2483))+((r11*x2480))+((r12*x2479))+((r10*x2477))+((r11*x2478))+(((-1.0)*sj0*x2482))+(((-1.0)*r10*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2489=((1.0)*cj5);
IkReal x2490=((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2489)));
j4eval[0]=x2490;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2489))))));
j4eval[2]=IKsign(x2490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2491=((1.0)*sj5);
IkReal x2492=((((-1.0)*(1.0)*cj5*r01))+(((-1.0)*r00*x2491)));
j4eval[0]=x2492;
j4eval[1]=((IKabs(((((-1.0)*r21*x2491))+((cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x2493=(r11*((cj3*r21)));
IkReal x2494=cj5*cj5;
IkReal x2495=((1.0)*cj5*sj5);
IkReal x2496=((((-1.0)*cj3*r11*r20*x2495))+x2493+((cj3*r12*r22))+(((-1.0)*cj3*r10*r21*x2495))+((cj3*r10*r20*x2494))+(((-1.0)*x2493*x2494)));
j4eval[0]=x2496;
j4eval[1]=IKsign(x2496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2497=(r11*((cj3*r21)));
IkReal x2498=cj5*cj5;
IkReal x2499=(cj5*sj5);
IkReal x2500=((1.0)*cj5*r11*sj3);
IkReal x2501=((1.0)*r10*sj3);
IkReal x2502=(sj3*x2498);
CheckValue<IkReal> x2503 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2500))+(((-1.0)*r22*sj5*x2501)))),IkReal(((((-1.0)*r21*x2501))+((r10*r21*x2502))+((r11*r20*x2502))+((r10*r20*sj3*x2499))+(((-1.0)*r21*sj5*x2500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2503.valid){
continue;
}
CheckValue<IkReal> x2504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2497*x2498))+x2497+((cj3*r12*r22))+((cj3*r10*r20*x2498))+(((-1.0)*cj3*r10*r21*x2499))+(((-1.0)*cj3*cj5*r11*r20*sj5)))),-1);
if(!x2504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2503.value)+(((1.5707963267949)*(x2504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2505=IKcos(j4);
IkReal x2506=((1.0)*x2505);
IkReal x2507=IKsin(j4);
IkReal x2508=(sj5*x2507);
IkReal x2509=((1.0)*cj5*x2507);
IkReal x2510=(cj5*sj3);
IkReal x2511=(sj3*sj5);
IkReal x2512=(cj3*x2507);
IkReal x2513=(cj3*sj5*x2505);
IkReal x2514=((1.0)*cj3*cj5*x2505);
IkReal x2515=(cj3*cj5);
IkReal x2516=(cj3*sj5);
IkReal x2517=((1.0)*sj3*x2507);
IkReal x2518=(cj5*sj3*x2505);
IkReal x2519=((1.0)*sj3*sj5*x2505);
IkReal x2520=(((cj1*sj2))+((cj2*sj1)));
IkReal x2521=(cj1*cj2);
IkReal x2522=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2506))+((r21*x2508))+(((-1.0)*r20*x2509)));
evalcond[1]=(((r01*x2508))+(((-1.0)*r00*x2509))+(((-1.0)*r02*x2506)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x2506))+(((-1.0)*r10*x2509))+((r11*x2508)));
evalcond[3]=(((r10*x2511))+((r11*x2513))+(((-1.0)*r10*x2514))+((r12*x2512))+((r11*x2510)));
evalcond[4]=((((-1.0)*r11*x2519))+((r10*x2516))+((r11*x2515))+((r10*x2518))+(((-1.0)*r12*x2517)));
evalcond[5]=((((-1.0)*r20*x2514))+x2520+((r21*x2513))+((r21*x2510))+((r20*x2511))+((r22*x2512)));
evalcond[6]=(x2520+((r00*x2518))+(((-1.0)*r02*x2517))+(((-1.0)*r01*x2519))+((r01*x2515))+((r00*x2516)));
evalcond[7]=((((-1.0)*x2522))+((r02*x2512))+x2521+((r01*x2513))+((r01*x2510))+(((-1.0)*r00*x2514))+((r00*x2511)));
evalcond[8]=(((r20*x2518))+(((-1.0)*r21*x2519))+x2522+(((-1.0)*r22*x2517))+((r20*x2516))+((r21*x2515))+(((-1.0)*x2521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2523=((1.0)*sj5);
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*r22)))),IkReal(((((-1.0)*r21*x2523))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
CheckValue<IkReal> x2525=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2523))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x2525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2524.value)+(((1.5707963267949)*(x2525.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2526=IKcos(j4);
IkReal x2527=((1.0)*x2526);
IkReal x2528=IKsin(j4);
IkReal x2529=(sj5*x2528);
IkReal x2530=((1.0)*cj5*x2528);
IkReal x2531=(cj5*sj3);
IkReal x2532=(sj3*sj5);
IkReal x2533=(cj3*x2528);
IkReal x2534=(cj3*sj5*x2526);
IkReal x2535=((1.0)*cj3*cj5*x2526);
IkReal x2536=(cj3*cj5);
IkReal x2537=(cj3*sj5);
IkReal x2538=((1.0)*sj3*x2528);
IkReal x2539=(cj5*sj3*x2526);
IkReal x2540=((1.0)*sj3*sj5*x2526);
IkReal x2541=(((cj1*sj2))+((cj2*sj1)));
IkReal x2542=(cj1*cj2);
IkReal x2543=(sj1*sj2);
evalcond[0]=((((-1.0)*r22*x2527))+((r21*x2529))+(((-1.0)*r20*x2530)));
evalcond[1]=((((-1.0)*r02*x2527))+(((-1.0)*r00*x2530))+((r01*x2529)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x2530))+((r11*x2529))+(((-1.0)*r12*x2527)));
evalcond[3]=(((r11*x2531))+((r10*x2532))+((r12*x2533))+(((-1.0)*r10*x2535))+((r11*x2534)));
evalcond[4]=((((-1.0)*r12*x2538))+((r10*x2537))+((r10*x2539))+((r11*x2536))+(((-1.0)*r11*x2540)));
evalcond[5]=(((r21*x2531))+((r22*x2533))+((r20*x2532))+x2541+((r21*x2534))+(((-1.0)*r20*x2535)));
evalcond[6]=(x2541+((r00*x2537))+((r01*x2536))+(((-1.0)*r01*x2540))+((r00*x2539))+(((-1.0)*r02*x2538)));
evalcond[7]=(((r01*x2531))+(((-1.0)*r00*x2535))+((r00*x2532))+((r02*x2533))+x2542+((r01*x2534))+(((-1.0)*x2543)));
evalcond[8]=((((-1.0)*r22*x2538))+x2543+(((-1.0)*x2542))+((r20*x2537))+((r21*x2536))+(((-1.0)*r21*x2540))+((r20*x2539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2544=((1.0)*cj5);
CheckValue<IkReal> x2545=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2544)))),-1);
if(!x2545.valid){
continue;
}
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2545.value)))+(x2546.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2547=IKcos(j4);
IkReal x2548=((1.0)*x2547);
IkReal x2549=IKsin(j4);
IkReal x2550=(sj5*x2549);
IkReal x2551=((1.0)*cj5*x2549);
IkReal x2552=(cj5*sj3);
IkReal x2553=(sj3*sj5);
IkReal x2554=(cj3*x2549);
IkReal x2555=(cj3*sj5*x2547);
IkReal x2556=((1.0)*cj3*cj5*x2547);
IkReal x2557=(cj3*cj5);
IkReal x2558=(cj3*sj5);
IkReal x2559=((1.0)*sj3*x2549);
IkReal x2560=(cj5*sj3*x2547);
IkReal x2561=((1.0)*sj3*sj5*x2547);
IkReal x2562=(((cj1*sj2))+((cj2*sj1)));
IkReal x2563=(cj1*cj2);
IkReal x2564=(sj1*sj2);
evalcond[0]=((((-1.0)*r20*x2551))+(((-1.0)*r22*x2548))+((r21*x2550)));
evalcond[1]=(((r01*x2550))+(((-1.0)*r00*x2551))+(((-1.0)*r02*x2548)));
evalcond[2]=((-1.0)+((r11*x2550))+(((-1.0)*r10*x2551))+(((-1.0)*r12*x2548)));
evalcond[3]=(((r11*x2555))+((r10*x2553))+(((-1.0)*r10*x2556))+((r11*x2552))+((r12*x2554)));
evalcond[4]=(((r10*x2558))+(((-1.0)*r11*x2561))+(((-1.0)*r12*x2559))+((r11*x2557))+((r10*x2560)));
evalcond[5]=(((r22*x2554))+x2562+((r21*x2555))+(((-1.0)*r20*x2556))+((r21*x2552))+((r20*x2553)));
evalcond[6]=((((-1.0)*r02*x2559))+((r00*x2560))+x2562+((r01*x2557))+(((-1.0)*r01*x2561))+((r00*x2558)));
evalcond[7]=(((r00*x2553))+((r02*x2554))+x2563+(((-1.0)*r00*x2556))+(((-1.0)*x2564))+((r01*x2555))+((r01*x2552)));
evalcond[8]=(((r20*x2560))+((r20*x2558))+(((-1.0)*r21*x2561))+(((-1.0)*x2563))+x2564+(((-1.0)*r22*x2559))+((r21*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2565=(((r20*sj5))+((cj5*r21)));
j4eval[0]=x2565;
j4eval[1]=IKsign(x2565);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2566=((1.0)*cj5);
IkReal x2567=((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2566)));
j4eval[0]=x2567;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2566)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2568=(r11*((cj3*r21)));
IkReal x2569=cj5*cj5;
IkReal x2570=((1.0)*cj5*sj5);
IkReal x2571=((((-1.0)*cj3*r10*r21*x2570))+(((-1.0)*x2568*x2569))+((cj3*r12*r22))+x2568+((cj3*r10*r20*x2569))+(((-1.0)*cj3*r11*r20*x2570)));
j4eval[0]=x2571;
j4eval[1]=IKsign(x2571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2572=(r11*((cj3*r21)));
IkReal x2573=cj5*cj5;
IkReal x2574=(cj5*sj5);
IkReal x2575=((1.0)*cj5*r11*sj3);
IkReal x2576=((1.0)*r10*sj3);
IkReal x2577=(sj3*x2573);
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x2576))+(((-1.0)*r22*x2575)))),IkReal(((((-1.0)*r21*x2576))+((r10*r21*x2577))+((r10*r20*sj3*x2574))+(((-1.0)*r21*sj5*x2575))+((r11*r20*x2577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
CheckValue<IkReal> x2579=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*r10*r21*x2574))+((cj3*r12*r22))+(((-1.0)*x2572*x2573))+((cj3*r10*r20*x2573))+x2572+(((-1.0)*cj3*cj5*r11*r20*sj5)))),-1);
if(!x2579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2578.value)+(((1.5707963267949)*(x2579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2580=IKcos(j4);
IkReal x2581=((1.0)*x2580);
IkReal x2582=IKsin(j4);
IkReal x2583=(sj5*x2582);
IkReal x2584=((1.0)*cj5*x2582);
IkReal x2585=(cj5*sj3);
IkReal x2586=(sj3*sj5);
IkReal x2587=(cj3*x2582);
IkReal x2588=(cj3*sj5*x2580);
IkReal x2589=((1.0)*cj3*cj5*x2580);
IkReal x2590=(cj3*cj5);
IkReal x2591=(cj3*sj5);
IkReal x2592=((1.0)*sj3*x2582);
IkReal x2593=(cj5*sj3*x2580);
IkReal x2594=((1.0)*sj3*sj5*x2580);
IkReal x2595=(cj1*sj2);
IkReal x2596=(cj2*sj1);
IkReal x2597=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=((((-1.0)*r22*x2581))+(((-1.0)*r20*x2584))+((r21*x2583)));
evalcond[1]=(((r01*x2583))+(((-1.0)*r00*x2584))+(((-1.0)*r02*x2581)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2584))+((r11*x2583))+(((-1.0)*r12*x2581)));
evalcond[3]=(((r10*x2586))+(((-1.0)*r10*x2589))+((r11*x2585))+((r12*x2587))+((r11*x2588)));
evalcond[4]=((((-1.0)*r12*x2592))+((r11*x2590))+((r10*x2593))+((r10*x2591))+(((-1.0)*r11*x2594)));
evalcond[5]=(((r22*x2587))+((r20*x2586))+x2595+x2596+(((-1.0)*r20*x2589))+((r21*x2588))+((r21*x2585)));
evalcond[6]=(((r01*x2588))+((r02*x2587))+x2597+((r01*x2585))+((r00*x2586))+(((-1.0)*r00*x2589)));
evalcond[7]=((((-1.0)*r22*x2592))+x2597+((r21*x2590))+((r20*x2591))+(((-1.0)*r21*x2594))+((r20*x2593)));
evalcond[8]=(((r01*x2590))+(((-1.0)*x2595))+(((-1.0)*x2596))+(((-1.0)*r02*x2592))+(((-1.0)*r01*x2594))+((r00*x2593))+((r00*x2591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2598=((1.0)*cj5);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*r01*x2598)))),-1);
if(!x2599.valid){
continue;
}
CheckValue<IkReal> x2600 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2598))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2599.value)))+(x2600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2601=IKcos(j4);
IkReal x2602=((1.0)*x2601);
IkReal x2603=IKsin(j4);
IkReal x2604=(sj5*x2603);
IkReal x2605=((1.0)*cj5*x2603);
IkReal x2606=(cj5*sj3);
IkReal x2607=(sj3*sj5);
IkReal x2608=(cj3*x2603);
IkReal x2609=(cj3*sj5*x2601);
IkReal x2610=((1.0)*cj3*cj5*x2601);
IkReal x2611=(cj3*cj5);
IkReal x2612=(cj3*sj5);
IkReal x2613=((1.0)*sj3*x2603);
IkReal x2614=(cj5*sj3*x2601);
IkReal x2615=((1.0)*sj3*sj5*x2601);
IkReal x2616=(cj1*sj2);
IkReal x2617=(cj2*sj1);
IkReal x2618=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2604))+(((-1.0)*r20*x2605))+(((-1.0)*r22*x2602)));
evalcond[1]=((((-1.0)*r02*x2602))+(((-1.0)*r00*x2605))+((r01*x2604)));
evalcond[2]=((1.0)+(((-1.0)*r12*x2602))+((r11*x2604))+(((-1.0)*r10*x2605)));
evalcond[3]=(((r10*x2607))+((r11*x2606))+(((-1.0)*r10*x2610))+((r12*x2608))+((r11*x2609)));
evalcond[4]=((((-1.0)*r11*x2615))+((r11*x2611))+((r10*x2612))+(((-1.0)*r12*x2613))+((r10*x2614)));
evalcond[5]=(((r20*x2607))+((r22*x2608))+(((-1.0)*r20*x2610))+x2616+x2617+((r21*x2609))+((r21*x2606)));
evalcond[6]=((((-1.0)*r00*x2610))+x2618+((r00*x2607))+((r01*x2606))+((r01*x2609))+((r02*x2608)));
evalcond[7]=(x2618+(((-1.0)*r21*x2615))+(((-1.0)*r22*x2613))+((r20*x2614))+((r20*x2612))+((r21*x2611)));
evalcond[8]=(((r00*x2614))+(((-1.0)*x2616))+((r01*x2611))+(((-1.0)*r02*x2613))+(((-1.0)*r01*x2615))+((r00*x2612))+(((-1.0)*x2617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign((((r20*sj5))+((cj5*r21)))),-1);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2619.value)))+(x2620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2621=IKcos(j4);
IkReal x2622=((1.0)*x2621);
IkReal x2623=IKsin(j4);
IkReal x2624=(sj5*x2623);
IkReal x2625=((1.0)*cj5*x2623);
IkReal x2626=(cj5*sj3);
IkReal x2627=(sj3*sj5);
IkReal x2628=(cj3*x2623);
IkReal x2629=(cj3*sj5*x2621);
IkReal x2630=((1.0)*cj3*cj5*x2621);
IkReal x2631=(cj3*cj5);
IkReal x2632=(cj3*sj5);
IkReal x2633=((1.0)*sj3*x2623);
IkReal x2634=(cj5*sj3*x2621);
IkReal x2635=((1.0)*sj3*sj5*x2621);
IkReal x2636=(cj1*sj2);
IkReal x2637=(cj2*sj1);
IkReal x2638=((((-1.0)*(1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[0]=(((r21*x2624))+(((-1.0)*r22*x2622))+(((-1.0)*r20*x2625)));
evalcond[1]=(((r01*x2624))+(((-1.0)*r00*x2625))+(((-1.0)*r02*x2622)));
evalcond[2]=((1.0)+(((-1.0)*r10*x2625))+(((-1.0)*r12*x2622))+((r11*x2624)));
evalcond[3]=(((r12*x2628))+(((-1.0)*r10*x2630))+((r11*x2629))+((r11*x2626))+((r10*x2627)));
evalcond[4]=((((-1.0)*r11*x2635))+((r11*x2631))+((r10*x2634))+((r10*x2632))+(((-1.0)*r12*x2633)));
evalcond[5]=(((r21*x2626))+(((-1.0)*r20*x2630))+((r20*x2627))+((r22*x2628))+x2637+x2636+((r21*x2629)));
evalcond[6]=((((-1.0)*r00*x2630))+((r01*x2629))+((r02*x2628))+((r01*x2626))+((r00*x2627))+x2638);
evalcond[7]=((((-1.0)*r21*x2635))+((r20*x2632))+(((-1.0)*r22*x2633))+((r20*x2634))+x2638+((r21*x2631)));
evalcond[8]=(((r01*x2631))+((r00*x2634))+((r00*x2632))+(((-1.0)*r02*x2633))+(((-1.0)*r01*x2635))+(((-1.0)*x2637))+(((-1.0)*x2636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r11))+(IKabs(r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x2639=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2639);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2639);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=(((r01*sj5))+(((-1.0)*(1.0)*cj5*r00)));
j4eval[1]=r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2640=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2640);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2640);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
IkReal x2641=((1.0)*cj5);
j4eval[0]=(((r01*sj5))+(((-1.0)*r00*x2641)));
j4eval[1]=((((-1.0)*cj3*r20*x2641))+((cj3*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2642=((1.0)*py);
r11=0;
r10=0;
r22=0;
r02=0;
npx=(((pz*r20))+((px*r00)));
npy=(((pz*r21))+((px*r01)));
npz=(py*r12);
rxp0_0=((-1.0)*r20*x2642);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*r21*x2642);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*(((1.0)*px*r12)));
j4eval[0]=r12;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2644=IKPowWithIntegerCheck(r12,-1);
if(!x2644.valid){
continue;
}
IkReal x2643=x2644.value;
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(sj3,-1);
if(!x2645.valid){
continue;
}
if( IKabs((x2643*(x2645.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj0*x2643)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x2643*(x2645.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))))+IKsqr(((-1.0)*cj0*x2643))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x2643*(x2645.value)*((((cj1*sj0*sj2))+((cj2*sj0*sj1))))), ((-1.0)*cj0*x2643));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2646=((1.0)*cj0);
IkReal x2647=IKcos(j4);
IkReal x2648=((1.0)*r12);
IkReal x2649=IKsin(j4);
IkReal x2650=(sj5*x2649);
IkReal x2651=((1.0)*cj5*x2649);
IkReal x2652=(cj1*sj2);
IkReal x2653=(cj2*sj1);
IkReal x2654=(cj1*cj2);
IkReal x2655=(sj1*sj2);
IkReal x2656=(cj5*sj3);
IkReal x2657=(sj3*sj5);
IkReal x2658=(cj3*sj5*x2647);
IkReal x2659=((1.0)*cj3*cj5*x2647);
IkReal x2660=(cj3*cj5);
IkReal x2661=(cj3*sj5);
IkReal x2662=(cj5*sj3*x2647);
IkReal x2663=((1.0)*sj3*sj5*x2647);
evalcond[0]=((((-1.0)*x2647*x2648))+(((-1.0)*x2646)));
evalcond[1]=(((r21*x2650))+(((-1.0)*r20*x2651)));
evalcond[2]=((((-1.0)*r00*x2651))+((r01*x2650))+sj0);
evalcond[3]=((((-1.0)*sj3*x2648*x2649))+((sj0*x2653))+((sj0*x2652)));
evalcond[4]=(((sj0*x2654))+((cj3*r12*x2649))+(((-1.0)*sj0*x2655)));
evalcond[5]=(((r20*x2657))+(((-1.0)*r20*x2659))+((r21*x2656))+((r21*x2658))+x2653+x2652);
evalcond[6]=(((r20*x2661))+((r21*x2660))+(((-1.0)*r21*x2663))+((r20*x2662))+x2655+(((-1.0)*x2654)));
evalcond[7]=(((r01*x2660))+(((-1.0)*r01*x2663))+((cj0*x2653))+((r00*x2661))+((cj0*x2652))+((r00*x2662)));
evalcond[8]=((((-1.0)*x2646*x2655))+((r00*x2657))+((cj0*x2654))+(((-1.0)*r00*x2659))+((r01*x2658))+((r01*x2656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2664=((1.0)*cj5);
CheckValue<IkReal> x2665=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x2664))),-1);
if(!x2665.valid){
continue;
}
CheckValue<IkReal> x2666=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x2664))),-1);
if(!x2666.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2665.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2666.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2664))+(((-1.0)*(1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2665.value)))+IKsqr(((x2666.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2664))+(((-1.0)*(1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2665.value)), ((x2666.value)*(((((-1.0)*(1.0)*r20*sj3*sj5))+(((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*r21*sj3*x2664))+(((-1.0)*(1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2667=((1.0)*cj0);
IkReal x2668=IKcos(j4);
IkReal x2669=((1.0)*r12);
IkReal x2670=IKsin(j4);
IkReal x2671=(sj5*x2670);
IkReal x2672=((1.0)*cj5*x2670);
IkReal x2673=(cj1*sj2);
IkReal x2674=(cj2*sj1);
IkReal x2675=(cj1*cj2);
IkReal x2676=(sj1*sj2);
IkReal x2677=(cj5*sj3);
IkReal x2678=(sj3*sj5);
IkReal x2679=(cj3*sj5*x2668);
IkReal x2680=((1.0)*cj3*cj5*x2668);
IkReal x2681=(cj3*cj5);
IkReal x2682=(cj3*sj5);
IkReal x2683=(cj5*sj3*x2668);
IkReal x2684=((1.0)*sj3*sj5*x2668);
evalcond[0]=((((-1.0)*x2668*x2669))+(((-1.0)*x2667)));
evalcond[1]=((((-1.0)*r20*x2672))+((r21*x2671)));
evalcond[2]=((((-1.0)*r00*x2672))+((r01*x2671))+sj0);
evalcond[3]=((((-1.0)*sj3*x2669*x2670))+((sj0*x2673))+((sj0*x2674)));
evalcond[4]=(((sj0*x2675))+(((-1.0)*sj0*x2676))+((cj3*r12*x2670)));
evalcond[5]=((((-1.0)*r20*x2680))+x2674+x2673+((r21*x2679))+((r21*x2677))+((r20*x2678)));
evalcond[6]=(((r20*x2682))+(((-1.0)*r21*x2684))+x2676+(((-1.0)*x2675))+((r20*x2683))+((r21*x2681)));
evalcond[7]=((((-1.0)*r01*x2684))+((r00*x2683))+((r01*x2681))+((r00*x2682))+((cj0*x2673))+((cj0*x2674)));
evalcond[8]=((((-1.0)*x2667*x2676))+(((-1.0)*r00*x2680))+((cj0*x2675))+((r01*x2679))+((r01*x2677))+((r00*x2678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2685=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*(1.0)*cj5*r00))),-1);
if(!x2685.valid){
continue;
}
CheckValue<IkReal> x2686=IKPowWithIntegerCheck(r12,-1);
if(!x2686.valid){
continue;
}
if( IKabs(((-1.0)*sj0*(x2685.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*cj0*(x2686.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*sj0*(x2685.value)))+IKsqr(((-1.0)*(((1.0)*cj0*(x2686.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*sj0*(x2685.value)), ((-1.0)*(((1.0)*cj0*(x2686.value)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2687=((1.0)*cj0);
IkReal x2688=IKcos(j4);
IkReal x2689=((1.0)*r12);
IkReal x2690=IKsin(j4);
IkReal x2691=(sj5*x2690);
IkReal x2692=((1.0)*cj5*x2690);
IkReal x2693=(cj1*sj2);
IkReal x2694=(cj2*sj1);
IkReal x2695=(cj1*cj2);
IkReal x2696=(sj1*sj2);
IkReal x2697=(cj5*sj3);
IkReal x2698=(sj3*sj5);
IkReal x2699=(cj3*sj5*x2688);
IkReal x2700=((1.0)*cj3*cj5*x2688);
IkReal x2701=(cj3*cj5);
IkReal x2702=(cj3*sj5);
IkReal x2703=(cj5*sj3*x2688);
IkReal x2704=((1.0)*sj3*sj5*x2688);
evalcond[0]=((((-1.0)*x2687))+(((-1.0)*x2688*x2689)));
evalcond[1]=(((r21*x2691))+(((-1.0)*r20*x2692)));
evalcond[2]=((((-1.0)*r00*x2692))+((r01*x2691))+sj0);
evalcond[3]=(((sj0*x2693))+((sj0*x2694))+(((-1.0)*sj3*x2689*x2690)));
evalcond[4]=(((cj3*r12*x2690))+(((-1.0)*sj0*x2696))+((sj0*x2695)));
evalcond[5]=((((-1.0)*r20*x2700))+x2694+x2693+((r20*x2698))+((r21*x2697))+((r21*x2699)));
evalcond[6]=(((r20*x2703))+((r20*x2702))+x2696+(((-1.0)*x2695))+((r21*x2701))+(((-1.0)*r21*x2704)));
evalcond[7]=(((cj0*x2694))+(((-1.0)*r01*x2704))+((r01*x2701))+((r00*x2703))+((r00*x2702))+((cj0*x2693)));
evalcond[8]=(((r01*x2697))+((r00*x2698))+(((-1.0)*r00*x2700))+((cj0*x2695))+(((-1.0)*x2687*x2696))+((r01*x2699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2705=((1.0)*cj5);
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal((((cj0*r02))+((r12*sj0)))),IkReal((((r11*sj0*sj5))+(((-1.0)*r10*sj0*x2705))+((cj0*r01*sj5))+(((-1.0)*cj0*r00*x2705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r20*sj5))+(((-1.0)*r21*x2705)))),-1);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2706.value)+(((1.5707963267949)*(x2707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2708=IKcos(j4);
IkReal x2709=((1.0)*x2708);
IkReal x2710=IKsin(j4);
IkReal x2711=(sj5*x2710);
IkReal x2712=((1.0)*cj5*x2710);
IkReal x2713=((1.0)*cj0);
IkReal x2714=(cj1*sj2);
IkReal x2715=(cj2*sj1);
IkReal x2716=(cj5*sj3);
IkReal x2717=(sj3*sj5);
IkReal x2718=(cj3*x2710);
IkReal x2719=(cj3*sj5*x2708);
IkReal x2720=((1.0)*cj3*cj5*x2708);
IkReal x2721=(sj1*sj2);
IkReal x2722=(cj1*cj2);
IkReal x2723=(cj3*cj5);
IkReal x2724=(cj3*sj5);
IkReal x2725=((1.0)*sj3*x2710);
IkReal x2726=(cj5*sj3*x2708);
IkReal x2727=((1.0)*sj3*sj5*x2708);
evalcond[0]=((((-1.0)*r20*x2712))+((r21*x2711))+(((-1.0)*r22*x2709)));
evalcond[1]=((((-1.0)*r02*x2709))+(((-1.0)*r00*x2712))+sj0+((r01*x2711)));
evalcond[2]=(((r11*x2711))+(((-1.0)*r12*x2709))+(((-1.0)*x2713))+(((-1.0)*r10*x2712)));
evalcond[3]=(((r21*x2719))+((r20*x2717))+((r22*x2718))+(((-1.0)*r20*x2720))+((r21*x2716))+x2715+x2714);
evalcond[4]=(x2721+((r20*x2724))+((r20*x2726))+((r21*x2723))+(((-1.0)*x2722))+(((-1.0)*r22*x2725))+(((-1.0)*r21*x2727)));
evalcond[5]=(((r00*x2726))+((cj0*x2714))+((r01*x2723))+(((-1.0)*r02*x2725))+(((-1.0)*r01*x2727))+((cj0*x2715))+((r00*x2724)));
evalcond[6]=(((cj0*x2722))+(((-1.0)*x2713*x2721))+(((-1.0)*r00*x2720))+((r02*x2718))+((r01*x2716))+((r00*x2717))+((r01*x2719)));
evalcond[7]=(((r10*x2724))+((sj0*x2714))+(((-1.0)*r11*x2727))+((r10*x2726))+(((-1.0)*r12*x2725))+((sj0*x2715))+((r11*x2723)));
evalcond[8]=(((r11*x2716))+((r10*x2717))+(((-1.0)*r10*x2720))+((sj0*x2722))+((r12*x2718))+((r11*x2719))+(((-1.0)*sj0*x2721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2728=((1.0)*cj0);
CheckValue<IkReal> x2729 = IKatan2WithCheck(IkReal(((-1.0)*r22*x2728)),IkReal(((((-1.0)*r21*sj5*x2728))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2729.valid){
continue;
}
CheckValue<IkReal> x2730=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.0)*r00*sj5))+(((-1.0)*(1.0)*cj5*r01)))),-1);
if(!x2730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2729.value)+(((1.5707963267949)*(x2730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2731=IKcos(j4);
IkReal x2732=((1.0)*x2731);
IkReal x2733=IKsin(j4);
IkReal x2734=(sj5*x2733);
IkReal x2735=((1.0)*cj5*x2733);
IkReal x2736=((1.0)*cj0);
IkReal x2737=(cj1*sj2);
IkReal x2738=(cj2*sj1);
IkReal x2739=(cj5*sj3);
IkReal x2740=(sj3*sj5);
IkReal x2741=(cj3*x2733);
IkReal x2742=(cj3*sj5*x2731);
IkReal x2743=((1.0)*cj3*cj5*x2731);
IkReal x2744=(sj1*sj2);
IkReal x2745=(cj1*cj2);
IkReal x2746=(cj3*cj5);
IkReal x2747=(cj3*sj5);
IkReal x2748=((1.0)*sj3*x2733);
IkReal x2749=(cj5*sj3*x2731);
IkReal x2750=((1.0)*sj3*sj5*x2731);
evalcond[0]=(((r21*x2734))+(((-1.0)*r20*x2735))+(((-1.0)*r22*x2732)));
evalcond[1]=((((-1.0)*r02*x2732))+(((-1.0)*r00*x2735))+((r01*x2734))+sj0);
evalcond[2]=(((r11*x2734))+(((-1.0)*r10*x2735))+(((-1.0)*x2736))+(((-1.0)*r12*x2732)));
evalcond[3]=(x2738+x2737+(((-1.0)*r20*x2743))+((r21*x2739))+((r20*x2740))+((r22*x2741))+((r21*x2742)));
evalcond[4]=(((r20*x2749))+((r20*x2747))+((r21*x2746))+x2744+(((-1.0)*x2745))+(((-1.0)*r21*x2750))+(((-1.0)*r22*x2748)));
evalcond[5]=(((cj0*x2738))+(((-1.0)*r01*x2750))+((r00*x2749))+((cj0*x2737))+((r00*x2747))+(((-1.0)*r02*x2748))+((r01*x2746)));
evalcond[6]=(((r01*x2742))+((r00*x2740))+((r01*x2739))+((cj0*x2745))+((r02*x2741))+(((-1.0)*r00*x2743))+(((-1.0)*x2736*x2744)));
evalcond[7]=(((r11*x2746))+((r10*x2749))+((sj0*x2738))+((r10*x2747))+((sj0*x2737))+(((-1.0)*r12*x2748))+(((-1.0)*r11*x2750)));
evalcond[8]=(((sj0*x2745))+((r11*x2739))+((r11*x2742))+((r12*x2741))+((r10*x2740))+(((-1.0)*sj0*x2744))+(((-1.0)*r10*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2751 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*(1.0)*cj5*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2751.valid){
continue;
}
CheckValue<IkReal> x2752=IKPowWithIntegerCheck(IKsign((((r10*sj5))+((cj5*r11)))),-1);
if(!x2752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2751.value)+(((1.5707963267949)*(x2752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x2753=IKcos(j4);
IkReal x2754=((1.0)*x2753);
IkReal x2755=IKsin(j4);
IkReal x2756=(sj5*x2755);
IkReal x2757=((1.0)*cj5*x2755);
IkReal x2758=((1.0)*cj0);
IkReal x2759=(cj1*sj2);
IkReal x2760=(cj2*sj1);
IkReal x2761=(cj5*sj3);
IkReal x2762=(sj3*sj5);
IkReal x2763=(cj3*x2755);
IkReal x2764=(cj3*sj5*x2753);
IkReal x2765=((1.0)*cj3*cj5*x2753);
IkReal x2766=(sj1*sj2);
IkReal x2767=(cj1*cj2);
IkReal x2768=(cj3*cj5);
IkReal x2769=(cj3*sj5);
IkReal x2770=((1.0)*sj3*x2755);
IkReal x2771=(cj5*sj3*x2753);
IkReal x2772=((1.0)*sj3*sj5*x2753);
evalcond[0]=((((-1.0)*r22*x2754))+(((-1.0)*r20*x2757))+((r21*x2756)));
evalcond[1]=((((-1.0)*r02*x2754))+(((-1.0)*r00*x2757))+sj0+((r01*x2756)));
evalcond[2]=((((-1.0)*x2758))+((r11*x2756))+(((-1.0)*r10*x2757))+(((-1.0)*r12*x2754)));
evalcond[3]=(((r21*x2761))+((r20*x2762))+((r22*x2763))+x2759+((r21*x2764))+(((-1.0)*r20*x2765))+x2760);
evalcond[4]=((((-1.0)*r21*x2772))+((r20*x2769))+(((-1.0)*x2767))+((r21*x2768))+(((-1.0)*r22*x2770))+x2766+((r20*x2771)));
evalcond[5]=(((r01*x2768))+((cj0*x2760))+((r00*x2771))+(((-1.0)*r02*x2770))+((cj0*x2759))+(((-1.0)*r01*x2772))+((r00*x2769)));
evalcond[6]=(((r00*x2762))+(((-1.0)*r00*x2765))+(((-1.0)*x2758*x2766))+((cj0*x2767))+((r02*x2763))+((r01*x2761))+((r01*x2764)));
evalcond[7]=((((-1.0)*r11*x2772))+((sj0*x2760))+((r10*x2769))+((r11*x2768))+((sj0*x2759))+(((-1.0)*r12*x2770))+((r10*x2771)));
evalcond[8]=(((r10*x2762))+((sj0*x2767))+(((-1.0)*r10*x2765))+((r12*x2763))+(((-1.0)*sj0*x2766))+((r11*x2764))+((r11*x2761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2773=r21*r21;
IkReal x2774=(cj3*x2773);
IkReal x2775=((2.0)*r21);
IkReal x2776=cj5*cj5;
IkReal x2777=r20*r20;
IkReal x2778=((1.0)*r22);
IkReal x2779=(cj1*sj2);
IkReal x2780=(cj2*sj1);
IkReal x2781=(r20*sj3);
IkReal x2782=(cj5*r20);
IkReal x2783=((1.0)*r21*sj5);
IkReal x2784=(cj5*sj3*sj5);
CheckValue<IkReal> x2785 = IKatan2WithCheck(IkReal(((((-1.0)*x2778*x2780))+(((-1.0)*x2778*x2779))+(((-1.0)*r22*sj5*x2781))+(((-1.0)*cj5*r21*r22*sj3)))),IkReal((((x2779*x2782))+(((-1.0)*r21*x2781))+((x2777*x2784))+((x2780*x2782))+(((-1.0)*x2780*x2783))+(((-1.0)*x2779*x2783))+((r20*sj3*x2775*x2776))+(((-1.0)*x2773*x2784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2785.valid){
continue;
}
CheckValue<IkReal> x2786=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2774*x2776))+((cj3*x2776*x2777))+((cj3*(r22*r22)))+x2774+(((-1.0)*cj3*cj5*r20*sj5*x2775)))),-1);
if(!x2786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2785.value)+(((1.5707963267949)*(x2786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2787=IKcos(j4);
IkReal x2788=((1.0)*r22);
IkReal x2789=IKsin(j4);
IkReal x2790=(r21*sj5);
IkReal x2791=((1.0)*cj5*r20);
IkReal x2792=(cj5*r21);
IkReal x2793=(r20*sj5);
IkReal x2794=(cj3*x2787);
IkReal x2795=(sj3*x2787);
evalcond[0]=(((x2789*x2790))+(((-1.0)*x2789*x2791))+(((-1.0)*x2787*x2788)));
evalcond[1]=(((sj3*x2793))+((x2790*x2794))+((cj3*r22*x2789))+((cj1*sj2))+((sj3*x2792))+(((-1.0)*x2791*x2794))+((cj2*sj1)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+((cj3*x2792))+((cj3*x2793))+(((-1.0)*r21*sj5*x2795))+(((-1.0)*sj3*x2788*x2789))+((cj5*r20*x2795))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2796=(cj5*sj4);
IkReal x2797=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x2796))+(((-1.0)*r01*x2797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2796))+(((-1.0)*(1.0)*cj4*r12))+((r11*x2797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x2796))+(((-1.0)*r01*x2797))))+IKsqr(((((-1.0)*r10*x2796))+(((-1.0)*(1.0)*cj4*r12))+((r11*x2797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x2796))+(((-1.0)*r01*x2797))), ((((-1.0)*r10*x2796))+(((-1.0)*(1.0)*cj4*r12))+((r11*x2797))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2798=IKsin(j0);
IkReal x2799=((1.0)*cj4);
IkReal x2800=(sj4*sj5);
IkReal x2801=((1.0)*cj5*sj4);
IkReal x2802=IKcos(j0);
IkReal x2803=((1.0)*x2802);
IkReal x2804=((0.09465)*cj5);
IkReal x2805=((0.09465)*sj5);
IkReal x2806=((0.425)*cj1);
IkReal x2807=(cj1*cj2);
IkReal x2808=(x2802*x2807);
IkReal x2809=(sj1*sj2);
IkReal x2810=(x2798*x2807);
IkReal x2811=(sj1*sj2*x2798);
IkReal x2812=(cj3*cj5);
IkReal x2813=(cj3*sj5);
IkReal x2814=(cj1*sj2);
IkReal x2815=(cj2*sj1);
IkReal x2816=((1.0)*sj3*sj4);
IkReal x2817=(cj4*cj5*sj3);
IkReal x2818=((1.0)*cj4*sj3*sj5);
IkReal x2819=(cj3*sj4);
IkReal x2820=(cj5*sj3);
IkReal x2821=(sj3*sj5);
IkReal x2822=(cj3*cj4*sj5);
IkReal x2823=((1.0)*cj3*cj4*cj5);
evalcond[0]=(x2798+(((-1.0)*r02*x2799))+(((-1.0)*r00*x2801))+((r01*x2800)));
evalcond[1]=((((-1.0)*r10*x2801))+(((-1.0)*r12*x2799))+(((-1.0)*x2803))+((r11*x2800)));
evalcond[2]=((((0.39225)*x2802*x2809))+(((-1.0)*(1.0)*px))+(((-1.0)*x2802*x2806))+(((-0.39225)*x2808))+(((0.10915)*x2798))+(((-1.0)*r00*x2805))+(((-1.0)*r01*x2804)));
evalcond[3]=((((-0.39225)*x2810))+(((-1.0)*(1.0)*py))+(((0.39225)*x2811))+(((-1.0)*r11*x2804))+(((-0.10915)*x2802))+(((-1.0)*x2798*x2806))+(((-1.0)*r10*x2805)));
evalcond[4]=(((r00*x2817))+(((-1.0)*r01*x2818))+((r00*x2813))+((r01*x2812))+(((-1.0)*r02*x2816))+((x2802*x2814))+((x2802*x2815)));
evalcond[5]=(((r01*x2820))+x2808+((r00*x2821))+((r02*x2819))+((r01*x2822))+(((-1.0)*x2803*x2809))+(((-1.0)*r00*x2823)));
evalcond[6]=(((r11*x2812))+((r10*x2817))+(((-1.0)*r12*x2816))+((r10*x2813))+((x2798*x2814))+(((-1.0)*r11*x2818))+((x2798*x2815)));
evalcond[7]=(((r11*x2822))+(((-1.0)*x2811))+x2810+((r12*x2819))+((r10*x2821))+((r11*x2820))+(((-1.0)*r10*x2823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2824=r21*r21;
IkReal x2825=(sj3*x2824);
IkReal x2826=(r21*sj5);
IkReal x2827=cj5*cj5;
IkReal x2828=r20*r20;
IkReal x2829=(sj1*sj2);
IkReal x2830=((1.0)*cj1*cj2);
IkReal x2831=(cj3*r21);
IkReal x2832=(r20*x2831);
IkReal x2833=(cj5*r20);
IkReal x2834=(cj3*cj5*sj5);
CheckValue<IkReal> x2835 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2830))+((r22*x2829))+((((r20*r22))*((cj3*sj5))))+((cj5*r22*x2831)))),IkReal(((((-2.0)*x2827*x2832))+((x2824*x2834))+((x2826*x2829))+(((-1.0)*sj1*sj2*x2833))+(((-1.0)*x2828*x2834))+x2832+(((-1.0)*x2826*x2830))+((cj1*cj2*x2833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2835.valid){
continue;
}
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2825*x2827))+x2825+((sj3*(r22*r22)))+((sj3*x2827*x2828))+(((-2.0)*cj5*r20*sj3*x2826)))),-1);
if(!x2836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2835.value)+(((1.5707963267949)*(x2836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x2837=IKcos(j4);
IkReal x2838=((1.0)*r22);
IkReal x2839=IKsin(j4);
IkReal x2840=(r21*sj5);
IkReal x2841=((1.0)*cj5*r20);
IkReal x2842=(cj5*r21);
IkReal x2843=(r20*sj5);
IkReal x2844=(cj3*x2837);
IkReal x2845=(sj3*x2837);
evalcond[0]=((((-1.0)*x2839*x2841))+(((-1.0)*x2837*x2838))+((x2839*x2840)));
evalcond[1]=(((cj1*sj2))+((x2840*x2844))+((cj3*r22*x2839))+((sj3*x2843))+(((-1.0)*x2841*x2844))+((sj3*x2842))+((cj2*sj1)));
evalcond[2]=((((-1.0)*(1.0)*cj1*cj2))+(((-1.0)*r21*sj5*x2845))+((cj3*x2842))+((cj3*x2843))+(((-1.0)*sj3*x2838*x2839))+((cj5*r20*x2845))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2846=(cj5*sj4);
IkReal x2847=(sj4*sj5);
if( IKabs((((cj4*r02))+((r00*x2846))+(((-1.0)*r01*x2847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*cj4*r12))+((r11*x2847))+(((-1.0)*r10*x2846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*r02))+((r00*x2846))+(((-1.0)*r01*x2847))))+IKsqr(((((-1.0)*(1.0)*cj4*r12))+((r11*x2847))+(((-1.0)*r10*x2846))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*r02))+((r00*x2846))+(((-1.0)*r01*x2847))), ((((-1.0)*(1.0)*cj4*r12))+((r11*x2847))+(((-1.0)*r10*x2846))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2848=IKsin(j0);
IkReal x2849=((1.0)*cj4);
IkReal x2850=(sj4*sj5);
IkReal x2851=((1.0)*cj5*sj4);
IkReal x2852=IKcos(j0);
IkReal x2853=((1.0)*x2852);
IkReal x2854=((0.09465)*cj5);
IkReal x2855=((0.09465)*sj5);
IkReal x2856=((0.425)*cj1);
IkReal x2857=(cj1*cj2);
IkReal x2858=(x2852*x2857);
IkReal x2859=(sj1*sj2);
IkReal x2860=(x2848*x2857);
IkReal x2861=(sj1*sj2*x2848);
IkReal x2862=(cj3*cj5);
IkReal x2863=(cj3*sj5);
IkReal x2864=(cj1*sj2);
IkReal x2865=(cj2*sj1);
IkReal x2866=((1.0)*sj3*sj4);
IkReal x2867=(cj4*cj5*sj3);
IkReal x2868=((1.0)*cj4*sj3*sj5);
IkReal x2869=(cj3*sj4);
IkReal x2870=(cj5*sj3);
IkReal x2871=(sj3*sj5);
IkReal x2872=(cj3*cj4*sj5);
IkReal x2873=((1.0)*cj3*cj4*cj5);
evalcond[0]=(x2848+(((-1.0)*r02*x2849))+((r01*x2850))+(((-1.0)*r00*x2851)));
evalcond[1]=((((-1.0)*x2853))+((r11*x2850))+(((-1.0)*r10*x2851))+(((-1.0)*r12*x2849)));
evalcond[2]=((((-1.0)*(1.0)*px))+(((-1.0)*r00*x2855))+(((-1.0)*r01*x2854))+(((0.10915)*x2848))+(((-0.39225)*x2858))+(((0.39225)*x2852*x2859))+(((-1.0)*x2852*x2856)));
evalcond[3]=((((-1.0)*x2848*x2856))+(((-1.0)*(1.0)*py))+(((-0.10915)*x2852))+(((-1.0)*r10*x2855))+(((-1.0)*r11*x2854))+(((-0.39225)*x2860))+(((0.39225)*x2861)));
evalcond[4]=(((r00*x2863))+((r01*x2862))+((x2852*x2864))+((x2852*x2865))+(((-1.0)*r02*x2866))+((r00*x2867))+(((-1.0)*r01*x2868)));
evalcond[5]=((((-1.0)*x2853*x2859))+((r01*x2870))+((r01*x2872))+((r00*x2871))+((r02*x2869))+x2858+(((-1.0)*r00*x2873)));
evalcond[6]=(((r11*x2862))+(((-1.0)*r12*x2866))+(((-1.0)*r11*x2868))+((r10*x2863))+((x2848*x2865))+((x2848*x2864))+((r10*x2867)));
evalcond[7]=(x2860+((r10*x2871))+(((-1.0)*x2861))+((r12*x2869))+((r11*x2872))+((r11*x2870))+(((-1.0)*r10*x2873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (973673f8bf550660d7421e56e1b18c37)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
